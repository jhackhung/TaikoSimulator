Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/23/24 00:02:24
main_game_page.asm					     Page 1 - 1


				.686P
				.XMM
				.model flat, c
				include csfml.inc
			      C ; CSFML.INC - SFML Definitions for x86 Assembly
			      C ; 使用 MASM 語法
			      C 
			      C includelib csfml-audio.lib
			      C includelib csfml-graphics.lib
			      C includelib csfml-system.lib
			      C includelib csfml-window.lib
			      C 
			      C ; sfBool 定義
 = 00000000		      C sfFalse     equ 0
 = 00000001		      C sfTrue      equ 1
			      C 
			      C ; sfMusic status
 = 00000000		      C sfStopped   equ 0
 = 00000001		      C sfPaused    equ 1
 = 00000002		      C sfPlaying   equ 2
			      C 
			      C 
			      C ; sfEventType 定義
 = 00000000		      C sfEvtClosed               equ 0
 = 00000001		      C sfEvtResized              equ 1
 = 00000002		      C sfEvtLostFocus            equ 2
 = 00000003		      C sfEvtGainedFocus          equ 3
 = 00000004		      C sfEvtTextEntered          equ 4
 = 00000005		      C sfEvtKeyPressed           equ 5
 = 00000006		      C sfEvtKeyReleased          equ 6
 = 00000007		      C sfEvtMouseWheelMoved      equ 7
 = 00000008		      C sfEvtMouseWheelScrolled   equ 8
 = 00000009		      C sfEvtMouseButtonPressed   equ 9
 = 0000000A		      C sfEvtMouseButtonReleased  equ 10
 = 0000000B		      C sfEvtMouseMoved           equ 11
 = 0000000C		      C sfEvtMouseEntered         equ 12
 = 0000000D		      C sfEvtMouseLeft            equ 13
			      C 
			      C ; sfMouseButton 定義
 = 00000000		      C sfMouseLeft   equ 0
 = 00000001		      C sfMouseRight  equ 1
 = 00000002		      C sfMouseMiddle equ 2
			      C 
			      C ; sfKey 定義
 = 0000003A		      C sfKeyEnter    equ 58
 = 00000000		      C sfKeyA        equ 0
 = 00000012		      C sfKeyS        equ 18
 = 00000003		      C sfKeyD        equ 3
 = 00000024		      C sfKeyEscape   equ 36
 = 00000005		      C sfKeyF        equ 5
 = 00000009		      C sfKeyJ        equ 9
 = 0000000A		      C sfKeyK        equ 10
			      C 
			      C ; 視窗風格定義
 = 00000000		      C sfNone       equ 0
 = 00000001		      C sfTitlebar   equ 1
 = 00000002		      C sfResize     equ 2
 = 00000004		      C sfClose      equ 4
 = 00000008		      C sfFullscreen equ 8
			      C 
			      C ; 結構體定義
 00000008		      C sfVector2f STRUCT
 00000000  00000000	      C     x REAL4 ?
 00000004  00000000	      C     y REAL4 ?
			      C sfVector2f ENDS
			      C 
 00000008		      C sfVector2i STRUCT
 00000000  00000000	      C     x SDWORD ?
 00000004  00000000	      C     y SDWORD ?
			      C sfVector2i ENDS
			      C 
 0000000C		      C sfVideoMode STRUCT
 00000000  00000000	      C     _width  DWORD ?
 00000004  00000000	      C     height DWORD ?
 00000008  00000000	      C     bpp    DWORD ?
			      C sfVideoMode ENDS
			      C 
 00000004		      C sfColor STRUCT
 00000000  00		      C     r BYTE ?
 00000001  00		      C     g BYTE ?
 00000002  00		      C     b BYTE ?
 00000003  00		      C     a BYTE ?
			      C sfColor ENDS
			      C 
 00000010		      C sfFloatRect STRUCT
 00000000  00000000	      C     left   REAL4 ?
 00000004  00000000	      C     top    REAL4 ?
 00000008  00000000	      C     _width  REAL4 ?
 0000000C  00000000	      C     height REAL4 ?
			      C sfFloatRect ENDS
			      C 
 0000000C		      C mouseButton STRUCT
 00000000  00000000	      C     button DWORD ?
 00000004  00000000	      C     x DWORD ?
 00000008  00000000	      C     y DWORD ?
			      C mouseButton ENDS
			      C 
 00000014		      C key STRUCT
 00000000  00000000	      C     code DWORD ?
 00000004  00000000	      C     alt DWORD ?
 00000008  00000000	      C     control DWORD ?
 0000000C  00000000	      C     shift DWORD ?
 00000010  00000000	      C     system DWORD ?
			      C key ENDS
			      C 
 00000030		      C sfEvent STRUCT
 00000000  00000000	      C     _type DWORD ?                
 00000004  00000000	      C     _size DWORD ?                
 00000008  00000000	      C     mouse mouseButton <>       
	   00000000
	   00000000
 00000014  00000000	      C     _key key <>                 
	   00000000
	   00000000
	   00000000
	   00000000
 00000028  00000000	      C     mouseMove sfVector2i <>     
	   00000000
			      C sfEvent ENDS
			      C 
			      C ; 函數原型 - 視窗相關
			      C EXTERN sfRenderWindow_create:PROC
			      C EXTERN sfRenderWindow_destroy:PROC
			      C EXTERN sfRenderWindow_close:PROC
			      C EXTERN sfRenderWindow_isOpen:PROC
			      C EXTERN sfRenderWindow_clear:PROC
			      C EXTERN sfRenderWindow_display:PROC
			      C EXTERN sfRenderWindow_pollEvent:PROC
			      C EXTERN sfRenderWindow_drawSprite:PROC
			      C EXTERN sfRenderWindow_drawText:PROC
			      C 
			      C EXTERN sfWindow_setFramerateLimit:PROC
			      C 
			      C ; 函數原型 - 紋理相關
			      C EXTERN sfTexture_createFromFile:PROC
			      C EXTERN sfTexture_destroy:PROC
			      C 
			      C ; 函數原型 - 精靈相關
			      C EXTERN sfSprite_create:PROC
			      C EXTERN sfSprite_destroy:PROC
			      C EXTERN sfSprite_setTexture:PROC
			      C EXTERN sfSprite_setPosition:PROC
			      C EXTERN sfSprite_getPosition:PROC
			      C 
			      C ; 函數原型 - 音樂相關
			      C EXTERN sfMusic_createFromFile:PROC
			      C EXTERN sfMusic_destroy:PROC
			      C EXTERN sfMusic_play:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C EXTERN sfMusic_stop: PROC
			      C EXTERN sfMusic_getStatus: PROC
			      C 
			      C ; 函數原型 - 文字相關
			      C EXTERN sfFont_createFromFile:PROC
			      C EXTERN sfFont_destroy:PROC
			      C EXTERN sfText_create:PROC
			      C EXTERN sfText_destroy:PROC
			      C EXTERN sfText_setFont:PROC
			      C EXTERN sfText_setString:PROC
			      C EXTERN sfText_setCharacterSize:PROC
			      C EXTERN sfText_setFillColor:PROC
			      C EXTERN sfText_setOutlineColor:PROC
			      C EXTERN sfText_setOutlineThickness:PROC
			      C EXTERN sfText_getLocalBounds:PROC
			      C EXTERN sfText_getGlobalBounds:PROC
			      C EXTERN sfText_setPosition:PROC
			      C 
			      C ; 函數原型 - 顏色相關
			      C EXTERN sfColor_fromRGB:PROC
			      C EXTERN sfColor_fromRGBA:PROC
			      C 
			      C ; 函數原型 - 圓形相關
			      C EXTERN sfCircleShape_create: PROC
			      C EXTERN sfCircleShape_setPosition: PROC
			      C EXTERN sfCircleShape_setRadius: PROC
			      C EXTERN sfCircleShape_setFillColor: PROC
			      C EXTERN sfRenderWindow_drawCircleShape: PROC
			      C EXTERN sfCircleShape_destroy: PROC
			      C EXTERN sfCircleShape_setOutlineThickness: PROC
			      C EXTERN sfCircleShape_setOutlineColor: PROC
			      C 
			      C ; 函數原型 - 矩形相關
			      C EXTERN sfRectangleShape_create: PROC
			      C EXTERN sfRectangleShape_setPosition: PROC
			      C EXTERN sfRectangleShape_setSize: PROC
			      C EXTERN sfRectangleShape_setFillColor: PROC
			      C EXTERN sfRectangleShape_setOutlineThickness: PROC
			      C EXTERN sfRenderWindow_drawRectangleShape: PROC
			      C EXTERN sfRectangleShape_destroy: PROC
			      C EXTERN sfRectangleShape_setOutlineColor: PROC
			      C 
			      C EXTERN sfSleep: PROC
			      C EXTERN sfClock_create: PROC
			      C EXTERN sfClock_getElapsedTime: PROC
			      C EXTERN sfClock_restart: PROC
			      C 
				include file.inc
			      C includelib ucrt.lib
			      C includelib kernel32.lib
			      C 
			      C 
 0000000C		      C Drum struct
 00000000  00000000	      C 	sprite dword ?
 00000004  00000000	      C 	_type dword ?
 00000008  00000000	      C 	targetTime real4 ?
			      C Drum ends
			      C 
 00000018		      C GameStats struct
 00000000  00000000	      C 	great_count dword ?
 00000004  00000000	      C 	good_count dword ?
 00000008  00000000	      C 	miss_count dword ?
 0000000C  00000000	      C 	current_combo dword ?
 00000010  00000000	      C 	max_combo dword ?
 00000014  00000000	      C 	total_score dword ?
			      C GameStats ends
			      C 
 00000014		      C MusicInfo struct
 00000000  00000000	      C 	bpm real4 ?
 00000004  00000000	      C 	_offset real4 ?
 00000008  00000000	      C 	spawnTime real4 ?
 0000000C  00000000	      C 	currentBar dword ?
 00000010  00000000	      C 	notesInBar dword ?
			      C MusicInfo ends
			      C 
			      C extern malloc:proc
			      C extern fopen:proc
			      C extern fclose:proc
			      C extern fgets:proc
			      C 
			      C 
			      C ; string
			      C 
			      C extern strcspn:proc
			      C extern strncmp:proc
			      C ;extern __imp____stdio_common_vsscanf:proc
			      C extern strtok_s:proc
			      C extern strlen:proc
			      C 
				includelib kernel32.lib

				extern GetStdHandle@4: PROC
				extern WriteConsoleA@20:PROC
 =-0000000B			STD_OUTPUT_HANDLE EQU -11

				extern end_game_page: PROC
				extern currentPage: DWORD

				; Constants
 = 00002710			MAX_NOTES = 10000
 = 000003E8			MAX_LINE_LENGTH = 1000
 = 00000500			SCREEN_WIDTH = 1280
 = 000002D0			SCREEN_HEIGHT = 720
 = 00000064			MAX_DRUMS = 100
 = 000001C2			HIT_POSITION_X = 450
 = 00000004			GREAT_THRESHOLD = 4
 = 0000001E			GOOD_THRESHOLD = 30
 = 00000003			INITIAL_DELAY = 3

 00000000			.data
 00000000 00000000			consoleHandle dd ?
 00000004 00000000			event sfEvent <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000

 00000034 61 73 73 65 74		chart db "assets/game/yoasobi.txt", 0
	   73 2F 67 61 6D
	   65 2F 79 6F 61
	   73 6F 62 69 2E
	   74 78 74 00
 0000004C 61 73 73 65 74		bgPath db "assets/game/bg_genre_2.png", 0
	   73 2F 67 61 6D
	   65 2F 62 67 5F
	   67 65 6E 72 65
	   5F 32 2E 70 6E
	   67 00
 00000067 61 73 73 65 74		redNotePath db "assets/game/red_note.png", 0
	   73 2F 67 61 6D
	   65 2F 72 65 64
	   5F 6E 6F 74 65
	   2E 70 6E 67 00
 00000080 61 73 73 65 74		blueNotePath db "assets/game/blue_note.png", 0
	   73 2F 67 61 6D
	   65 2F 62 6C 75
	   65 5F 6E 6F 74
	   65 2E 70 6E 67
	   00

 0000009A 00000000			stats GameStats <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 000000B2 43020000			msInfo MusicInfo <130.000000, -1.962000, 115.384613>
	   BFFB22D1
	   42E6C4EC
	   00000000
	   00000000

					; queue for drums
 000000C6				drumQueue dword MAX_DRUMS dup(?) ; 存放Drum結構指針
 00000256 00000000			front dword 0
 0000025A 00000000			rear dword 0
 0000025E 00000000			_size dword 0

					; texture
 00000262 00000000			redDrumTexture dword ?
 00000266 00000000			blueDrumTexture dword ?

 0000026A 61 73 73 65 74		font_path db "assets/fonts/arial.ttf", 0
	   73 2F 66 6F 6E
	   74 73 2F 61 72
	   69 61 6C 2E 74
	   74 66 00
 00000281 00000000			font dd 0

					; text
 00000285 00000000			countDownText dword ?

					; background
 00000289 00000000			bgTexture dword ?
 0000028D 00000000			bgSprite dword ?

					; judgement circle
 00000291 00000000			judgementCircle dword ?
					
					; music
 00000295 00000000			music dword ?

					; clock
 00000299 00000000			spawnClock dword 0

 0000029D 00000000			currentTime real4 0.0

 000002A1 00000000			currentNoteIndex dd 0
 000002A5 40400000			gameStartTime real4 3.0
 000002A9 00000000			gameStarted dword 0

					; note chart
 000002AD 00000001			notes dword 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
 00000309 00000017			totalNotes dword 23
 0000030D 00000000			noteSpawnInterval real4 0.0
 00000311 00000000			noteTimings real4 0.000000, 0.923077, 1.846154, 2.769229, 3.653842, 7.384611, 8.307688, 9.230764, 10.153841, 11.076918, 12.884617, 14.769233, 15.692309, 16.615387, 17.538464, 18.461540, 19.384617, 20.307693, 22.153847, 23.076923, 24.000000, 24.923077, 25.846153
	   3F6C4EC6
	   3FEC4EC6
	   40313B0C
	   4069D88C
	   40EC4EBC
	   4104EC4A
	   4113B136
	   41227622
	   41313B0E
	   414E2764
	   416C4EC7
	   417B13B3
	   4184EC50
	   418C4EC6
	   4193B13C
	   419B13B2
	   41A27628
	   41B13B14
	   41B89D8A
	   41C00000
	   41C76276
	   41CEC4EC
 0000036D 40EFC71D			drumStep real4 7.493056

					; color
 00000371 00 00 00 FF			blackColor sfColor <0, 0, 0, 255>
 00000375 00 00 00 32			transparentColor sfColor <0, 0, 0, 50>

					; file
 00000379 72 00				readA byte "r", 0

					; 字串常量
 0000037B 42 50 4D 3A 00		str_bpm db "BPM:", 0
 00000380 4F 46 46 53 45		str_offset db "OFFSET:", 0
	   54 3A 00
 00000388 23 53 54 41 52		str_start db "#START", 0
	   54 00
 0000038F 23 45 4E 44 00		str_end db "#END", 0
 00000394 2C 00				comma db ",", 0
 00000396 5C 6E 00			breakline db "\n", 0
					;format db "%", 0

 00000399 42 50 4D 3A 25		getBpm db "BPM:%f", 0
	   66 00
 000003A0 4F 46 46 53 45		getOffset db "OFFSET:%f", 0
	   54 3A 25 66 00

 000003AA 42700000			real_60 real4 60.0
 000003AE 40800000			real_4 real4 4.0
 000003B2 476A6000			real_60000 real4 60000.0
 000003B6				decimal_mult  dq 0.1                  ; 小數位數乘數
	   3FB999999999999A
 000003BE			    ten           dq 10.0                 ; 用於乘法運算
	   4024000000000000
 000003C6 40000000			real_2 real4 2.0
 000003CA 41F00000		    real_30 real4 30.0
 000003CE 42000000			real_32 real4 32.0
 000003D2 43480000		    real_200 real4 200.0
 000003D6 43610000		    real_225 real4 225.0
 000003DA 43E10000		    real_450 real4 450.0
 000003DE 44340000			real_720 real4 720.0
 000003E2 44A00000			real_1280 real4 1280.0
 000003E6 49742400			real_1000000 real4 1000000.0
 000003EA 41F00000		    real_good_threshold real4 30.0
 000003EE 40800000		    real_great_threshold real4 4.0
 000003F2 43B68000		    real_365 real4 365.0
 000003F6 00000000		    real_0 real4 0.0
 000003FA 00000000		    loop_index dword 0
 00000000			.code

 00000000			readNoteChart PROC


 00000000			readNoteChart ENDP

 00000000			isQueueFull PROC
 00000000  A1 0000025E R	    mov eax, _size
 00000005  83 F8 64		    cmp eax, MAX_DRUMS
 00000008  0F 94 C0		    sete al                ; 如果滿了，設置返回值為1
 0000000B  C3			    ret
 0000000C			isQueueFull ENDP

 0000000C			isQueueEmpty PROC
 0000000C  A1 0000025E R	    mov eax, _size
 00000011  85 C0		    test eax, eax
 00000013  0F 94 C0		    sete al                ; 如果空，設置返回值為1
 00000016  C3			    ret
 00000017			isQueueEmpty ENDP

 00000017			enqueue PROC USES edi esi ebx @drum:DWORD 
				    ; 檢查是否滿了
 0000001D  E8 FFFFFFDE		    call isQueueFull
 00000022  84 C0		    test al, al
 00000024  75 2F		    jnz @end_enqueue

				    ; 加入隊列
 00000026  8B 75 08		    mov esi, @drum          ; drum參數
 00000029  8B 3D 0000025A R	    mov edi, rear          ; rear索引
 0000002F  89 34 BD		    mov drumQueue[edi*4], esi ; 將drum加入隊列
	   000000C6 R

				    ; 更新rear和size
 00000036  FF 05 0000025A R	    inc rear
 0000003C  83 3D 0000025A R	    cmp rear, MAX_DRUMS
	   64
 00000043  72 0A		    jb SkipRearWrap
 00000045  C7 05 0000025A R	    mov rear, 0
	   00000000
 0000004F				SkipRearWrap:
 0000004F  FF 05 0000025E R			inc _size
 00000055				@end_enqueue:
						ret
 0000005A			enqueue ENDP

 0000005A			dequeue PROC
				    ; 檢查是否空了
 0000005A  E8 FFFFFFAD		    call isQueueEmpty
 0000005F  84 C0		    test al, al
 00000061  75 36		    jnz QueueEmpty

				    ; 刪除隊列頭
 00000063  8B 3D 00000256 R	    mov edi, front          ; front索引
 00000069  8B 34 BD		    mov esi, drumQueue[edi*4] ; 獲取隊列頭的drum指針
	   000000C6 R
 00000070  56			    push esi
 00000071  E8 00000000 E	    call sfSprite_destroy   ; 釋放sprite
 00000076  83 C4 04		    add esp, 4

				    ; 更新front和size
 00000079  FF 05 00000256 R	    inc front
 0000007F  83 3D 00000256 R	    cmp front, MAX_DRUMS
	   64
 00000086  72 0A		    jb SkipFrontWrap
 00000088  C7 05 00000256 R	    mov front, 0
	   00000000
 00000092			SkipFrontWrap:
 00000092  FF 0D 0000025E R	    dec _size
 00000098  C3			    ret

 00000099			QueueEmpty:
 00000099  C3			    ret
 0000009A			dequeue ENDP

 0000009A			spawnDrum PROC USES esi edi _type:DWORD, targetTime:REAL4
				    ; 檢查是否滿了
 0000009F  E8 FFFFFF5C		    call isQueueFull
 000000A4  84 C0		    test al, al
 000000A6  0F 85 00000089	    jnz QueueFullSpawn

				    ; 創建新的Drum結構
 000000AC  6A 0C		    push 12                ; 分配空間
 000000AE  E8 00000000 E	    call malloc
 000000B3  83 C4 04		    add esp, 4
 000000B6  8B F0		    mov esi, eax           ; 保存新結構指針

				    ; 初始化Drum結構
 000000B8  6A 00			push 0
 000000BA  E8 00000000 E	    call sfSprite_create
 000000BF  83 C4 04		    add esp, 4
 000000C2  89 06		    mov [esi], eax       ; sprite指針

 000000C4  8B 45 08			mov eax, _type
 000000C7  89 46 04		    mov dword ptr [esi+4], eax
 000000CA  F3/ 0F 10 45		    movss xmm0, targetTime
	   0C
 000000CF  F3/ 0F 11 46		    movss dword ptr [esi+8], xmm0
	   08
				    

				    ; 設置音符的紋理
 000000D4  83 7D 08 01		    cmp _type, 1
 000000D8  75 14		    jne SetBlueTexture
 000000DA  6A 01		    push sfTrue
 000000DC  FF 35 00000262 R	    push dword ptr redDrumTexture
 000000E2  FF 36		    push [esi]
 000000E4  E8 00000000 E	    call sfSprite_setTexture
 000000E9  83 C4 0C		    add esp, 12
 000000EC  EB 12		    jmp DoneTexture
 000000EE			SetBlueTexture:
 000000EE  6A 01		    push sfTrue
 000000F0  FF 35 00000266 R	    push dword ptr blueDrumTexture
 000000F6  FF 36		    push [esi]
 000000F8  E8 00000000 E	    call sfSprite_setTexture
 000000FD  83 C4 0C		    add esp, 12
 00000100			DoneTexture:

				    ; 設置初始位置

 00000100  83 EC 08		    sub esp, 8
 00000103  F3/ 0F 10 05		    movss xmm0, real_1280
	   000003E2 R
 0000010B  F3/ 0F 11 04 24	    movss dword ptr [esp], xmm0
 00000110  F3/ 0F 10 05		    movss xmm0, real_200
	   000003D2 R
 00000118  F3/ 0F 11 44 24	    movss dword ptr [esp+4], xmm0
	   04
 0000011E  FF 36		    push [esi]
 00000120  E8 00000000 E	    call sfSprite_setPosition
 00000125  83 C4 0C		    add esp, 12

				    ; 將Drum加入隊列
 00000128  56			    push esi
 00000129  E8 FFFFFEE9		    call enqueue
 0000012E  83 C4 04		    add esp, 4
				    ret

 00000135			QueueFullSpawn:
				    ret
 00000139			spawnDrum ENDP

 00000139			updateDrums PROC USES esi edi ebx
				    local i:DWORD
				    ; 檢查並移除過時的音符
 00000142  A1 0000025E R	    mov eax, _size
 00000147  85 C0		    test eax, eax
 00000149  0F 84 000000A7	    jz SkipUpdate

 0000014F  8B 3D 00000256 R	    mov edi, front
 00000155  8B 34 BD		    mov esi, drumQueue[edi*4]
	   000000C6 R
 0000015C  FF 36		    push [esi]            ; drum.sprite
 0000015E  E8 00000000 E	    call sfSprite_getPosition
 00000163  83 C4 04		    add esp, 4
 00000166  F3/ 0F 5C 05		    subss xmm0, real_365
	   000003F2 R
 0000016E  0F 2F 05		    comiss xmm0, real_0
	   000003F6 R
 00000175  7D 29		    jnl SkipFrontRemoval

				    ; 移除過時音符
 00000177  FF 36		    push [esi]
 00000179  E8 00000000 E	    call sfSprite_destroy
 0000017E  83 C4 04		    add esp, 4
 00000181  FF 05 00000256 R	    inc front
 00000187  83 3D 00000256 R	    cmp front, MAX_DRUMS
	   64
 0000018E  72 0A		    jb SkipFrontWrap2
 00000190  C7 05 00000256 R	    mov front, 0
	   00000000
 0000019A			SkipFrontWrap2:
 0000019A  FF 0D 0000025E R	    dec _size
 000001A0			SkipFrontRemoval:

				    ; 更新音符位置
 000001A0  A1 0000025E R	    mov eax, _size
 000001A5  89 45 FC		    mov i, eax
 000001A8  8B 3D 00000256 R	    mov edi, front
 000001AE			UpdateLoop:
 000001AE  8B 45 FC		    mov eax, i
 000001B1  83 F8 00		    cmp eax, 0
 000001B4  74 40		    jz EndUpdateLoop

 000001B6  8B 34 BD		    mov esi, drumQueue[edi*4]
	   000000C6 R
 000001BD  FF 36		    push dword ptr [esi]
 000001BF  E8 00000000 E	    call sfSprite_getPosition
 000001C4  83 C4 04		    add esp, 4


 000001C7  F3/ 0F 5C 05		    subss xmm0, drumStep
	   0000036D R
				    
 000001CF  52			    push edx
 000001D0  83 EC 04		    sub esp, 4
 000001D3  F3/ 0F 11 04 24	    movss dword ptr [esp], xmm0
 000001D8  FF 36		    push [esi]
 000001DA  E8 00000000 E	    call sfSprite_setPosition
 000001DF  83 C4 08		    add esp, 8

 000001E2  47			    inc edi
 000001E3  83 FF 64		    cmp edi, MAX_DRUMS
 000001E6  72 05		    jb NoWrap
 000001E8  BF 00000000		    mov edi, 0
 000001ED			NoWrap:
 000001ED  8B 45 FC		    mov eax, i
 000001F0  48			    dec eax
 000001F1  89 45 FC		    mov i, eax
 000001F4  EB B8		    jmp UpdateLoop
 000001F6			EndUpdateLoop:
 000001F6			SkipUpdate:
				    ret
 000001FB			updateDrums ENDP

 000001FB			createJudgementCircle PROC USES esi edi
				    ; 創建圓形形狀
 000001FD  6A 00		    push 0
 000001FF  E8 00000000 E	    call sfCircleShape_create
 00000204  83 C4 04		    add esp, 4
 00000207  A3 00000291 R	    mov judgementCircle, eax

				    ; 設置圓形半徑
 0000020C  FF 35 000003CA R	    push real_30
 00000212  FF 35 00000291 R	    push dword ptr [judgementCircle]
 00000218  E8 00000000 E	    call sfCircleShape_setRadius
 0000021D  83 C4 08		    add esp, 8

				    ; 設置圓形位置
 00000220  FF 35 000003D6 R	    push real_225               ; HIT_POSITION_X, 200+25
 00000226  FF 35 000003DA R	    push real_450
 0000022C  FF 35 00000291 R	    push dword ptr [judgementCircle]
 00000232  E8 00000000 E	    call sfCircleShape_setPosition
 00000237  83 C4 0C		    add esp, 12

				    ; 設置填充顏色
 0000023A  FF 35 00000375 R	    push transparentColor
 00000240  FF 35 00000291 R	    push dword ptr [judgementCircle]
 00000246  E8 00000000 E	    call sfCircleShape_setFillColor
 0000024B  83 C4 08		    add esp, 8

				    ; 設置邊框厚度
 0000024E  FF 35 000003C6 R	    push real_2
 00000254  FF 35 00000291 R	    push dword ptr [judgementCircle]
 0000025A  E8 00000000 E	    call sfCircleShape_setOutlineThickness
 0000025F  83 C4 08		    add esp, 8

				    ; 設置邊框顏色
 00000262  FF 35 00000371 R	    push blackColor
 00000268  FF 35 00000291 R	    push dword ptr [judgementCircle]
 0000026E  E8 00000000 E	    call sfCircleShape_setOutlineColor
 00000273  83 C4 08		    add esp, 8

				    ret
 00000279			createJudgementCircle ENDP

 00000279			@ld_background PROC
				    ; 創建背景紋理
 00000279  6A 00		    push 0
 0000027B  68 0000004C R	    push offset bgPath
 00000280  E8 00000000 E	    call sfTexture_createFromFile
 00000285  83 C4 08		    add esp, 8
 00000288  A3 00000289 R	    mov bgTexture, eax
				    
				    ; 創建背景精靈
 0000028D  E8 00000000 E	    call sfSprite_create
 00000292  A3 0000028D R	    mov DWORD PTR [bgSprite], eax
				    
				    ; 設定紋理
 00000297  6A 01		    push 1
 00000299  A1 00000289 R	    mov eax, DWORD PTR [bgTexture]
 0000029E  50			    push eax
 0000029F  8B 0D 0000028D R	    mov ecx, DWORD PTR [bgSprite]
 000002A5  51			    push ecx
 000002A6  E8 00000000 E	    call sfSprite_setTexture
 000002AB  83 C4 0C		    add esp, 12
 000002AE  C3			    ret
 000002AF			@ld_background ENDP

 000002AF			@countDown_text proc
 000002AF  6A 00			push 0
 000002B1  68 0000026A R		push offset font_path
 000002B6  E8 00000000 E		call sfFont_createFromFile
 000002BB  83 C4 08			add esp, 8
 000002BE  A3 00000281 R		mov font, eax

 000002C3  E8 00000000 E		call sfText_create
 000002C8  A3 00000285 R		mov countDownText, eax

 000002CD  FF 35 00000281 R		push font
 000002D3  FF 35 00000285 R		push dword ptr [countDownText]
 000002D9  E8 00000000 E		call sfText_setFont
 000002DE  83 C4 08			add esp, 8

 000002E1  6A 48			push 72
 000002E3  FF 35 00000285 R		push dword ptr [countDownText]
 000002E9  E8 00000000 E		call sfText_setCharacterSize
 000002EE  83 C4 08			add esp, 8

 000002F1  F3/ 0F 10 05			movss xmm0, [real_720]
	   000003DE R
 000002F9  F3/ 0F 5E 05			divss xmm0, [real_2]
	   000003C6 R
 00000301  F3/ 0F 5C 05			subss xmm0, [real_32]
	   000003CE R
 00000309  F3/ 0F 11 44 24		movss dword ptr [esp-4], xmm0
	   FC

 0000030F  F3/ 0F 10 05			movss xmm0, [real_1280]
	   000003E2 R
 00000317  F3/ 0F 5E 05			divss xmm0, [real_2]
	   000003C6 R
 0000031F  F3/ 0F 5C 05			subss xmm0, [real_32]
	   000003CE R
 00000327  F3/ 0F 11 44 24		movss dword ptr [esp-8], xmm0
	   F8

 0000032D  8B F4			mov esi, esp
 0000032F  FF 76 FC			push dword ptr [esi-4]
 00000332  FF 76 F8			push dword ptr [esi-8]
 00000335  FF 35 00000285 R		push dword ptr [countDownText]
 0000033B  E8 00000000 E		call sfText_setPosition
 00000340  83 C4 0C			add esp, 12

 00000343  C3				ret
 00000344			@countDown_text ENDP

 00000344			processHit proc
 00000344  55			    push ebp
 00000345  8B EC		    mov ebp, esp
 00000347  83 EC 20		    sub esp, 32                          ; Local stack space
				    
				    ; Save registers
 0000034A  53			    push ebx
 0000034B  56			    push esi
 0000034C  57			    push edi
				    
				    ; Get parameters (cdecl)
 0000034D  8B 5D 08		    mov ebx, [ebp + 8]                   ; hitType in ebx
				    
				    ; Check if size == 0
 00000350  A1 0000025E R	    mov eax, dword ptr [_size]
 00000355  85 C0		    test eax, eax
 00000357  0F 84 000000D1	    jz done_processing
				    
				    ; Get drum position
 0000035D  A1 00000256 R	    mov eax, dword ptr [front]           ; Load front index
 00000362  B9 00000018		    mov ecx, 24                          ; sizeof(DrumNote)
 00000367  F7 E1		    mul ecx                              ; eax = front * 24
 00000369  03 05 000000C6 R	    add eax, dword ptr [drumQueue]       ; Base address of current drum
 0000036F  50			    push eax                             ; Push sprite pointer
 00000370  E8 00000000 E	    call sfSprite_getPosition            ; Call function (cdecl)
 00000375  83 C4 04		    add esp, 4                           ; Clean stack
				    
				    ; Calculate distance
 00000378  8B 0D 000003DA R	    mov ecx, dword ptr [real_450]        ; HIT_POSITION_X
 0000037E  83 E9 2E		    sub ecx, 46                          ; HIT_POSITION_X - 46
 00000381  D9 00		    fld dword ptr [eax]                  ; Load x position
 00000383  D8 21		    fsub dword ptr [ecx]                 ; Calculate distance
 00000385  D9 5D FC		    fstp dword ptr [ebp-4]              ; Store distance
				    
				    ; Check distance thresholds
 00000388  D9 45 FC		    fld dword ptr [ebp-4]               ; Load distance
 0000038B  D9 E1		    fabs                                ; Get absolute value
 0000038D  D9 05 000003EA R	    fld dword ptr [real_good_threshold]      ; Load GOOD_THRESHOLD
 00000393  DE D9		    fcompp                              ; Compare and pop both
 00000395  9B DF E0		    fstsw ax                           ; Store FPU status
 00000398  9E			    sahf                               ; Transfer to CPU flags
 00000399  0F 87 0000008F	    ja done_processing                 ; If abs(distance) > GOOD_THRESHOLD
				    
				    ; Check note type match
 0000039F  A1 00000256 R	    mov eax, dword ptr [front]
 000003A4  B9 00000018		    mov ecx, 24
 000003A9  F7 E1		    mul ecx
 000003AB  03 05 000000C6 R	    add eax, dword ptr [drumQueue]
 000003B1  8B 50 04		    mov edx, dword ptr [eax+4]           ; Load drum type
 000003B4  3B D3		    cmp edx, ebx                       ; Compare with hitType
 000003B6  75 5F		    jne miss_hit
				    
				    ; Check for GREAT hit
 000003B8  D9 45 FC		    fld dword ptr [ebp-4]              ; Reload distance
 000003BB  D9 E1		    fabs
 000003BD  D9 05 000003EE R	    fld dword ptr [real_great_threshold]
 000003C3  DE D9		    fcompp
 000003C5  9B DF E0		    fstsw ax
 000003C8  9E			    sahf
 000003C9  77 27		    ja good_hit
				    
 000003CB			great_hit:
 000003CB  8B 35 0000009A R	    mov esi, dword ptr [stats]         ; Get stats pointer
 000003D1  FF 06		    inc dword ptr [esi + GameStats.great_count]      ; Increment great_count
 000003D3  FF 46 0C		    inc dword ptr [esi + GameStats.current_combo]    ; Increment current_combo
				    
				    ; Calculate score
 000003D6  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 000003D9  6B D2 0A		    imul edx, 10                       ; combo * 10
 000003DC  81 C2 0000012C	    add edx, 300                       ; Add base score
 000003E2  01 56 14		    add dword ptr [esi + GameStats.total_score], edx  ; Add to total_score
				    
				    ; Update max combo
 000003E5  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 000003E8  3B 56 10		    cmp edx, dword ptr [esi + GameStats.max_combo]      ; Compare with max_combo
 000003EB  7E 3C		    jle do_dequeue
 000003ED  89 56 10		    mov dword ptr [esi + GameStats.max_combo], edx      ; Update max_combo
 000003F0  EB 37		    jmp do_dequeue
				    
 000003F2			good_hit:
 000003F2  8B 35 0000009A R	    mov esi, dword ptr [stats]         ; Get stats pointer
 000003F8  FF 46 04		    inc dword ptr [esi + GameStats.good_count]       ; Increment good_count
 000003FB  FF 46 0C		    inc dword ptr [esi + GameStats.current_combo]    ; Increment current_combo
				    
				    ; Calculate score
 000003FE  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 00000401  6B D2 05		    imul edx, 5                        ; combo * 5
 00000404  83 C2 64		    add edx, 100                       ; Add base score
 00000407  01 56 14		    add dword ptr [esi + GameStats.total_score], edx  ; Add to total_score
				    
				    ; Update max combo
 0000040A  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 0000040D  3B 56 10		    cmp edx, dword ptr [esi + GameStats.max_combo]      ; Compare with max_combo
 00000410  7E 17		    jle do_dequeue
 00000412  89 56 10		    mov dword ptr [esi + GameStats.max_combo], edx      ; Update max_combo
 00000415  EB 12		    jmp do_dequeue
				    
 00000417			miss_hit:
 00000417  8B 35 0000009A R	    mov esi, dword ptr [stats]         ; Get stats pointer
 0000041D  FF 46 08		    inc dword ptr [esi + GameStats.miss_count]       ; Increment miss_count
 00000420  C7 46 0C		    mov dword ptr [esi + GameStats.current_combo], 0  ; Reset current_combo
	   00000000
 00000427  EB 05		    jmp done_processing
				    
 00000429			do_dequeue:
 00000429  E8 FFFFFC2C		    call dequeue                       ; Remove the hit note (cdecl)
				    
 0000042E			done_processing:
				    ; Restore registers
 0000042E  5F			    pop edi
 0000042F  5E			    pop esi
 00000430  5B			    pop ebx
				    
 00000431  8B E5		    mov esp, ebp
 00000433  5D			    pop ebp
 00000434  C3			    ret

 00000435			processHit endp

 00000435			main_game_page PROC window:dword,musicPath:dword,noteChart:dword
					
 00000438  C7 45 10			mov dword ptr [noteChart], offset chart
	   00000034 R
 0000043F  FF 75 10			push dword ptr [noteChart]
 00000442  E8 FFFFFBB9			call readNoteChart
 00000447  83 C4 04			add esp, 4

					; load background
 0000044A  E8 FFFFFE2A			call @ld_background

					; load red note texture
 0000044F  6A 00			push 0
 00000451  68 00000067 R		push offset redNotePath
 00000456  E8 00000000 E		call sfTexture_createFromFile
 0000045B  83 C4 08			add esp, 8
 0000045E  A3 00000262 R		mov redDrumTexture, eax

					; load blue note texture
 00000463  6A 00			push 0
 00000465  68 00000080 R		push offset blueNotePath
 0000046A  E8 00000000 E		call sfTexture_createFromFile
 0000046F  83 C4 08			add esp, 8
 00000472  A3 00000266 R		mov blueDrumTexture, eax

					; create judgement circle
 00000477  E8 FFFFFD7F			call createJudgementCircle

					; create music
 0000047C  6A 00			push 0
 0000047E  FF 75 0C			push dword ptr [musicPath]
 00000481  E8 00000000 E		call sfMusic_createFromFile
 00000486  83 C4 08			add esp, 8
 00000489  A3 00000295 R		mov music, eax

 0000048E  6A 00			push 0
 00000490  FF 35 00000295 R		push music
 00000496  E8 00000000 E		call sfMusic_setLoop
 0000049B  83 C4 08			add esp, 8

 0000049E  E8 00000000 E		call sfClock_create
 000004A3  A3 00000299 R		mov spawnClock, eax

 000004A8			@main_loop:
 000004A8  8B 45 08			mov eax, DWORD PTR [window]
 000004AB  50			    push eax
 000004AC  E8 00000000 E	    call sfRenderWindow_isOpen
 000004B1  83 C4 04		    add esp, 4
 000004B4  85 C0		    test eax, eax
 000004B6  0F 84 000002DE	    je exit_program

 000004BC  FF 35 00000299 R	    push spawnClock  ; 呼叫sfClock_getElapsedTime並獲取microseconds
 000004C2  E8 00000000 E	    call sfClock_getElapsedTime
 000004C7  F3/ 0F 2A C8		    cvtsi2ss xmm1, eax

 000004CB  F3/ 0F 10 05		    movss xmm0, [real_1000000]
	   000003E6 R
 000004D3  F3/ 0F 5E C8		    divss xmm1, xmm0

				    ; 除以1000000.0以轉換為秒
 000004D7  F3/ 0F 11 0D		    movss dword ptr [currentTime], xmm1
	   0000029D R

 000004DF  A1 000002A9 R		mov eax, gameStarted
 000004E4  83 F8 00			cmp eax, 0
 000004E7  75 59			jne deter_offset

					; check game start
 000004E9  FF 35 00000295 R		push music 
 000004EF  E8 00000000 E		call sfMusic_getStatus
 000004F4  83 C4 04			add esp, 4
 000004F7  83 F8 02			cmp eax, sfPlaying
 000004FA  74 29			je skip_music_play

					; 比較 currentTime >= msInfo_offset
 000004FC  F3/ 0F 10 05		    movss xmm0, [msInfo._offset]     ; 加載 musicInfo.offset
	   000000B6 R
 00000504  0F 2E C8		    ucomiss xmm1, xmm0               ; 比較 currentTime 和 musicInfo.offset
 00000507  72 1C		    jb skip_music_play               ; 如果 currentTime < musicInfo.offset 跳過

				    ; 比較 msInfo_offset > 0
 00000509  D9 EE		    fldz                             ; st(0) = 0.0
 0000050B  D9 05 000000B6 R	    fld msInfo._offset               ; st(1) = 0.0, st(0) = musicInfo.offset
 00000511  DF F1		    fcomip st(0), st(1)              ; 比較 st(0) 與 0.0
 00000513  76 10		    jbe skip_music_play              ; 如果 musicInfo.offset < 0 跳過
 00000515  DD D8		    fstp st(0)                       ; 清除浮點堆疊

				    ; 播放音樂
 00000517  FF 35 00000295 R	    push music
 0000051D  E8 00000000 E	    call sfMusic_play
 00000522  83 C4 04			add esp, 4
 00000525			skip_music_play:
				    ; 重置時鐘
 00000525  FF 35 00000299 R	    push spawnClock
 0000052B  E8 00000000 E	    call sfClock_restart

				    ; 設定 gameStartTime = 0.0f
 00000530  D9 EE		    fldz                             ; 加載 0.0
 00000532  D9 1D 000002A5 R	    fstp gameStartTime

				    ; 設定 gameStarted = 1
 00000538  C7 05 000002A9 R	    mov gameStarted, 1
	   00000001

 00000542			deter_offset:
 00000542  A1 000002A9 R		mov eax, gameStarted
 00000547  83 F8 01			cmp eax, 1
 0000054A  75 43			jne @event_loop

					; 比較 musicInfo.offset < 0
 0000054C  D9 EE		    fldz                             ; st(0) = 0.0
 0000054E  D9 05 000000B6 R	    fld msInfo._offset               ; st(1) = 0.0, st(0) = musicInfo.offset
 00000554  DF F1		    fcomip st(0), st(1)              ; 比較 musicInfo.offset 和 0.0
 00000556  73 37		    jae @event_loop                  ;如果 offset >= 0，跳過
 00000558  DD D8		    fstp st(0)                       ; 清除浮點堆疊

					; 呼叫 sfMusic_getStatus 並檢查是否為 sfPlaying
 0000055A  FF 35 00000295 R	    push music
 00000560  E8 00000000 E	    call sfMusic_getStatus
 00000565  83 C4 04			add esp, 4
 00000568  83 F8 02		    cmp eax, sfPlaying               ; 比較返回值與 sfPlaying
 0000056B  74 22		    je @event_loop                  ; 如果音樂正在播放，跳過

				    ; 計算 currentTime >= -musicInfo.offset
 0000056D  D9 05 000000B6 R	    fld msInfo._offset              ; st(0) = musicInfo.offset
 00000573  D9 E0		    fchs                             ; st(0) = -musicInfo.offset
 00000575  D9 05 0000029D R	    fld currentTime                  ; st(1) = currentTime, st(0) = -musicInfo.offset
 0000057B  DF F1		    fcomip st(0), st(1)              ; 比較 currentTime 和 -musicInfo.offset
 0000057D  72 10		    jb @event_loop                  ; 如果 currentTime < -musicInfo.offset，跳過
 0000057F  DD D8		    fstp st(0)                       ; 清除浮點堆疊

				    ; 播放音樂
 00000581  FF 35 00000295 R	    push music
 00000587  E8 00000000 E	    call sfMusic_play
 0000058C  83 C4 04			add esp, 4

 0000058F				@event_loop:
						; 事件處理
 0000058F  8D 35 00000004 R	        lea esi, event
 00000595  56			        push esi
 00000596  8B 45 08		        mov eax, DWORD PTR [window]
 00000599  50			        push eax
 0000059A  E8 00000000 E	        call sfRenderWindow_pollEvent
 0000059F  83 C4 08		        add esp, 8
 000005A2  85 C0		        test eax, eax
 000005A4  74 4B		        je @controll_drum
				    
				        ; 檢查關閉事件
 000005A6  83 3E 00		        cmp dword ptr [esi].sfEvent._type, sfEvtClosed
 000005A9  0F 84 00000182	        je @end

 000005AF  83 3E 05				cmp dword ptr [esi].sfEvent._type, sfEvtKeyPressed
 000005B2  74 00		        je check_gameStarted

 000005B4			check_gameStarted:
 000005B4  83 3D 000002A9 R	        cmp gameStarted, 1
	   01
 000005BB  74 02		        je @check_key_press

 000005BD  EB D0		        jmp @event_loop

 000005BF					@check_key_press:
 000005BF  83 7E 04 05					cmp dword ptr [esi+4], sfKeyF
 000005C3  74 14		            je @red_pressed

 000005C5  83 7E 04 09		            cmp dword ptr [esi+4], sfKeyJ
 000005C9  74 0E		            je @red_pressed

 000005CB  83 7E 04 03		            cmp dword ptr [esi+4], sfKeyD
 000005CF  74 14		            je @blue_pressed

 000005D1  83 7E 04 0A		            cmp dword ptr [esi+4], sfKeyK
 000005D5  74 0E		            je @blue_pressed     
				            
 000005D7  EB B6		            jmp @event_loop
 000005D9				@red_pressed:
 000005D9  6A 01				push 1
 000005DB  E8 FFFFFD64				call processHit
 000005E0  83 C4 04				add esp, 4
 000005E3  EB 0C				jmp @controll_drum
 000005E5				@blue_pressed:
 000005E5  6A 02				push 2
 000005E7  E8 FFFFFD58				call processHit
 000005EC  83 C4 04				add esp, 4
 000005EF  EB 00				jmp @controll_drum

 000005F1				@controll_drum:
 000005F1  A1 000002A9 R			mov eax, gameStarted
 000005F6  83 F8 00				cmp eax, 0
 000005F9  74 7F				je @render_window

 000005FB  FF 35 00000299 R	        push spawnClock  ; 呼叫sfClock_getElapsedTime並獲取microseconds
 00000601  E8 00000000 E	        call sfClock_getElapsedTime
 00000606  F3/ 0F 2A C8		        cvtsi2ss xmm1, eax

 0000060A  F3/ 0F 10 05		        movss xmm0, [real_1000000]
	   000003E6 R
 00000612  F3/ 0F 5E C8		        divss xmm1, xmm0

				        ; 除以1000000.0以轉換為秒
 00000616  F3/ 0F 11 0D		        movss dword ptr [currentTime], xmm1
	   0000029D R

 0000061E			spawn_loop:
				        ;比較currentNoteIndex < totalNotes
 0000061E  A1 000002A1 R	        mov eax, currentNoteIndex
 00000623  8B 1D 00000309 R	        mov ebx, totalNotes
 00000629  3B C3		        cmp eax, ebx
 0000062B  73 40		        jae skip_spawn

				        ; 比較 currentTime >= noteTimings[currentNoteIndex]
 0000062D  F3/ 0F 10 05		        movss xmm0, [currentTime]              ; 加載 currentTime
	   0000029D R
 00000635  8B 1D 000002A1 R	        mov ebx, currentNoteIndex               ; ebx = currentNoteIndex
 0000063B  C1 E3 02		        shl ebx, 2                              ; 計算索引的位移 (4字節對齊)
 0000063E  F3/ 0F 10 8B		        movss xmm1, noteTimings[ebx]            ; 加載 noteTimings[currentNoteIndex]
	   00000311 R
 00000646  0F 2E C1		        ucomiss xmm0, xmm1                      ; 比較 currentTime 與 noteTimings
 00000649  72 2A		        jb loop_end                             ; 如果 currentTime < noteTimings, 跳過迴圈

				        ; 檢查 notes[currentNoteIndex] != 0
 0000064B  A1 000002A1 R	        mov eax, currentNoteIndex               ; eax = currentNoteIndex
 00000650  8B 1C 85		        mov ebx, notes[eax*4]                   ; ebx = notes[currentNoteIndex]
	   000002AD R
 00000657  83 FB 00		        cmp ebx, 0                              ; 比較 notes[currentNoteIndex] == 0
 0000065A  74 11		        je skip_spawn                           ; 如果等於0，跳過 spawnDrum

				        ; 呼叫 spawnDrum(notes[currentNoteIndex], noteTimings[currentNoteIndex])

 0000065C  83 EC 04		        sub esp, 4
 0000065F  F3/ 0F 11 0C 24	        movss dword ptr [esp], xmm1               ; 將noteTimings[currentNoteIndex]壓入堆疊
 00000664  53			        push ebx                                ; 將notes[currentNoteIndex]壓入堆疊
 00000665  E8 FFFFFA30		        call spawnDrum
 0000066A  83 C4 08		        add esp, 8                              ; 清理堆疊

 0000066D			    skip_spawn:
				        ; 更新 currentNoteIndex++
 0000066D  FF 05 000002A1 R	        inc currentNoteIndex
 00000673  EB A9		        jmp spawn_loop                          ; 返回迴圈起點

 00000675			    loop_end:
				        ; 呼叫 updateDrums 函式
 00000675  E8 FFFFFABF		        call updateDrums

 0000067A				@render_window:
				        ; 清除視窗
 0000067A  FF 35 00000371 R	        push blackColor
 00000680  FF 75 08		        push window
 00000683  E8 00000000 E	        call sfRenderWindow_clear
 00000688  83 C4 08		        add esp, 8

				        ; 繪製背景
 0000068B  6A 00		        push 0
 0000068D  A1 0000028D R	        mov eax, DWORD PTR [bgSprite]
 00000692  50			        push eax
 00000693  8B 4D 08		        mov ecx, DWORD PTR [window]
 00000696  51			        push ecx
 00000697  E8 00000000 E	        call sfRenderWindow_drawSprite
 0000069C  83 C4 0C		        add esp, 12

				        ; 繪製音符
 0000069F  A1 0000025E R	        mov eax, _size
 000006A4  85 C0		        test eax, eax
 000006A6  74 44		        jz @deter_music_stop
 000006A8  A3 000003FA R	        mov loop_index, eax
 000006AD  8B 3D 00000256 R	        mov edi, front
 000006B3			    draw_notes:
 000006B3  A1 000003FA R	        mov eax, loop_index
 000006B8  83 F8 00		        cmp eax, 0
 000006BB  74 2F		        jz @deter_music_stop

 000006BD  6A 00		        push 0
 000006BF  8B 04 BD		        mov eax, [drumQueue + edi*4]
	   000000C6 R
 000006C6  FF 30				push dword ptr [eax]
 000006C8  8B 4D 08		        mov ecx, DWORD PTR [window]
 000006CB  51			        push ecx
 000006CC  E8 00000000 E	        call sfRenderWindow_drawSprite
 000006D1  83 C4 08		        add esp, 8

 000006D4  83 FF 64		        cmp edi, MAX_DRUMS
 000006D7  75 05		        jne @next_note
 000006D9  BF 00000000		        mov edi, 0

 000006DE			    @next_note:
 000006DE  47			        inc edi
 000006DF  A1 000003FA R	        mov eax, loop_index
 000006E4  48			        dec eax
 000006E5  A3 000003FA R	        mov loop_index, eax
 000006EA  EB C7		        jmp draw_notes
				        

 000006EC			    @deter_music_stop:
 000006EC  FF 35 00000295 R	        push music
 000006F2  E8 00000000 E	        call sfMusic_getStatus
 000006F7  83 C4 04		        add esp, 4
 000006FA  83 F8 00		        cmp eax, sfStopped
 000006FD  75 0F		        jne @display
 000006FF  A1 000002A1 R	        mov eax, currentNoteIndex
 00000704  3B 05 00000309 R	        cmp eax, totalNotes
 0000070A  75 02		        jne @display

 0000070C  EB 63		        jmp @end_game

 0000070E			    @display:
				        ; 繪製判定圓
 0000070E  6A 00		        push 0
 00000710  FF 35 00000291 R	        push dword ptr [judgementCircle]
 00000716  FF 75 08		        push DWORD PTR [window]
 00000719  E8 00000000 E	        call sfRenderWindow_drawCircleShape
 0000071E  83 C4 0C		        add esp, 12

 00000721  FF 75 08		        push window
 00000724  E8 00000000 E	        call sfRenderWindow_display
 00000729  83 C4 04		        add esp, 4

 0000072C  E9 FFFFFD77		        jmp @main_loop

 00000731			@end:

				    ; 釋放資源
 00000731  FF 35 00000295 R		push music
 00000737  E8 00000000 E		call sfMusic_destroy
 0000073C  83 C4 04			add esp, 4

 0000073F  6A 00			push 0
 00000741  E8 00000000 E		call sfTexture_destroy
 00000746  83 C4 04			add esp, 4

 00000749  6A 00			push 0
 0000074B  E8 00000000 E		call sfSprite_destroy
 00000750  83 C4 04			add esp, 4

 00000753  6A 00			push 0
 00000755  E8 00000000 E		call sfCircleShape_destroy
 0000075A  83 C4 04			add esp, 4

 0000075D  6A 00			push 0
 0000075F  E8 00000000 E		call sfFont_destroy
 00000764  83 C4 04			add esp, 4

 00000767  6A 00			push 0
 00000769  E8 00000000 E		call sfText_destroy
 0000076E  83 C4 04			add esp, 4

 00000771			@end_game:
 00000771  FF 35 000000AA R	    push stats.max_combo
 00000777  FF 35 000000AE R	    push stats.total_score
 0000077D  FF 35 000000A2 R	    push stats.miss_count
 00000783  FF 35 0000009E R	    push stats.good_count
 00000789  FF 35 0000009A R	    push stats.great_count
 0000078F  FF 75 08		    push window
 00000792  E8 00000000 E	    call end_game_page
 00000797  83 C4 18		    add esp, 24

 0000079A			exit_program:

					ret
 0000079C			main_game_page ENDP

				END main_game_page
Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/23/24 00:02:24
main_game_page.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Drum . . . . . . . . . . . . . .	 0000000C
  sprite . . . . . . . . . . . .	 00000000	 DWord
  _type  . . . . . . . . . . . .	 00000004	 DWord
  targetTime . . . . . . . . . .	 00000008	 DWord
GameStats  . . . . . . . . . . .	 00000018
  great_count  . . . . . . . . .	 00000000	 DWord
  good_count . . . . . . . . . .	 00000004	 DWord
  miss_count . . . . . . . . . .	 00000008	 DWord
  current_combo  . . . . . . . .	 0000000C	 DWord
  max_combo  . . . . . . . . . .	 00000010	 DWord
  total_score  . . . . . . . . .	 00000014	 DWord
MusicInfo  . . . . . . . . . . .	 00000014
  bpm  . . . . . . . . . . . . .	 00000000	 DWord
  _offset  . . . . . . . . . . .	 00000004	 DWord
  spawnTime  . . . . . . . . . .	 00000008	 DWord
  currentBar . . . . . . . . . .	 0000000C	 DWord
  notesInBar . . . . . . . . . .	 00000010	 DWord
key  . . . . . . . . . . . . . .	 00000014
  code . . . . . . . . . . . . .	 00000000	 DWord
  alt  . . . . . . . . . . . . .	 00000004	 DWord
  control  . . . . . . . . . . .	 00000008	 DWord
  shift  . . . . . . . . . . . .	 0000000C	 DWord
  system . . . . . . . . . . . .	 00000010	 DWord
mouseButton  . . . . . . . . . .	 0000000C
  button . . . . . . . . . . . .	 00000000	 DWord
  x  . . . . . . . . . . . . . .	 00000004	 DWord
  y  . . . . . . . . . . . . . .	 00000008	 DWord
sfColor  . . . . . . . . . . . .	 00000004
  r  . . . . . . . . . . . . . .	 00000000	 Byte
  g  . . . . . . . . . . . . . .	 00000001	 Byte
  b  . . . . . . . . . . . . . .	 00000002	 Byte
  a  . . . . . . . . . . . . . .	 00000003	 Byte
sfEvent  . . . . . . . . . . . .	 00000030
  _type  . . . . . . . . . . . .	 00000000	 DWord
  _size  . . . . . . . . . . . .	 00000004	 DWord
  mouse  . . . . . . . . . . . .	 00000008	 
  _key . . . . . . . . . . . . .	 00000014	 
  mouseMove  . . . . . . . . . .	 00000028	 QWord
sfFloatRect  . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  _width . . . . . . . . . . . .	 00000008	 DWord
  height . . . . . . . . . . . .	 0000000C	 DWord
sfVector2f . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVector2i . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVideoMode  . . . . . . . . . .	 0000000C
  _width . . . . . . . . . . . .	 00000000	 DWord
  height . . . . . . . . . . . .	 00000004	 DWord
  bpp  . . . . . . . . . . . . .	 00000008	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000003FE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000079C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@countDown_text  . . . . . . . .	P Near	 000002AF _TEXT	Length= 00000095 Public C
@ld_background . . . . . . . . .	P Near	 00000279 _TEXT	Length= 00000036 Public C
createJudgementCircle  . . . . .	P Near	 000001FB _TEXT	Length= 0000007E Public C
dequeue  . . . . . . . . . . . .	P Near	 0000005A _TEXT	Length= 00000040 Public C
  SkipFrontWrap  . . . . . . . .	L Near	 00000092 _TEXT	
  QueueEmpty . . . . . . . . . .	L Near	 00000099 _TEXT	
enqueue  . . . . . . . . . . . .	P Near	 00000017 _TEXT	Length= 00000043 Public C
  @drum  . . . . . . . . . . . .	DWord	 bp + 00000008
  SkipRearWrap . . . . . . . . .	L Near	 0000004F _TEXT	
  @end_enqueue . . . . . . . . .	L Near	 00000055 _TEXT	
isQueueEmpty . . . . . . . . . .	P Near	 0000000C _TEXT	Length= 0000000B Public C
isQueueFull  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000C Public C
main_game_page . . . . . . . . .	P Near	 00000435 _TEXT	Length= 00000367 Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
  musicPath  . . . . . . . . . .	DWord	 bp + 0000000C
  noteChart  . . . . . . . . . .	DWord	 bp + 00000010
  @main_loop . . . . . . . . . .	L Near	 000004A8 _TEXT	
  skip_music_play  . . . . . . .	L Near	 00000525 _TEXT	
  deter_offset . . . . . . . . .	L Near	 00000542 _TEXT	
  @event_loop  . . . . . . . . .	L Near	 0000058F _TEXT	
  check_gameStarted  . . . . . .	L Near	 000005B4 _TEXT	
  @check_key_press . . . . . . .	L Near	 000005BF _TEXT	
  @red_pressed . . . . . . . . .	L Near	 000005D9 _TEXT	
  @blue_pressed  . . . . . . . .	L Near	 000005E5 _TEXT	
  @controll_drum . . . . . . . .	L Near	 000005F1 _TEXT	
  spawn_loop . . . . . . . . . .	L Near	 0000061E _TEXT	
  skip_spawn . . . . . . . . . .	L Near	 0000066D _TEXT	
  loop_end . . . . . . . . . . .	L Near	 00000675 _TEXT	
  @render_window . . . . . . . .	L Near	 0000067A _TEXT	
  draw_notes . . . . . . . . . .	L Near	 000006B3 _TEXT	
  @next_note . . . . . . . . . .	L Near	 000006DE _TEXT	
  @deter_music_stop  . . . . . .	L Near	 000006EC _TEXT	
  @display . . . . . . . . . . .	L Near	 0000070E _TEXT	
  @end . . . . . . . . . . . . .	L Near	 00000731 _TEXT	
  @end_game  . . . . . . . . . .	L Near	 00000771 _TEXT	
  exit_program . . . . . . . . .	L Near	 0000079A _TEXT	
processHit . . . . . . . . . . .	P Near	 00000344 _TEXT	Length= 000000F1 Public C
  great_hit  . . . . . . . . . .	L Near	 000003CB _TEXT	
  good_hit . . . . . . . . . . .	L Near	 000003F2 _TEXT	
  miss_hit . . . . . . . . . . .	L Near	 00000417 _TEXT	
  do_dequeue . . . . . . . . . .	L Near	 00000429 _TEXT	
  done_processing  . . . . . . .	L Near	 0000042E _TEXT	
readNoteChart  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000000 Public C
spawnDrum  . . . . . . . . . . .	P Near	 0000009A _TEXT	Length= 0000009F Public C
  _type  . . . . . . . . . . . .	DWord	 bp + 00000008
  targetTime . . . . . . . . . .	DWord	 bp + 0000000C
  SetBlueTexture . . . . . . . .	L Near	 000000EE _TEXT	
  DoneTexture  . . . . . . . . .	L Near	 00000100 _TEXT	
  QueueFullSpawn . . . . . . . .	L Near	 00000135 _TEXT	
updateDrums  . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 000000C2 Public C
  i  . . . . . . . . . . . . . .	DWord	 bp - 00000004
  SkipFrontWrap2 . . . . . . . .	L Near	 0000019A _TEXT	
  SkipFrontRemoval . . . . . . .	L Near	 000001A0 _TEXT	
  UpdateLoop . . . . . . . . . .	L Near	 000001AE _TEXT	
  NoWrap . . . . . . . . . . . .	L Near	 000001ED _TEXT	
  EndUpdateLoop  . . . . . . . .	L Near	 000001F6 _TEXT	
  SkipUpdate . . . . . . . . . .	L Near	 000001F6 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
GOOD_THRESHOLD . . . . . . . . .	Number	 0000001Eh   
GREAT_THRESHOLD  . . . . . . . .	Number	 00000004h   
GetStdHandle@4 . . . . . . . . .	L Near	 00000000 FLAT	External C
HIT_POSITION_X . . . . . . . . .	Number	 000001C2h   
INITIAL_DELAY  . . . . . . . . .	Number	 00000003h   
MAX_DRUMS  . . . . . . . . . . .	Number	 00000064h   
MAX_LINE_LENGTH  . . . . . . . .	Number	 000003E8h   
MAX_NOTES  . . . . . . . . . . .	Number	 00002710h   
SCREEN_HEIGHT  . . . . . . . . .	Number	 000002D0h   
SCREEN_WIDTH . . . . . . . . . .	Number	 00000500h   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
WriteConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External C
_size  . . . . . . . . . . . . .	DWord	 0000025E _DATA	
bgPath . . . . . . . . . . . . .	Byte	 0000004C _DATA	
bgSprite . . . . . . . . . . . .	DWord	 0000028D _DATA	
bgTexture  . . . . . . . . . . .	DWord	 00000289 _DATA	
blackColor . . . . . . . . . . .	sfColor	 00000371 _DATA	
blueDrumTexture  . . . . . . . .	DWord	 00000266 _DATA	
blueNotePath . . . . . . . . . .	Byte	 00000080 _DATA	
breakline  . . . . . . . . . . .	Byte	 00000396 _DATA	
chart  . . . . . . . . . . . . .	Byte	 00000034 _DATA	
comma  . . . . . . . . . . . . .	Byte	 00000394 _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000000 _DATA	
countDownText  . . . . . . . . .	DWord	 00000285 _DATA	
currentNoteIndex . . . . . . . .	DWord	 000002A1 _DATA	
currentPage  . . . . . . . . . .	DWord	 00000000 FLAT	External C
currentTime  . . . . . . . . . .	DWord	 0000029D _DATA	
decimal_mult . . . . . . . . . .	QWord	 000003B6 _DATA	
drumQueue  . . . . . . . . . . .	DWord	 000000C6 _DATA	
drumStep . . . . . . . . . . . .	DWord	 0000036D _DATA	
end_game_page  . . . . . . . . .	L Near	 00000000 FLAT	External C
event  . . . . . . . . . . . . .	sfEvent	 00000004 _DATA	
fclose . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fgets  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
font_path  . . . . . . . . . . .	Byte	 0000026A _DATA	
font . . . . . . . . . . . . . .	DWord	 00000281 _DATA	
fopen  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
front  . . . . . . . . . . . . .	DWord	 00000256 _DATA	
gameStartTime  . . . . . . . . .	DWord	 000002A5 _DATA	
gameStarted  . . . . . . . . . .	DWord	 000002A9 _DATA	
getBpm . . . . . . . . . . . . .	Byte	 00000399 _DATA	
getOffset  . . . . . . . . . . .	Byte	 000003A0 _DATA	
judgementCircle  . . . . . . . .	DWord	 00000291 _DATA	
loop_index . . . . . . . . . . .	DWord	 000003FA _DATA	
malloc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
msInfo . . . . . . . . . . . . .	MusicInfo  000000B2 _DATA	
music  . . . . . . . . . . . . .	DWord	 00000295 _DATA	
noteSpawnInterval  . . . . . . .	DWord	 0000030D _DATA	
noteTimings  . . . . . . . . . .	DWord	 00000311 _DATA	
notes  . . . . . . . . . . . . .	DWord	 000002AD _DATA	
readA  . . . . . . . . . . . . .	Byte	 00000379 _DATA	
real_0 . . . . . . . . . . . . .	DWord	 000003F6 _DATA	
real_1000000 . . . . . . . . . .	DWord	 000003E6 _DATA	
real_1280  . . . . . . . . . . .	DWord	 000003E2 _DATA	
real_200 . . . . . . . . . . . .	DWord	 000003D2 _DATA	
real_225 . . . . . . . . . . . .	DWord	 000003D6 _DATA	
real_2 . . . . . . . . . . . . .	DWord	 000003C6 _DATA	
real_30  . . . . . . . . . . . .	DWord	 000003CA _DATA	
real_32  . . . . . . . . . . . .	DWord	 000003CE _DATA	
real_365 . . . . . . . . . . . .	DWord	 000003F2 _DATA	
real_450 . . . . . . . . . . . .	DWord	 000003DA _DATA	
real_4 . . . . . . . . . . . . .	DWord	 000003AE _DATA	
real_60000 . . . . . . . . . . .	DWord	 000003B2 _DATA	
real_60  . . . . . . . . . . . .	DWord	 000003AA _DATA	
real_720 . . . . . . . . . . . .	DWord	 000003DE _DATA	
real_good_threshold  . . . . . .	DWord	 000003EA _DATA	
real_great_threshold . . . . . .	DWord	 000003EE _DATA	
rear . . . . . . . . . . . . . .	DWord	 0000025A _DATA	
redDrumTexture . . . . . . . . .	DWord	 00000262 _DATA	
redNotePath  . . . . . . . . . .	Byte	 00000067 _DATA	
sfCircleShape_create . . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_destroy  . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setFillColor . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineColor  .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineThickness 	L Near	 00000000 FLAT	External C
sfCircleShape_setPosition  . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setRadius  . . . .	L Near	 00000000 FLAT	External C
sfClock_create . . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_getElapsedTime . . . . .	L Near	 00000000 FLAT	External C
sfClock_restart  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClose  . . . . . . . . . . . .	Number	 00000004h   
sfColor_fromRGBA . . . . . . . .	L Near	 00000000 FLAT	External C
sfColor_fromRGB  . . . . . . . .	L Near	 00000000 FLAT	External C
sfEvtClosed  . . . . . . . . . .	Number	 00000000h   
sfEvtGainedFocus . . . . . . . .	Number	 00000003h   
sfEvtKeyPressed  . . . . . . . .	Number	 00000005h   
sfEvtKeyReleased . . . . . . . .	Number	 00000006h   
sfEvtLostFocus . . . . . . . . .	Number	 00000002h   
sfEvtMouseButtonPressed  . . . .	Number	 00000009h   
sfEvtMouseButtonReleased . . . .	Number	 0000000Ah   
sfEvtMouseEntered  . . . . . . .	Number	 0000000Ch   
sfEvtMouseLeft . . . . . . . . .	Number	 0000000Dh   
sfEvtMouseMoved  . . . . . . . .	Number	 0000000Bh   
sfEvtMouseWheelMoved . . . . . .	Number	 00000007h   
sfEvtMouseWheelScrolled  . . . .	Number	 00000008h   
sfEvtResized . . . . . . . . . .	Number	 00000001h   
sfEvtTextEntered . . . . . . . .	Number	 00000004h   
sfFalse  . . . . . . . . . . . .	Number	 00000000h   
sfFont_createFromFile  . . . . .	L Near	 00000000 FLAT	External C
sfFont_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfFullscreen . . . . . . . . . .	Number	 00000008h   
sfKeyA . . . . . . . . . . . . .	Number	 00000000h   
sfKeyD . . . . . . . . . . . . .	Number	 00000003h   
sfKeyEnter . . . . . . . . . . .	Number	 0000003Ah   
sfKeyEscape  . . . . . . . . . .	Number	 00000024h   
sfKeyF . . . . . . . . . . . . .	Number	 00000005h   
sfKeyJ . . . . . . . . . . . . .	Number	 00000009h   
sfKeyK . . . . . . . . . . . . .	Number	 0000000Ah   
sfKeyS . . . . . . . . . . . . .	Number	 00000012h   
sfMouseLeft  . . . . . . . . . .	Number	 00000000h   
sfMouseMiddle  . . . . . . . . .	Number	 00000002h   
sfMouseRight . . . . . . . . . .	Number	 00000001h   
sfMusic_createFromFile . . . . .	L Near	 00000000 FLAT	External C
sfMusic_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_getStatus  . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_play . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_setLoop  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_stop . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfNone . . . . . . . . . . . . .	Number	 00000000h   
sfPaused . . . . . . . . . . . .	Number	 00000001h   
sfPlaying  . . . . . . . . . . .	Number	 00000002h   
sfRectangleShape_create  . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_destroy . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setFillColor  .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineColor .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineThickness .	L Near	 00000000 FLAT	External C
sfRectangleShape_setPosition . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setSize . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_clear . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_close . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_create  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_destroy . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_display . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawCircleShape .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawRectangleShape 	L Near	 00000000 FLAT	External C
sfRenderWindow_drawSprite  . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawText  . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_isOpen  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_pollEvent . . . .	L Near	 00000000 FLAT	External C
sfResize . . . . . . . . . . . .	Number	 00000002h   
sfSleep  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_create  . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_destroy . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_getPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setTexture  . . . . . .	L Near	 00000000 FLAT	External C
sfStopped  . . . . . . . . . . .	Number	 00000000h   
sfText_create  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_getGlobalBounds . . . . .	L Near	 00000000 FLAT	External C
sfText_getLocalBounds  . . . . .	L Near	 00000000 FLAT	External C
sfText_setCharacterSize  . . . .	L Near	 00000000 FLAT	External C
sfText_setFillColor  . . . . . .	L Near	 00000000 FLAT	External C
sfText_setFont . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineColor . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineThickness . . .	L Near	 00000000 FLAT	External C
sfText_setPosition . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setString . . . . . . . .	L Near	 00000000 FLAT	External C
sfTexture_createFromFile . . . .	L Near	 00000000 FLAT	External C
sfTexture_destroy  . . . . . . .	L Near	 00000000 FLAT	External C
sfTitlebar . . . . . . . . . . .	Number	 00000001h   
sfTrue . . . . . . . . . . . . .	Number	 00000001h   
sfWindow_setFramerateLimit . . .	L Near	 00000000 FLAT	External C
spawnClock . . . . . . . . . . .	DWord	 00000299 _DATA	
stats  . . . . . . . . . . . . .	GameStats  0000009A _DATA	
str_bpm  . . . . . . . . . . . .	Byte	 0000037B _DATA	
str_end  . . . . . . . . . . . .	Byte	 0000038F _DATA	
str_offset . . . . . . . . . . .	Byte	 00000380 _DATA	
str_start  . . . . . . . . . . .	Byte	 00000388 _DATA	
strcspn  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strlen . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strncmp  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strtok_s . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
ten  . . . . . . . . . . . . . .	QWord	 000003BE _DATA	
totalNotes . . . . . . . . . . .	DWord	 00000309 _DATA	
transparentColor . . . . . . . .	sfColor	 00000375 _DATA	

	   0 Warnings
	   0 Errors
