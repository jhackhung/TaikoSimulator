Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/21/24 03:32:44
main_game.asm						     Page 1 - 1


				.686P
				.XMM
				.model flat, c
				include csfml.inc
			      C ; CSFML.INC - SFML Definitions for x86 Assembly
			      C ; 使用 MASM 語法
			      C 
			      C includelib csfml-audio.lib
			      C includelib csfml-graphics.lib
			      C includelib csfml-system.lib
			      C includelib csfml-window.lib
			      C 
			      C ; sfBool 定義
 = 00000000		      C sfFalse     equ 0
 = 00000001		      C sfTrue      equ 1
			      C 
			      C ; sfEventType 定義
 = 00000000		      C sfEvtClosed               equ 0
 = 00000001		      C sfEvtResized              equ 1
 = 00000002		      C sfEvtLostFocus            equ 2
 = 00000003		      C sfEvtGainedFocus          equ 3
 = 00000004		      C sfEvtTextEntered          equ 4
 = 00000005		      C sfEvtKeyPressed           equ 5
 = 00000006		      C sfEvtKeyReleased          equ 6
 = 00000007		      C sfEvtMouseWheelMoved      equ 7
 = 00000008		      C sfEvtMouseWheelScrolled   equ 8
 = 00000009		      C sfEvtMouseButtonPressed   equ 9
 = 0000000A		      C sfEvtMouseButtonReleased  equ 10
 = 0000000B		      C sfEvtMouseMoved           equ 11
 = 0000000C		      C sfEvtMouseEntered         equ 12
 = 0000000D		      C sfEvtMouseLeft            equ 13
			      C 
			      C ; sfMouseButton 定義
 = 00000000		      C sfMouseLeft   equ 0
 = 00000001		      C sfMouseRight  equ 1
 = 00000002		      C sfMouseMiddle equ 2
			      C 
			      C ; sfKey 定義
 = 0000003A		      C sfKeyEnter    equ 58
 = 00000000		      C sfKeyA        equ 0
 = 00000012		      C sfKeyS        equ 18
 = 00000003		      C sfKeyD        equ 3
 = 00000024		      C sfKeyEscape   equ 36
			      C 
			      C ; 視窗風格定義
 = 00000000		      C sfNone       equ 0
 = 00000001		      C sfTitlebar   equ 1
 = 00000002		      C sfResize     equ 2
 = 00000004		      C sfClose      equ 4
 = 00000008		      C sfFullscreen equ 8
			      C 
			      C ; 結構體定義
 00000008		      C sfVector2f STRUCT
 00000000  00000000	      C     x REAL4 ?
 00000004  00000000	      C     y REAL4 ?
			      C sfVector2f ENDS
			      C 
 00000008		      C sfVector2i STRUCT
 00000000  00000000	      C     x SDWORD ?
 00000004  00000000	      C     y SDWORD ?
			      C sfVector2i ENDS
			      C 
 0000000C		      C sfVideoMode STRUCT
 00000000  00000000	      C     _width  DWORD ?
 00000004  00000000	      C     height DWORD ?
 00000008  00000000	      C     bpp    DWORD ?
			      C sfVideoMode ENDS
			      C 
 00000004		      C sfColor STRUCT
 00000000  00		      C     r BYTE ?
 00000001  00		      C     g BYTE ?
 00000002  00		      C     b BYTE ?
 00000003  00		      C     a BYTE ?
			      C sfColor ENDS
			      C 
 00000010		      C sfFloatRect STRUCT
 00000000  00000000	      C     left   REAL4 ?
 00000004  00000000	      C     top    REAL4 ?
 00000008  00000000	      C     _width  REAL4 ?
 0000000C  00000000	      C     height REAL4 ?
			      C sfFloatRect ENDS
			      C 
 0000000C		      C mouseButton STRUCT
 00000000  00000000	      C     button DWORD ?
 00000004  00000000	      C     x DWORD ?
 00000008  00000000	      C     y DWORD ?
			      C mouseButton ENDS
			      C 
 00000014		      C key STRUCT
 00000000  00000000	      C     code DWORD ?
 00000004  00000000	      C     alt DWORD ?
 00000008  00000000	      C     control DWORD ?
 0000000C  00000000	      C     shift DWORD ?
 00000010  00000000	      C     system DWORD ?
			      C key ENDS
			      C 
 00000030		      C sfEvent STRUCT
 00000000  00000000	      C     _type DWORD ?                
 00000004  00000000	      C     _size DWORD ?                
 00000008  00000000	      C     mouse mouseButton <>       
	   00000000
	   00000000
 00000014  00000000	      C     _key key <>                 
	   00000000
	   00000000
	   00000000
	   00000000
 00000028  00000000	      C     mouseMove sfVector2i <>     
	   00000000
			      C sfEvent ENDS
			      C 
			      C ; 函數原型 - 視窗相關
			      C EXTERN sfRenderWindow_create:PROC
			      C EXTERN sfRenderWindow_destroy:PROC
			      C EXTERN sfRenderWindow_close:PROC
			      C EXTERN sfRenderWindow_isOpen:PROC
			      C EXTERN sfRenderWindow_clear:PROC
			      C EXTERN sfRenderWindow_display:PROC
			      C EXTERN sfRenderWindow_pollEvent:PROC
			      C EXTERN sfRenderWindow_drawSprite:PROC
			      C EXTERN sfRenderWindow_drawText:PROC
			      C 
			      C ; 函數原型 - 紋理相關
			      C EXTERN sfTexture_createFromFile:PROC
			      C EXTERN sfTexture_destroy:PROC
			      C 
			      C ; 函數原型 - 精靈相關
			      C EXTERN sfSprite_create:PROC
			      C EXTERN sfSprite_destroy:PROC
			      C EXTERN sfSprite_setTexture:PROC
			      C 
			      C ; 函數原型 - 音樂相關
			      C EXTERN sfMusic_createFromFile:PROC
			      C EXTERN sfMusic_destroy:PROC
			      C EXTERN sfMusic_play:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C EXTERN sfMusic_stop: PROC
			      C EXTERN sfMusic_getStatus: PROC
			      C 
			      C ; 函數原型 - 文字相關
			      C EXTERN sfFont_createFromFile:PROC
			      C EXTERN sfFont_destroy:PROC
			      C EXTERN sfText_create:PROC
			      C EXTERN sfText_destroy:PROC
			      C EXTERN sfText_setFont:PROC
			      C EXTERN sfText_setString:PROC
			      C EXTERN sfText_setCharacterSize:PROC
			      C EXTERN sfText_setFillColor:PROC
			      C EXTERN sfText_setOutlineColor:PROC
			      C EXTERN sfText_setOutlineThickness:PROC
			      C EXTERN sfText_getLocalBounds:PROC
			      C EXTERN sfText_getGlobalBounds:PROC
			      C EXTERN sfText_setPosition:PROC
			      C 
			      C ; 函數原型 - 顏色相關
			      C EXTERN sfColor_fromRGB:PROC
			      C EXTERN sfColor_fromRGBA:PROC
			      C 
			      C ; 函數原型 - 矩形相關
			      C EXTERN sfRectangleShape_create: PROC
			      C EXTERN sfRectangleShape_setPosition: PROC
			      C EXTERN sfRectangleShape_setSize: PROC
			      C EXTERN sfRectangleShape_setFillColor: PROC
			      C EXTERN sfRectangleShape_setOutlineThickness: PROC
			      C EXTERN sfRenderWindow_drawRectangleShape: PROC
			      C EXTERN sfRectangleShape_destroy: PROC
			      C EXTERN sfRectangleShape_setOutlineColor: PROC
			      C 
			      C EXTERN sfSleep: PROC
			      C 
				include file.inc
			      C includelib ucrt.lib
			      C includelib kernel32.lib
			      C 
			      C 
 0000000C		      C Drum struct
 00000000  00000000	      C 	sprite dword ?
 00000004  00000000	      C 	_type dword ?
 00000008  00000000	      C 	targetTime real4 ?
			      C Drum ends
			      C 
 00000018		      C GameStats struct
 00000000  00000000	      C 	great_count dword ?
 00000004  00000000	      C 	good_count dword ?
 00000008  00000000	      C 	miss_count dword ?
 0000000C  00000000	      C 	current_combo dword ?
 00000010  00000000	      C 	max_combo dword ?
 00000014  00000000	      C 	total_score dword ?
			      C GameStats ends
			      C 
 00000014		      C MusicInfo struct
 00000000  00000000	      C 	bpm real4 ?
 00000004  00000000	      C 	_offset real4 ?
 00000008  00000000	      C 	spawnTime real4 ?
 0000000C  00000000	      C 	currentBar dword ?
 00000010  00000000	      C 	notesInBar dword ?
			      C MusicInfo ends
			      C 
			      C extern fopen:proc
			      C extern fclose:proc
			      C extern fgets:proc
			      C 
			      C 
			      C ; string
			      C 
			      C extern strcspn:proc
			      C extern strncmp:proc
			      C extern __imp____stdio_common_vsscanf:proc
			      C extern strtok_s:proc
			      C extern strlen:proc
			      C 

				extern currentPage: DWORD

				; Constants
 = 00002710			MAX_NOTES = 10000
 = 000003E8			MAX_LINE_LENGTH = 1000
 = 00000500			SCREEN_WIDTH = 1280
 = 000002D0			SCREEN_HEIGHT = 720
 = 00000064			MAX_DRUMS = 100
 = 000001C2			HIT_POSITION_X = 450
 = 00000004			GREAT_THRESHOLD = 4
 = 0000001E			GOOD_THRESHOLD = 30
 = 00000003			INITIAL_DELAY = 3

 00000000			.data
 00000000 00000000			stats GameStats <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000018 00000000			msInfo MusicInfo <>
	   00000000
	   00000000
	   00000000
	   00000000

					; queue for drums
 0000002C  00000064 [			drumQueue Drum MAX_DRUMS dup(<>)
	    00000000
	    00000000
	    00000000
	   ]
 000004DC 00000000			front dword 0
 000004E0 00000000			rear dword 0
 000004E4 00000000			_size dword 0

					; texture
 000004E8 00000000			redDrumTexture dword ?
 000004EC 00000000			blueDrumTexture dword ?

 000004F0  00002710 [			notes dword MAX_NOTES dup(?)
	    00000000
	   ]
 0000A130 00000000			totalNotes dword 0
 0000A134 00000000			noteSpawnInterval real4 0.0
 0000A138  00002710 [			noteTimings real4 MAX_NOTES dup(?)
	    00000000
	   ]
 00013D78 3E800000			drumStep real4 0.25

					; file
 00013D7C 72 00				readA byte "r", 0

					; 字串常量
 00013D7E 42 50 4D 3A 00		str_bpm db "BPM:", 0
 00013D83 4F 46 46 53 45		str_offset db "OFFSET:", 0
	   54 3A 00
 00013D8B 23 53 54 41 52		str_start db "#START", 0
	   54 00
 00013D92 23 45 4E 44 00		str_end db "#END", 0
 00013D97 2C 00				comma db ",", 0

 00013D99 42 4D 50 3A 25		getBmp db "BMP:%f", 0
	   66 00
 00013DA0 4F 46 46 53 45		getOffset db "OFFSET:%f", 0
	   54 3A 25 66 00

 00013DAA 42700000			real_60 real4 60.0
 00013DAE 40800000			real_4 real4 4.0
 00013DB2 476A6000			real_60000 real4 60000.0

 00000000			.code
 00000000			ParseNoteChart PROC filename:PTR BYTE
					LOCAL filePtr:PTR FILE
					LOCAL line[256]:BYTE
					LOCAL inNoteSection:DWORD
					LOCAL bar:PTR BYTE
					LOCAL context:ptr byte
					local barlength:DWORD
					local validNotes:DWORD
					local i:DWORD
					local note:byte
					local currentTIme:real4
					local beatTime:real4
					local barTime:real4
					local noteInterval:real4

					; init variables
 00000009  C7 85 FFFFFEF8		mov inNoteSection, 0
	   00000000
 00000013  D9 EE			fldz ; currentTime 0

					; open file
 00000015  FF 35 00013D7C R		push dword ptr [readA]
 0000001B  FF 75 08			push filename
 0000001E  E8 00000000 E		call fopen
 00000023  83 C4 08			add esp, 8

 00000026  85 C0			test eax, eax
 00000028  0F 84 00000294		jz FileOpenError
 0000002E  89 45 FC			mov filePtr, eax

 00000031			ParseLineLoop:
					; read first line
 00000031  FF 75 FC			push filePtr
 00000034  68 00000100			push 256
 00000039  FF B5 FFFFFEFC		push dword ptr [line]
 0000003F  E8 00000000 E		call fgets
 00000044  83 C4 0C			add esp, 12

 00000047  85 C0			test eax, eax
 00000049  0F 84 0000022B		jz EndParse

					; remove \n
 0000004F  6A 0A			push 10
 00000051  FF B5 FFFFFEFC		push dword ptr [line]
 00000057  E8 00000000 E		call strcspn
 0000005C  83 C4 08			add esp, 8

 0000005F  0F B6 C8			movzx ecx, al
 00000062  C6 84 0D			mov byte ptr [line + ecx], 0
	   FFFFFEFC
	   00032200

					; check bpm
 0000006A  6A 04			push 4
 0000006C  68 00013D7E R		push offset str_bpm
 00000071  FF B5 FFFFFEFC		push dword ptr [line]
 00000077  E8 00000000 E		call strncmp
 0000007C  83 C4 0C			add esp, 12

 0000007F  85 C0			test eax, eax
 00000081  75 1B			jnz CheckOffset
					
 00000083  68 00000018 R		push offset msInfo.bpm
 00000088  68 00013D99 R		push offset getBmp
 0000008D  FF B5 FFFFFEFC		push dword ptr [line]
 00000093  FF 15 00000000 E		call dword ptr __imp____stdio_common_vsscanf
 00000099  83 C4 0C			add esp, 12

 0000009C  EB 93			jmp ParseLineLoop

					; check offset
					
 0000009E			CheckOffset:
 0000009E  6A 07			push 7
 000000A0  68 00013D83 R		push offset str_offset
 000000A5  FF B5 FFFFFEFC		push dword ptr [line]
 000000AB  E8 00000000 E		call strncmp
 000000B0  83 C4 0C			add esp, 12

 000000B3  85 C0			test eax, eax
 000000B5  75 1F			jnz CheckStart
 000000B7  FF 35 0000001C R		push msInfo._offset
 000000BD  68 00013DA0 R		push offset getOffset
 000000C2  FF B5 FFFFFEFC		push dword ptr [line]
 000000C8  FF 15 00000000 E		call dword ptr __imp____stdio_common_vsscanf
 000000CE  83 C4 0C			add esp, 12

 000000D1  E9 FFFFFF5B			jmp ParseLineLoop

 000000D6			CheckStart:
 000000D6  6A 06			push 6
 000000D8  68 00013D8B R		push offset str_start
 000000DD  FF B5 FFFFFEFC		push dword ptr [line]
 000000E3  E8 00000000 E		call strncmp
 000000E8  83 C4 0C			add esp, 12

 000000EB  85 C0			test eax, eax
 000000ED  75 0F			jnz CheckEnd
 000000EF  C7 85 FFFFFEF8		mov inNoteSection, 1
	   00000001
 000000F9  E9 FFFFFF33			jmp ParseLineLoop

 000000FE			CheckEnd:
 000000FE  6A 04			push 4
 00000100  68 00013D92 R		push offset str_end
 00000105  FF B5 FFFFFEFC		push dword ptr [line]
 0000010B  E8 00000000 E		call strncmp
 00000110  83 C4 0C			add esp, 12

 00000113  85 C0			test eax, eax
 00000115  0F 84 0000015F		jz EndParse
					
 0000011B  83 BD FFFFFEF8		cmp inNoteSection, 1
	   01
 00000122  0F 85 FFFFFF09		jnz ParseLineLoop

					; allocate notes
 00000128  FF B5 FFFFFEF0		push context
 0000012E  FF 35 00013D97 R		push dword ptr [comma]
 00000134  FF B5 FFFFFEFC		push dword ptr [line]
 0000013A  E8 00000000 E		call strtok_s
 0000013F  83 C4 0C			add esp, 12

 00000142  85 C0			test eax, eax
 00000144  0F 84 FFFFFEE7		jz ParseLineLoop

 0000014A  89 85 FFFFFEF4		mov bar, eax

 00000150			ProcessBar:
					; get bar length
 00000150  FF B5 FFFFFEF4		push bar
 00000156  E8 00000000 E		call strlen
 0000015B  83 C4 04			add esp, 4

 0000015E  89 85 FFFFFEEC		mov barlength, eax

					; get valid notes
 00000164  C7 85 FFFFFEE8		mov validNotes, 0
	   00000000
 0000016E  8B 8D FFFFFEEC		mov ecx, barlength

 00000174  8B 85 FFFFFEE4		mov eax, i
 0000017A  33 C0			xor eax, eax
 0000017C  89 85 FFFFFEE4		mov i, eax
 00000182			CountValidNotes:
 00000182  39 8D FFFFFEE4		cmp i, ecx
 00000188  7D 1E			jge ComputeNoteTiming
 0000018A  0F B6 84 2D			movzx eax, byte ptr [bar + i]
	   FFFFFDD8
 00000192  3C 30			cmp al, '0'
 00000194  72 0A			jb SkipNote
 00000196  3C 32			cmp al, '2'
 00000198  77 06			ja SkipNote
 0000019A  FF 85 FFFFFEE8		inc validNotes
 000001A0			SkipNote:
 000001A0  FF 85 FFFFFEE4		inc i
 000001A6  EB DA			jmp CountValidNotes

 000001A8			ComputeNoteTiming:
					; check if there are notes in the bar
 000001A8  8B 85 FFFFFEE8		mov eax, validNotes
 000001AE  83 F8 00			cmp eax, 0
 000001B1  0F 84 0000009A		je ProcessNextBar

					; calculate note time
 000001B7  D9 05 00000018 R		fld dword ptr [msInfo.bpm]
 000001BD  D9 E8			fld1
 000001BF  DE F9			fdiv
 000001C1  D8 0D 00013DAA R		fmul dword ptr [real_60]
 000001C7  D9 9D FFFFFED8		fstp beatTime	; beatTime = 60 / bpm
 000001CD  D8 0D 00013DAE R		fmul dword ptr [real_4]
 000001D3  D9 9D FFFFFED4		fstp barTime	; barTime = 4 * beatTime
 000001D9  D9 85 FFFFFED4		fld barTIme
 000001DF  D8 B5 FFFFFEE8		fdiv validNotes
 000001E5  D9 9D FFFFFED0		fstp noteInterval  ; noteInterval = barTime / validNotes

 000001EB  8B 85 FFFFFEE4		mov eax, i
 000001F1  33 C0			xor eax, eax
 000001F3  89 85 FFFFFEE4		mov i, eax

 000001F9			NoteLoop:
 000001F9  8B 85 FFFFFEE4		mov eax, i
 000001FF  3B 85 FFFFFEEC	    cmp eax, barlength
 00000205  7D 4A			jge ProcessNextBar
 00000207  0F B6 84 2D			movzx eax, byte ptr [bar + i]
	   FFFFFDD8
 0000020F  3C 30			cmp al, '0'
 00000211  76 22			jbe SkipToNextNote
 00000213  3C 32			cmp al, '2'
 00000215  77 1E			ja SkipToNextNote

					; store note and timing
 00000217  A1 0000A130 R		mov eax, totalNotes
 0000021C  89 80 000004F0 R		mov notes[eax], eax
 00000222  D9 85 FFFFFEDC		fld currentTIme
 00000228  D9 1C 85			fstp noteTimings[eax*4]
	   0000A138 R
 0000022F  FF 05 0000A130 R		inc totalNotes

 00000235			SkipToNextNote:
 00000235  D9 85 FFFFFEDC	    fld currentTime
 0000023B  D9 85 FFFFFED0		fld noteInterval
 00000241  DE C1			fadd
 00000243  D9 9D FFFFFEDC		fstp currentTime
 00000249  FF 85 FFFFFEE4		inc i
 0000024F  EB A8			jmp NoteLoop

 00000251			ProcessNextBar:
 00000251  FF B5 FFFFFEF0	    push context
 00000257  FF 35 00013D97 R		push dword ptr [comma]
 0000025D  6A 00			push 0
 0000025F  E8 00000000 E		call strtok_s
 00000264  83 C4 0C			add esp, 12

 00000267  85 C0			test eax, eax
 00000269  0F 85 FFFFFEE1		jnz ProcessBar
 0000026F  89 85 FFFFFEF4		mov bar, eax

 00000275  E9 FFFFFDB7			jmp ParseLineLoop

 0000027A			EndParse:
 0000027A  FF 75 FC			push filePtr
 0000027D  E8 00000000 E		call fclose
 00000282  83 C4 04			add esp, 4

 00000285  D9 05 00000018 R		fld dword ptr [msInfo.bpm]
 0000028B  D8 0D 00013DAE R		fmul dword ptr [real_4]
 00000291  D9 E8			fld1
 00000293  DE F9			fdiv
 00000295  D8 0D 00013DB2 R		fmul dword ptr [real_60000]
 0000029B  D9 1D 0000A134 R		fstp noteSpawnInterval

 000002A1  B8 00000500			mov eax, SCREEN_WIDTH
 000002A6  2D 000001C2			sub eax, HIT_POSITION_X

 000002AB  50				push eax
 000002AC  DB 04 24			fild dword ptr [esp]
 000002AF  83 C4 04			add esp, 4

 000002B2  D9 85 FFFFFED4		fld dword ptr [barTime]
 000002B8  DE F9			fdiv
 000002BA  D9 1D 00013D78 R		fstp dword ptr [drumStep]

					ret

 000002C2			FileOpenError:
					ret
 000002C4			ParseNoteChart ENDP
main_game.asm(296) : warning A6004:procedure argument or local not referenced : note

 000002C4			main_game_proc PROC window:dword,musicPath:dword,noteChart:dword
 000002C7  FF 75 10			push dword ptr [noteChart]
 000002CA  E8 FFFFFD31			call ParseNoteChart
 000002CF  83 C4 04			add esp, 4


 000002D2			@main_loop:
						


 000002D2				@event_loop:






 000002D2				@render_window:


 000002D2			@end:

 000002D2			@end_game:

					ret
 000002D4			main_game_proc ENDP
main_game.asm(323) : warning A6004:procedure argument or local not referenced : window
main_game.asm(323) : warning A6004:procedure argument or local not referenced : musicPath

				END main_game_proc
Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/21/24 03:32:44
main_game.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Drum . . . . . . . . . . . . . .	 0000000C
  sprite . . . . . . . . . . . .	 00000000	 DWord
  _type  . . . . . . . . . . . .	 00000004	 DWord
  targetTime . . . . . . . . . .	 00000008	 DWord
GameStats  . . . . . . . . . . .	 00000018
  great_count  . . . . . . . . .	 00000000	 DWord
  good_count . . . . . . . . . .	 00000004	 DWord
  miss_count . . . . . . . . . .	 00000008	 DWord
  current_combo  . . . . . . . .	 0000000C	 DWord
  max_combo  . . . . . . . . . .	 00000010	 DWord
  total_score  . . . . . . . . .	 00000014	 DWord
MusicInfo  . . . . . . . . . . .	 00000014
  bpm  . . . . . . . . . . . . .	 00000000	 DWord
  _offset  . . . . . . . . . . .	 00000004	 DWord
  spawnTime  . . . . . . . . . .	 00000008	 DWord
  currentBar . . . . . . . . . .	 0000000C	 DWord
  notesInBar . . . . . . . . . .	 00000010	 DWord
key  . . . . . . . . . . . . . .	 00000014
  code . . . . . . . . . . . . .	 00000000	 DWord
  alt  . . . . . . . . . . . . .	 00000004	 DWord
  control  . . . . . . . . . . .	 00000008	 DWord
  shift  . . . . . . . . . . . .	 0000000C	 DWord
  system . . . . . . . . . . . .	 00000010	 DWord
mouseButton  . . . . . . . . . .	 0000000C
  button . . . . . . . . . . . .	 00000000	 DWord
  x  . . . . . . . . . . . . . .	 00000004	 DWord
  y  . . . . . . . . . . . . . .	 00000008	 DWord
sfColor  . . . . . . . . . . . .	 00000004
  r  . . . . . . . . . . . . . .	 00000000	 Byte
  g  . . . . . . . . . . . . . .	 00000001	 Byte
  b  . . . . . . . . . . . . . .	 00000002	 Byte
  a  . . . . . . . . . . . . . .	 00000003	 Byte
sfEvent  . . . . . . . . . . . .	 00000030
  _type  . . . . . . . . . . . .	 00000000	 DWord
  _size  . . . . . . . . . . . .	 00000004	 DWord
  mouse  . . . . . . . . . . . .	 00000008	 
  _key . . . . . . . . . . . . .	 00000014	 
  mouseMove  . . . . . . . . . .	 00000028	 QWord
sfFloatRect  . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  _width . . . . . . . . . . . .	 00000008	 DWord
  height . . . . . . . . . . . .	 0000000C	 DWord
sfVector2f . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVector2i . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVideoMode  . . . . . . . . . .	 0000000C
  _width . . . . . . . . . . . .	 00000000	 DWord
  height . . . . . . . . . . . .	 00000004	 DWord
  bpp  . . . . . . . . . . . . .	 00000008	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00013DB6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002D4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ParseNoteChart . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002C4 Public C
  filename . . . . . . . . . . .	DWord	 bp + 00000008
  filePtr  . . . . . . . . . . .	DWord	 bp - 00000004
  line . . . . . . . . . . . . .	Byte	 bp - 00000104
  inNoteSection  . . . . . . . .	DWord	 bp - 00000108
  bar  . . . . . . . . . . . . .	DWord	 bp - 0000010C
  context  . . . . . . . . . . .	DWord	 bp - 00000110
  barlength  . . . . . . . . . .	DWord	 bp - 00000114
  validNotes . . . . . . . . . .	DWord	 bp - 00000118
  i  . . . . . . . . . . . . . .	DWord	 bp - 0000011C
  note . . . . . . . . . . . . .	Byte	 bp - 0000011D
  currentTIme  . . . . . . . . .	DWord	 bp - 00000124
  beatTime . . . . . . . . . . .	DWord	 bp - 00000128
  barTime  . . . . . . . . . . .	DWord	 bp - 0000012C
  noteInterval . . . . . . . . .	DWord	 bp - 00000130
  ParseLineLoop  . . . . . . . .	L Near	 00000031 _TEXT	
  CheckOffset  . . . . . . . . .	L Near	 0000009E _TEXT	
  CheckStart . . . . . . . . . .	L Near	 000000D6 _TEXT	
  CheckEnd . . . . . . . . . . .	L Near	 000000FE _TEXT	
  ProcessBar . . . . . . . . . .	L Near	 00000150 _TEXT	
  CountValidNotes  . . . . . . .	L Near	 00000182 _TEXT	
  SkipNote . . . . . . . . . . .	L Near	 000001A0 _TEXT	
  ComputeNoteTiming  . . . . . .	L Near	 000001A8 _TEXT	
  NoteLoop . . . . . . . . . . .	L Near	 000001F9 _TEXT	
  SkipToNextNote . . . . . . . .	L Near	 00000235 _TEXT	
  ProcessNextBar . . . . . . . .	L Near	 00000251 _TEXT	
  EndParse . . . . . . . . . . .	L Near	 0000027A _TEXT	
  FileOpenError  . . . . . . . .	L Near	 000002C2 _TEXT	
main_game_proc . . . . . . . . .	P Near	 000002C4 _TEXT	Length= 00000010 Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
  musicPath  . . . . . . . . . .	DWord	 bp + 0000000C
  noteChart  . . . . . . . . . .	DWord	 bp + 00000010
  @main_loop . . . . . . . . . .	L Near	 000002D2 _TEXT	
  @event_loop  . . . . . . . . .	L Near	 000002D2 _TEXT	
  @render_window . . . . . . . .	L Near	 000002D2 _TEXT	
  @end . . . . . . . . . . . . .	L Near	 000002D2 _TEXT	
  @end_game  . . . . . . . . . .	L Near	 000002D2 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
GOOD_THRESHOLD . . . . . . . . .	Number	 0000001Eh   
GREAT_THRESHOLD  . . . . . . . .	Number	 00000004h   
HIT_POSITION_X . . . . . . . . .	Number	 000001C2h   
INITIAL_DELAY  . . . . . . . . .	Number	 00000003h   
MAX_DRUMS  . . . . . . . . . . .	Number	 00000064h   
MAX_LINE_LENGTH  . . . . . . . .	Number	 000003E8h   
MAX_NOTES  . . . . . . . . . . .	Number	 00002710h   
SCREEN_HEIGHT  . . . . . . . . .	Number	 000002D0h   
SCREEN_WIDTH . . . . . . . . . .	Number	 00000500h   
__imp____stdio_common_vsscanf  .	L Near	 00000000 FLAT	External C
_size  . . . . . . . . . . . . .	DWord	 000004E4 _DATA	
blueDrumTexture  . . . . . . . .	DWord	 000004EC _DATA	
comma  . . . . . . . . . . . . .	Byte	 00013D97 _DATA	
currentPage  . . . . . . . . . .	DWord	 00000000 FLAT	External C
drumQueue  . . . . . . . . . . .	Drum	 0000002C _DATA	
drumStep . . . . . . . . . . . .	DWord	 00013D78 _DATA	
fclose . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fgets  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fopen  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
front  . . . . . . . . . . . . .	DWord	 000004DC _DATA	
getBmp . . . . . . . . . . . . .	Byte	 00013D99 _DATA	
getOffset  . . . . . . . . . . .	Byte	 00013DA0 _DATA	
msInfo . . . . . . . . . . . . .	MusicInfo  00000018 _DATA	
noteSpawnInterval  . . . . . . .	DWord	 0000A134 _DATA	
noteTimings  . . . . . . . . . .	DWord	 0000A138 _DATA	
notes  . . . . . . . . . . . . .	DWord	 000004F0 _DATA	
readA  . . . . . . . . . . . . .	Byte	 00013D7C _DATA	
real_4 . . . . . . . . . . . . .	DWord	 00013DAE _DATA	
real_60000 . . . . . . . . . . .	DWord	 00013DB2 _DATA	
real_60  . . . . . . . . . . . .	DWord	 00013DAA _DATA	
rear . . . . . . . . . . . . . .	DWord	 000004E0 _DATA	
redDrumTexture . . . . . . . . .	DWord	 000004E8 _DATA	
sfClose  . . . . . . . . . . . .	Number	 00000004h   
sfColor_fromRGBA . . . . . . . .	L Near	 00000000 FLAT	External C
sfColor_fromRGB  . . . . . . . .	L Near	 00000000 FLAT	External C
sfEvtClosed  . . . . . . . . . .	Number	 00000000h   
sfEvtGainedFocus . . . . . . . .	Number	 00000003h   
sfEvtKeyPressed  . . . . . . . .	Number	 00000005h   
sfEvtKeyReleased . . . . . . . .	Number	 00000006h   
sfEvtLostFocus . . . . . . . . .	Number	 00000002h   
sfEvtMouseButtonPressed  . . . .	Number	 00000009h   
sfEvtMouseButtonReleased . . . .	Number	 0000000Ah   
sfEvtMouseEntered  . . . . . . .	Number	 0000000Ch   
sfEvtMouseLeft . . . . . . . . .	Number	 0000000Dh   
sfEvtMouseMoved  . . . . . . . .	Number	 0000000Bh   
sfEvtMouseWheelMoved . . . . . .	Number	 00000007h   
sfEvtMouseWheelScrolled  . . . .	Number	 00000008h   
sfEvtResized . . . . . . . . . .	Number	 00000001h   
sfEvtTextEntered . . . . . . . .	Number	 00000004h   
sfFalse  . . . . . . . . . . . .	Number	 00000000h   
sfFont_createFromFile  . . . . .	L Near	 00000000 FLAT	External C
sfFont_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfFullscreen . . . . . . . . . .	Number	 00000008h   
sfKeyA . . . . . . . . . . . . .	Number	 00000000h   
sfKeyD . . . . . . . . . . . . .	Number	 00000003h   
sfKeyEnter . . . . . . . . . . .	Number	 0000003Ah   
sfKeyEscape  . . . . . . . . . .	Number	 00000024h   
sfKeyS . . . . . . . . . . . . .	Number	 00000012h   
sfMouseLeft  . . . . . . . . . .	Number	 00000000h   
sfMouseMiddle  . . . . . . . . .	Number	 00000002h   
sfMouseRight . . . . . . . . . .	Number	 00000001h   
sfMusic_createFromFile . . . . .	L Near	 00000000 FLAT	External C
sfMusic_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_getStatus  . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_play . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_setLoop  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_stop . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfNone . . . . . . . . . . . . .	Number	 00000000h   
sfRectangleShape_create  . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_destroy . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setFillColor  .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineColor .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineThickness .	L Near	 00000000 FLAT	External C
sfRectangleShape_setPosition . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setSize . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_clear . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_close . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_create  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_destroy . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_display . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawRectangleShape 	L Near	 00000000 FLAT	External C
sfRenderWindow_drawSprite  . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawText  . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_isOpen  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_pollEvent . . . .	L Near	 00000000 FLAT	External C
sfResize . . . . . . . . . . . .	Number	 00000002h   
sfSleep  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_create  . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_destroy . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setTexture  . . . . . .	L Near	 00000000 FLAT	External C
sfText_create  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_getGlobalBounds . . . . .	L Near	 00000000 FLAT	External C
sfText_getLocalBounds  . . . . .	L Near	 00000000 FLAT	External C
sfText_setCharacterSize  . . . .	L Near	 00000000 FLAT	External C
sfText_setFillColor  . . . . . .	L Near	 00000000 FLAT	External C
sfText_setFont . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineColor . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineThickness . . .	L Near	 00000000 FLAT	External C
sfText_setPosition . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setString . . . . . . . .	L Near	 00000000 FLAT	External C
sfTexture_createFromFile . . . .	L Near	 00000000 FLAT	External C
sfTexture_destroy  . . . . . . .	L Near	 00000000 FLAT	External C
sfTitlebar . . . . . . . . . . .	Number	 00000001h   
sfTrue . . . . . . . . . . . . .	Number	 00000001h   
stats  . . . . . . . . . . . . .	GameStats  00000000 _DATA	
str_bpm  . . . . . . . . . . . .	Byte	 00013D7E _DATA	
str_end  . . . . . . . . . . . .	Byte	 00013D92 _DATA	
str_offset . . . . . . . . . . .	Byte	 00013D83 _DATA	
str_start  . . . . . . . . . . .	Byte	 00013D8B _DATA	
strcspn  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strlen . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strncmp  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strtok_s . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
totalNotes . . . . . . . . . . .	DWord	 0000A130 _DATA	

	   3 Warnings
	   0 Errors
