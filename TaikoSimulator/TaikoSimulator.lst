Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/30/24 01:50:30
main_game_page.asm					     Page 1 - 1


				.686P
				.XMM
				.model flat, c
				include csfml.inc
			      C ; CSFML.INC - SFML Definitions for x86 Assembly
			      C ; 使用 MASM 語法
			      C 
			      C includelib csfml-audio.lib
			      C includelib csfml-graphics.lib
			      C includelib csfml-system.lib
			      C includelib csfml-window.lib
			      C 
			      C ; sfBool 定義
 = 00000000		      C sfFalse     equ 0
 = 00000001		      C sfTrue      equ 1
			      C 
			      C ; sfMusic status
 = 00000000		      C sfStopped   equ 0
 = 00000001		      C sfPaused    equ 1
 = 00000002		      C sfPlaying   equ 2
			      C 
			      C 
			      C ; sfEventType 定義
 = 00000000		      C sfEvtClosed               equ 0
 = 00000001		      C sfEvtResized              equ 1
 = 00000002		      C sfEvtLostFocus            equ 2
 = 00000003		      C sfEvtGainedFocus          equ 3
 = 00000004		      C sfEvtTextEntered          equ 4
 = 00000005		      C sfEvtKeyPressed           equ 5
 = 00000006		      C sfEvtKeyReleased          equ 6
 = 00000007		      C sfEvtMouseWheelMoved      equ 7
 = 00000008		      C sfEvtMouseWheelScrolled   equ 8
 = 00000009		      C sfEvtMouseButtonPressed   equ 9
 = 0000000A		      C sfEvtMouseButtonReleased  equ 10
 = 0000000B		      C sfEvtMouseMoved           equ 11
 = 0000000C		      C sfEvtMouseEntered         equ 12
 = 0000000D		      C sfEvtMouseLeft            equ 13
			      C 
			      C ; sfMouseButton 定義
 = 00000000		      C sfMouseLeft   equ 0
 = 00000001		      C sfMouseRight  equ 1
 = 00000002		      C sfMouseMiddle equ 2
			      C 
			      C ; sfKey 定義
 = 0000003A		      C sfKeyEnter    equ 58
 = 00000000		      C sfKeyA        equ 0
 = 00000012		      C sfKeyS        equ 18
 = 00000003		      C sfKeyD        equ 3
 = 00000024		      C sfKeyEscape   equ 36
 = 00000005		      C sfKeyF        equ 5
 = 00000009		      C sfKeyJ        equ 9
 = 0000000A		      C sfKeyK        equ 10
			      C 
			      C ; 視窗風格定義
 = 00000000		      C sfNone       equ 0
 = 00000001		      C sfTitlebar   equ 1
 = 00000002		      C sfResize     equ 2
 = 00000004		      C sfClose      equ 4
 = 00000008		      C sfFullscreen equ 8
			      C 
			      C ; 結構體定義
 00000008		      C sfVector2f STRUCT
 00000000  00000000	      C     x REAL4 ?
 00000004  00000000	      C     y REAL4 ?
			      C sfVector2f ENDS
			      C 
 00000008		      C sfVector2i STRUCT
 00000000  00000000	      C     x SDWORD ?
 00000004  00000000	      C     y SDWORD ?
			      C sfVector2i ENDS
			      C 
 0000000C		      C sfVideoMode STRUCT
 00000000  00000000	      C     _width  DWORD ?
 00000004  00000000	      C     height DWORD ?
 00000008  00000000	      C     bpp    DWORD ?
			      C sfVideoMode ENDS
			      C 
 00000004		      C sfColor STRUCT
 00000000  00		      C     r BYTE ?
 00000001  00		      C     g BYTE ?
 00000002  00		      C     b BYTE ?
 00000003  00		      C     a BYTE ?
			      C sfColor ENDS
			      C 
 00000010		      C sfFloatRect STRUCT
 00000000  00000000	      C     left   REAL4 ?
 00000004  00000000	      C     top    REAL4 ?
 00000008  00000000	      C     _width  REAL4 ?
 0000000C  00000000	      C     height REAL4 ?
			      C sfFloatRect ENDS
			      C 
 0000000C		      C mouseButton STRUCT
 00000000  00000000	      C     button DWORD ?
 00000004  00000000	      C     x DWORD ?
 00000008  00000000	      C     y DWORD ?
			      C mouseButton ENDS
			      C 
 00000014		      C key STRUCT
 00000000  00000000	      C     code DWORD ?
 00000004  00000000	      C     alt DWORD ?
 00000008  00000000	      C     control DWORD ?
 0000000C  00000000	      C     shift DWORD ?
 00000010  00000000	      C     system DWORD ?
			      C key ENDS
			      C 
 00000030		      C sfEvent STRUCT
 00000000  00000000	      C     _type DWORD ?                
 00000004  00000000	      C     _size DWORD ?                
 00000008  00000000	      C     mouse mouseButton <>       
	   00000000
	   00000000
 00000014  00000000	      C     _key key <>                 
	   00000000
	   00000000
	   00000000
	   00000000
 00000028  00000000	      C     mouseMove sfVector2i <>     
	   00000000
			      C sfEvent ENDS
			      C 
			      C ; 函數原型 - 視窗相關
			      C EXTERN sfRenderWindow_create:PROC
			      C EXTERN sfRenderWindow_destroy:PROC
			      C EXTERN sfRenderWindow_close:PROC
			      C EXTERN sfRenderWindow_isOpen:PROC
			      C EXTERN sfRenderWindow_clear:PROC
			      C EXTERN sfRenderWindow_display:PROC
			      C EXTERN sfRenderWindow_pollEvent:PROC
			      C EXTERN sfRenderWindow_drawSprite:PROC
			      C EXTERN sfRenderWindow_drawText:PROC
			      C 
			      C EXTERN sfWindow_setFramerateLimit:PROC
			      C 
			      C ; 函數原型 - 紋理相關
			      C EXTERN sfTexture_createFromFile:PROC
			      C EXTERN sfTexture_destroy:PROC
			      C 
			      C ; 函數原型 - 精靈相關
			      C EXTERN sfSprite_create:PROC
			      C EXTERN sfSprite_destroy:PROC
			      C EXTERN sfSprite_setTexture:PROC
			      C EXTERN sfSprite_setPosition:PROC
			      C EXTERN sfSprite_getPosition:PROC
			      C 
			      C ; 函數原型 - 音樂相關
			      C EXTERN sfMusic_createFromFile:PROC
			      C EXTERN sfMusic_destroy:PROC
			      C EXTERN sfMusic_play:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C EXTERN sfMusic_stop: PROC
			      C EXTERN sfMusic_getStatus: PROC
			      C 
			      C ; 函數原型 - 文字相關
			      C EXTERN sfFont_createFromFile:PROC
			      C EXTERN sfFont_destroy:PROC
			      C EXTERN sfText_create:PROC
			      C EXTERN sfText_destroy:PROC
			      C EXTERN sfText_setFont:PROC
			      C EXTERN sfText_setString:PROC
			      C EXTERN sfText_setCharacterSize:PROC
			      C EXTERN sfText_setFillColor:PROC
			      C EXTERN sfText_setOutlineColor:PROC
			      C EXTERN sfText_setOutlineThickness:PROC
			      C EXTERN sfText_getLocalBounds:PROC
			      C EXTERN sfText_getGlobalBounds:PROC
			      C EXTERN sfText_setPosition:PROC
			      C 
			      C ; 函數原型 - 顏色相關
			      C EXTERN sfColor_fromRGB:PROC
			      C EXTERN sfColor_fromRGBA:PROC
			      C 
			      C ; 函數原型 - 圓形相關
			      C EXTERN sfCircleShape_create: PROC
			      C EXTERN sfCircleShape_setPosition: PROC
			      C EXTERN sfCircleShape_setRadius: PROC
			      C EXTERN sfCircleShape_setFillColor: PROC
			      C EXTERN sfRenderWindow_drawCircleShape: PROC
			      C EXTERN sfCircleShape_destroy: PROC
			      C EXTERN sfCircleShape_setOutlineThickness: PROC
			      C EXTERN sfCircleShape_setOutlineColor: PROC
			      C 
			      C ; 函數原型 - 矩形相關
			      C EXTERN sfRectangleShape_create: PROC
			      C EXTERN sfRectangleShape_setPosition: PROC
			      C EXTERN sfRectangleShape_setSize: PROC
			      C EXTERN sfRectangleShape_setFillColor: PROC
			      C EXTERN sfRectangleShape_setOutlineThickness: PROC
			      C EXTERN sfRenderWindow_drawRectangleShape: PROC
			      C EXTERN sfRectangleShape_destroy: PROC
			      C EXTERN sfRectangleShape_setOutlineColor: PROC
			      C 
			      C EXTERN sfSleep: PROC
			      C EXTERN sfClock_create: PROC
			      C EXTERN sfClock_getElapsedTime: PROC
			      C EXTERN sfClock_restart: PROC
			      C 
				include file.inc
			      C includelib ucrt.lib
			      C includelib kernel32.lib
			      C 
			      C 
 0000000C		      C Drum struct
 00000000  00000000	      C 	sprite dword ?
 00000004  00000000	      C 	_type dword ?
 00000008  00000000	      C 	targetTime real4 ?
			      C Drum ends
			      C 
 00000018		      C GameStats struct
 00000000  00000000	      C 	great_count DWORD ? 
 00000004  00000000	      C 	good_count DWORD ? 
 00000008  00000000	      C 	miss_count DWORD ? 
 0000000C  00000000	      C 	current_combo DWORD ? 
 00000010  00000000	      C 	max_combo DWORD ? 
 00000014  00000000	      C 	total_score DWORD ? 
			      C GameStats ends
			      C 
 00000014		      C MusicInfo struct
 00000000  00000000	      C 	bpm real4 ?
 00000004  00000000	      C 	_offset real4 ?
 00000008  00000000	      C 	spawnTime real4 ?
 0000000C  00000000	      C 	currentBar dword ?
 00000010  00000000	      C 	notesInBar dword ?
			      C MusicInfo ends
			      C 
			      C extern malloc:proc
			      C ;extern fopen:proc
			      C ;extern fclose:proc
			      C ;extern fgets:proc
			      C 
			      C 
			      C ; string
			      C 
			      C ;extern strcspn:proc
			      C ;extern strncmp:proc
			      C ;extern __imp____stdio_common_vsscanf:proc
			      C ;extern strtok_s:proc
			      C ;extern strlen:proc
			      C 

				extern end_game_page: PROC
				extern currentPage: DWORD

				; Constants
 = 00002710			MAX_NOTES = 10000
 = 000003E8			MAX_LINE_LENGTH = 1000
 = 00000500			SCREEN_WIDTH = 1280
 = 000002D0			SCREEN_HEIGHT = 720
 = 00000064			MAX_DRUMS = 100
 = 000001C2			HIT_POSITION_X = 450 
 = 00000004			GREAT_THRESHOLD = 4
 = 0000001E			GOOD_THRESHOLD = 30
 = 00000003			INITIAL_DELAY = 3

 00000000			.data
				    ALIGN 4
 00000000 7FFFFFFF		    abs_mask DD 7fffffffh, 0, 0, 0
	   00000000
	   00000000
	   00000000

				    ; 新增延遲相關變數
 00000010 40000000		    initial_delay_1 real4 2.0    ; 設定 2 秒延遲
 00000014 00000000		    delay_started dword 0      ; 追蹤延遲是否開始
 00000018 00000000		    delay_clock dword 0        ; 用於計時的時鐘

 0000001C 00000000			consoleHandle dd ?
 00000020 00000000			event sfEvent <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000

 00000050 00000000		    redNoteSound dd 0    ; 紅色音符音效
 00000054 00000000		    blueNoteSound dd 0   ; 藍色音符音效

 00000058 61 73 73 65 74		bgPath db "assets/game/bg_genre_2.jpg", 0
	   73 2F 67 61 6D
	   65 2F 62 67 5F
	   67 65 6E 72 65
	   5F 32 2E 6A 70
	   67 00
 00000073 61 73 73 65 74		redNotePath db "assets/game/red_note.png", 0
	   73 2F 67 61 6D
	   65 2F 72 65 64
	   5F 6E 6F 74 65
	   2E 70 6E 67 00
 0000008C 61 73 73 65 74		blueNotePath db "assets/game/blue_note.png", 0
	   73 2F 67 61 6D
	   65 2F 62 6C 75
	   65 5F 6E 6F 74
	   65 2E 70 6E 67
	   00
 000000A6 61 73 73 65 74	    red_note_sound_path db "assets/main/rednote.wav", 0
	   73 2F 6D 61 69
	   6E 2F 72 65 64
	   6E 6F 74 65 2E
	   77 61 76 00
 000000BE 61 73 73 65 74	    blue_note_sound_path db "assets/main/bluenote.wav", 0
	   73 2F 6D 61 69
	   6E 2F 62 6C 75
	   65 6E 6F 74 65
	   2E 77 61 76 00

 000000D7 00000000			stats GameStats <0, 0, 0, 0, 0, 0>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 000000EF 00000000		    msInfo MusicInfo <>
	   00000000
	   00000000
	   00000000
	   00000000

					; queue for drums
 00000103  00000064 [			drumQueue dword MAX_DRUMS dup(?) ; 存放Drum結構指針
	    00000000
	   ]
 00000293 00000000			front dword 0
 00000297 00000000			rear dword 0
 0000029B 00000000			_size dword 0

					; texture
 0000029F 00000000			redDrumTexture dword ?
 000002A3 00000000			blueDrumTexture dword ?

 000002A7 61 73 73 65 74		font_path db "assets/fonts/Taiko_No_Tatsujin_Official_Font.ttf", 0
	   73 2F 66 6F 6E
	   74 73 2F 54 61
	   69 6B 6F 5F 4E
	   6F 5F 54 61 74
	   73 75 6A 69 6E
	   5F 4F 66 66 69
	   63 69 61 6C 5F
	   46 6F 6E 74 2E
	   74 74 66 00
 000002D8 00000000			font dd 0

					; text
 000002DC 00000000			countDownText dword ?

					; background
 000002E0 00000000			bgTexture dword ?
 000002E4 00000000			bgSprite dword ?

					; judgement circle
 000002E8 00000000			judgementCircle dword ?
					
					; music
 000002EC 00000000			music dword ?

					; clock
 000002F0 00000000			spawnClock dword 0

 000002F4 00000000			currentTime real4 0.0

 000002F8 00000000			currentNoteIndex dd 0
 000002FC 40400000			gameStartTime real4 3.0
 00000300 00000000			gameStarted dword 0

					; note chart
 00000304 00000000			noteSpawnInterval real4 0.0
 00000308 40EFC71D			drumStep real4 7.493056
 0000030C  00000079 [		    notes dword 121 dup (?)
	    00000000
	   ]
 000004F0 00000000		    totalNotes dword ?
 000004F4  00000079 [		    noteTimings real4 121 dup (?)
	    00000000
	   ]

					; color
 000006D8 00 00 00 FF			blackColor sfColor <0, 0, 0, 255>
 000006DC E6 E6 E6 C8		    white_color sfColor <230, 230, 230, 200>
 000006E0 FF FF FF 32			transparentColor sfColor <255, 255, 255, 50>

 000006E4 42 50 4D 3A 25		getBpm db "BPM:%f", 0
	   66 00
 000006EB 4F 46 46 53 45		getOffset db "OFFSET:%f", 0
	   54 3A 25 66 00

 000006F5 42700000			real_60 real4 60.0
 000006F9 40800000			real_4 real4 4.0
 000006FD 476A6000			real_60000 real4 60000.0
 00000701				decimal_mult  dq 0.1                  ; 小數位數乘數
	   3FB999999999999A
 00000709			    ten           dq 10.0                 ; 用於乘法運算
	   4024000000000000
 00000711 40000000			real_2 real4 2.0
 00000715 41700000		    real_15 real4 15.0
 00000719 41F00000		    real_30 real4 30.0
 0000071D 42000000			real_32 real4 32.0
 00000721 42380000		    real_46 real4 46.0
 00000725 42800000		    real_64 real4 64.0
 00000729 43480000		    real_200 real4 200.0
 0000072D 43610000		    real_225 real4 225.0
 00000731 43E10000		    real_450 real4 450.0
 00000735 44340000			real_720 real4 720.0
 00000739 44A00000			real_1280 real4 1280.0
 0000073D 49742400			real_1000000 real4 1000000.0
 00000741 41F00000		    real_good_threshold real4 30.0
 00000745 40800000		    real_great_threshold real4 4.0
 00000749 43B68000		    real_365 real4 365.0
 0000074D 00000000		    real_0 real4 0.0
 00000751 00000000		    loop_index dword 0
 00000000			.code

 00000000			isQueueFull PROC
 00000000  A1 0000029B R	    mov eax, _size
 00000005  83 F8 64		    cmp eax, MAX_DRUMS
 00000008  0F 94 C0		    sete al                ; 如果滿了，設置返回值為1
 0000000B  C3			    ret
 0000000C			isQueueFull ENDP

 0000000C			isQueueEmpty PROC
 0000000C  A1 0000029B R	    mov eax, _size
 00000011  85 C0		    test eax, eax
 00000013  0F 94 C0		    sete al                ; 如果空，設置返回值為1
 00000016  C3			    ret
 00000017			isQueueEmpty ENDP

 00000017			enqueue PROC USES edi esi ebx @drum:DWORD 
				    ; 檢查是否滿了
 0000001D  E8 FFFFFFDE		    call isQueueFull
 00000022  84 C0		    test al, al
 00000024  75 2F		    jnz @end_enqueue

				    ; 加入隊列
 00000026  8B 75 08		    mov esi, @drum          ; drum參數
 00000029  8B 3D 00000297 R	    mov edi, rear          ; rear索引
 0000002F  89 34 BD		    mov drumQueue[edi*4], esi ; 將drum加入隊列
	   00000103 R

				    ; 更新rear和size
 00000036  FF 05 00000297 R	    inc rear
 0000003C  83 3D 00000297 R	    cmp rear, MAX_DRUMS
	   64
 00000043  72 0A		    jb SkipRearWrap
 00000045  C7 05 00000297 R	    mov rear, 0
	   00000000
 0000004F				SkipRearWrap:
 0000004F  FF 05 0000029B R			inc _size
 00000055				@end_enqueue:
						ret
 0000005A			enqueue ENDP

 0000005A			dequeue PROC
				    ; 檢查是否空了
 0000005A  E8 FFFFFFAD		    call isQueueEmpty
 0000005F  84 C0		    test al, al
 00000061  75 36		    jnz QueueEmpty

				    ; 刪除隊列頭
 00000063  8B 3D 00000293 R	    mov edi, front          ; front索引
 00000069  8B 34 BD		    mov esi, drumQueue[edi*4] ; 獲取隊列頭的drum指針
	   00000103 R
 00000070  56			    push esi
 00000071  E8 00000000 E	    call sfSprite_destroy   ; 釋放sprite
 00000076  83 C4 04		    add esp, 4

				    ; 更新front和size
 00000079  FF 05 00000293 R	    inc front
 0000007F  83 3D 00000293 R	    cmp front, MAX_DRUMS
	   64
 00000086  72 0A		    jb SkipFrontWrap
 00000088  C7 05 00000293 R	    mov front, 0
	   00000000
 00000092			SkipFrontWrap:
 00000092  FF 0D 0000029B R	    dec _size
 00000098  C3			    ret

 00000099			QueueEmpty:
 00000099  C3			    ret
 0000009A			dequeue ENDP

 0000009A			spawnDrum PROC USES esi edi _type:DWORD, targetTime:REAL4
				    ; 檢查是否滿了
 0000009F  E8 FFFFFF5C		    call isQueueFull
 000000A4  84 C0		    test al, al
 000000A6  0F 85 00000089	    jnz QueueFullSpawn

				    ; 創建新的Drum結構
 000000AC  6A 0C		    push 12                ; 分配空間
 000000AE  E8 00000000 E	    call malloc
 000000B3  83 C4 04		    add esp, 4
 000000B6  8B F0		    mov esi, eax           ; 保存新結構指針

				    ; 初始化Drum結構
 000000B8  6A 00			push 0
 000000BA  E8 00000000 E	    call sfSprite_create
 000000BF  83 C4 04		    add esp, 4
 000000C2  89 06		    mov [esi], eax       ; sprite指針

 000000C4  8B 45 08			mov eax, _type
 000000C7  89 46 04		    mov dword ptr [esi+4], eax
 000000CA  F3/ 0F 10 45		    movss xmm0, targetTime
	   0C
 000000CF  F3/ 0F 11 46		    movss dword ptr [esi+8], xmm0
	   08
				    

				    ; 設置音符的紋理
 000000D4  83 7D 08 01		    cmp _type, 1
 000000D8  75 14		    jne SetBlueTexture
 000000DA  6A 01		    push sfTrue
 000000DC  FF 35 0000029F R	    push dword ptr redDrumTexture
 000000E2  FF 36		    push [esi]
 000000E4  E8 00000000 E	    call sfSprite_setTexture
 000000E9  83 C4 0C		    add esp, 12
 000000EC  EB 12		    jmp DoneTexture
 000000EE			SetBlueTexture:
 000000EE  6A 01		    push sfTrue
 000000F0  FF 35 000002A3 R	    push dword ptr blueDrumTexture
 000000F6  FF 36		    push [esi]
 000000F8  E8 00000000 E	    call sfSprite_setTexture
 000000FD  83 C4 0C		    add esp, 12
 00000100			DoneTexture:

				    ; 設置初始位置

 00000100  83 EC 08		    sub esp, 8
 00000103  F3/ 0F 10 05		    movss xmm0, real_1280
	   00000739 R
 0000010B  F3/ 0F 11 04 24	    movss dword ptr [esp], xmm0
 00000110  F3/ 0F 10 05		    movss xmm0, real_200
	   00000729 R
 00000118  F3/ 0F 11 44 24	    movss dword ptr [esp+4], xmm0
	   04
 0000011E  FF 36		    push [esi]
 00000120  E8 00000000 E	    call sfSprite_setPosition
 00000125  83 C4 0C		    add esp, 12

				    ; 將Drum加入隊列
 00000128  56			    push esi
 00000129  E8 FFFFFEE9		    call enqueue
 0000012E  83 C4 04		    add esp, 4
				    ret

 00000135			QueueFullSpawn:
				    ret
 00000139			spawnDrum ENDP

 00000139			updateDrums PROC USES esi edi ebx
				    local i:DWORD
				    ; 檢查並移除過時的音符
 00000142  A1 0000029B R	    mov eax, _size
 00000147  85 C0		    test eax, eax
 00000149  0F 84 000000C2	    jz SkipUpdate

 0000014F  8B 3D 00000293 R	    mov edi, front
 00000155  8B 34 BD		    mov esi, drumQueue[edi*4]
	   00000103 R
 0000015C  FF 36		    push [esi]            ; drum.sprite
 0000015E  E8 00000000 E	    call sfSprite_getPosition
 00000163  83 C4 04		    add esp, 4

				    ; 檢查音符是否完全超出判定圓圈
				    ; 判定圓圈左邊緣 = 450 - 30 = 420
				    ; 音符右邊緣 = x + 64
 00000166  F3/ 0F 58 05		    addss xmm0, real_64   ; 加上音符半徑寬度(約32像素)
	   00000725 R
 0000016E  F3/ 0F 10 0D		    movss xmm1, real_450  ; 載入判定圈x座標
	   00000731 R
 00000176  F3/ 0F 5C 0D		    subss xmm1, real_30   ; 減去半徑，獲得左邊緣
	   00000719 R
 0000017E  0F 2F C1		    comiss xmm0, xmm1     ; 比較 (note.x + width) < (circle.x - radius)
 00000181  73 38		    jae SkipFrontRemoval

				    ; 移除過時音符
 00000183  FF 36		    push [esi]
 00000185  E8 00000000 E	    call sfSprite_destroy
 0000018A  83 C4 04		    add esp, 4

				    ; 更新miss and current_combo 統計數據
 0000018D  B8 000000D7 R	    mov eax, offset stats
 00000192  FF 40 08		    inc dword ptr [eax+8]            ; miss_count++
 00000195  C7 40 0C		    mov dword ptr [eax+12], 0        ; current_combo = 0
	   00000000
				    
 0000019C  FF 05 00000293 R	    inc front
 000001A2  83 3D 00000293 R	    cmp front, MAX_DRUMS
	   64
 000001A9  72 0A		    jb SkipFrontWrap2
 000001AB  C7 05 00000293 R	    mov front, 0
	   00000000
 000001B5			SkipFrontWrap2:
 000001B5  FF 0D 0000029B R	    dec _size
 000001BB			SkipFrontRemoval:

				    ; 更新音符位置
 000001BB  A1 0000029B R	    mov eax, _size
 000001C0  89 45 FC		    mov i, eax
 000001C3  8B 3D 00000293 R	    mov edi, front
 000001C9			UpdateLoop:
 000001C9  8B 45 FC		    mov eax, i
 000001CC  83 F8 00		    cmp eax, 0
 000001CF  74 40		    jz EndUpdateLoop

 000001D1  8B 34 BD		    mov esi, drumQueue[edi*4]
	   00000103 R
 000001D8  FF 36		    push dword ptr [esi]
 000001DA  E8 00000000 E	    call sfSprite_getPosition
 000001DF  83 C4 04		    add esp, 4

 000001E2  F3/ 0F 5C 05		    subss xmm0, drumStep
	   00000308 R
				    
 000001EA  52			    push edx
 000001EB  83 EC 04		    sub esp, 4
 000001EE  F3/ 0F 11 04 24	    movss dword ptr [esp], xmm0
 000001F3  FF 36		    push [esi]
 000001F5  E8 00000000 E	    call sfSprite_setPosition
 000001FA  83 C4 08		    add esp, 8

 000001FD  47			    inc edi
 000001FE  83 FF 64		    cmp edi, MAX_DRUMS
 00000201  72 05		    jb NoWrap
 00000203  BF 00000000		    mov edi, 0
 00000208			NoWrap:
 00000208  8B 45 FC		    mov eax, i
 0000020B  48			    dec eax
 0000020C  89 45 FC		    mov i, eax
 0000020F  EB B8		    jmp UpdateLoop
 00000211			EndUpdateLoop:
 00000211			SkipUpdate:
				    ret
 00000216			updateDrums ENDP

 00000216			createJudgementCircle PROC USES esi edi
				    ; 創建圓形形狀
 00000218  6A 00		    push 0
 0000021A  E8 00000000 E	    call sfCircleShape_create
 0000021F  83 C4 04		    add esp, 4
 00000222  A3 000002E8 R	    mov judgementCircle, eax

				    ; 設置圓形半徑
 00000227  FF 35 00000719 R	    push real_30
 0000022D  FF 35 000002E8 R	    push dword ptr [judgementCircle]
 00000233  E8 00000000 E	    call sfCircleShape_setRadius
 00000238  83 C4 08		    add esp, 8

				    ; 設置圓形位置
 0000023B  FF 35 0000072D R	    push real_225               ; HIT_POSITION_X, 200+25
 00000241  FF 35 00000731 R	    push real_450
 00000247  FF 35 000002E8 R	    push dword ptr [judgementCircle]
 0000024D  E8 00000000 E	    call sfCircleShape_setPosition
 00000252  83 C4 0C		    add esp, 12

				    ; 設置填充顏色
 00000255  FF 35 000006E0 R	    push transparentColor
 0000025B  FF 35 000002E8 R	    push dword ptr [judgementCircle]
 00000261  E8 00000000 E	    call sfCircleShape_setFillColor
 00000266  83 C4 08		    add esp, 8

				    ; 設置邊框厚度
 00000269  FF 35 00000711 R	    push real_2
 0000026F  FF 35 000002E8 R	    push dword ptr [judgementCircle]
 00000275  E8 00000000 E	    call sfCircleShape_setOutlineThickness
 0000027A  83 C4 08		    add esp, 8

				    ; 設置邊框顏色
 0000027D  FF 35 000006DC R	    push white_color
 00000283  FF 35 000002E8 R	    push dword ptr [judgementCircle]
 00000289  E8 00000000 E	    call sfCircleShape_setOutlineColor
 0000028E  83 C4 08		    add esp, 8

				    ret
 00000294			createJudgementCircle ENDP

 00000294			@ld_background PROC
				    ; 創建背景紋理
 00000294  6A 00		    push 0
 00000296  68 00000058 R	    push offset bgPath
 0000029B  E8 00000000 E	    call sfTexture_createFromFile
 000002A0  83 C4 08		    add esp, 8
 000002A3  A3 000002E0 R	    mov bgTexture, eax
				    
				    ; 創建背景精靈
 000002A8  E8 00000000 E	    call sfSprite_create
 000002AD  A3 000002E4 R	    mov DWORD PTR [bgSprite], eax
				    
				    ; 設定紋理
 000002B2  6A 01		    push 1
 000002B4  A1 000002E0 R	    mov eax, DWORD PTR [bgTexture]
 000002B9  50			    push eax
 000002BA  8B 0D 000002E4 R	    mov ecx, DWORD PTR [bgSprite]
 000002C0  51			    push ecx
 000002C1  E8 00000000 E	    call sfSprite_setTexture
 000002C6  83 C4 0C		    add esp, 12
 000002C9  C3			    ret
 000002CA			@ld_background ENDP

 000002CA			@countDown_text proc
 000002CA  6A 00			push 0
 000002CC  68 000002A7 R		push offset font_path
 000002D1  E8 00000000 E		call sfFont_createFromFile
 000002D6  83 C4 08			add esp, 8
 000002D9  A3 000002D8 R		mov font, eax

 000002DE  E8 00000000 E		call sfText_create
 000002E3  A3 000002DC R		mov countDownText, eax

 000002E8  FF 35 000002D8 R		push font
 000002EE  FF 35 000002DC R		push dword ptr [countDownText]
 000002F4  E8 00000000 E		call sfText_setFont
 000002F9  83 C4 08			add esp, 8

 000002FC  6A 48			push 72
 000002FE  FF 35 000002DC R		push dword ptr [countDownText]
 00000304  E8 00000000 E		call sfText_setCharacterSize
 00000309  83 C4 08			add esp, 8

 0000030C  F3/ 0F 10 05			movss xmm0, [real_720]
	   00000735 R
 00000314  F3/ 0F 5E 05			divss xmm0, [real_2]
	   00000711 R
 0000031C  F3/ 0F 5C 05			subss xmm0, [real_32]
	   0000071D R
 00000324  F3/ 0F 11 44 24		movss dword ptr [esp-4], xmm0
	   FC

 0000032A  F3/ 0F 10 05			movss xmm0, [real_1280]
	   00000739 R
 00000332  F3/ 0F 5E 05			divss xmm0, [real_2]
	   00000711 R
 0000033A  F3/ 0F 5C 05			subss xmm0, [real_32]
	   0000071D R
 00000342  F3/ 0F 11 44 24		movss dword ptr [esp-8], xmm0
	   F8

 00000348  8B F4			mov esi, esp
 0000034A  FF 76 FC			push dword ptr [esi-4]
 0000034D  FF 76 F8			push dword ptr [esi-8]
 00000350  FF 35 000002DC R		push dword ptr [countDownText]
 00000356  E8 00000000 E		call sfText_setPosition
 0000035B  83 C4 0C			add esp, 12

 0000035E  C3				ret
 0000035F			@countDown_text ENDP

 0000035F			processHit proc uses ebx esi edi hitType:DWORD
				    local delta:DWORD
				    
				    ; 檢查佇列是否為空
 00000368  E8 FFFFFC9F		    call isQueueEmpty
 0000036D  84 C0		    test al, al
 0000036F  0F 85 000000A9	    jnz @done_processing
				    
				    ; 獲取最前面的音符
 00000375  8B 3D 00000293 R	    mov edi, front
 0000037B  8B 34 BD		    mov esi, drumQueue[edi*4]
	   00000103 R
				    
				    ; 獲取音符位置(取到音符top_left位置)
 00000382  FF 36		    push dword ptr [esi]
 00000384  E8 00000000 E	    call sfSprite_getPosition
 00000389  83 C4 04		    add esp, 4
				    
				    ; 計算與判定線的距離 (450是判定線位置，也是judgement circle的圓心) 兩圓心比較
 0000038C  F3/ 0F 5C 05		    subss xmm0, real_450
	   00000731 R
 00000394  F3/ 0F 58 05		    addss xmm0, real_32 ; 加上音符半徑
	   0000071D R
				    
				    ; 取絕對值
 0000039C  0F 54 05		    andps xmm0, [abs_mask]
	   00000000 R
				    
				    ; 首先檢查音符類型是否匹配
 000003A3  8B 56 04		    mov edx, dword ptr [esi+4]
 000003A6  3B 55 08		    cmp edx, [hitType]
 000003A9  75 73		    jne @done_processing         ; 如果類型不匹配，跳出processHit
				    
				    ; 判斷音符是否在判定圈內
 000003AB  F3/ 0F 10 0D		    movss xmm1, real_30    ; 載入判定圈半徑
	   00000719 R
 000003B3  F3/ 0F 58 0D		    addss xmm1, real_32    ; 加上音符半徑
	   0000071D R
 000003BB  0F 2F C1		    comiss xmm0, xmm1      ; 比較音符中心點距離是否 >= 30
 000003BE  73 5E		    jae @done_processing     ; 如果距離 > 30，直接跳過

				    ; GREAT判定 (誤差 <= 15)
 000003C0  F3/ 0F 10 0D		    movss xmm1, real_15       ; 載入判定圈半徑   
	   00000715 R
 000003C8  0F 2F C1		    comiss xmm0, xmm1         ; 比較音符中心點距離是否 <= 15
 000003CB  76 02		    jbe @great_hit
				    
				    ; 其餘情況 -> GOOD 誤差 <= 30
 000003CD  EB 26		    jmp @good_hit
				    
 000003CF			@great_hit:
 000003CF  B8 000000D7 R	    mov eax, offset stats
 000003D4  FF 00		    inc dword ptr [eax]              ; great_count
 000003D6  FF 40 0C		    inc dword ptr [eax+12]           ; current_combo
				    
				    ; 計算分數 (combo * 10 + 300)
 000003D9  8B 48 0C		    mov ecx, dword ptr [eax+12]      ; 取得current_combo
 000003DC  6B C9 0A		    imul ecx, 10
 000003DF  81 C1 0000012C	    add ecx, 300
 000003E5  01 48 14		    add dword ptr [eax+20], ecx      ; 加到total_score
				    
				    ; 更新max_combo
 000003E8  8B 48 0C		    mov ecx, dword ptr [eax+12]      ; current_combo
 000003EB  3B 48 10		    cmp ecx, dword ptr [eax+16]      ; 比較max_combo
 000003EE  7E 29		    jle @remove_note
 000003F0  89 48 10		    mov dword ptr [eax+16], ecx      ; 更新max_combo
 000003F3  EB 24		    jmp @remove_note
				    
 000003F5			@good_hit:
 000003F5  B8 000000D7 R	    mov eax, offset stats
 000003FA  FF 40 04		    inc dword ptr [eax+4]            ; good_count
 000003FD  FF 40 0C		    inc dword ptr [eax+12]           ; current_combo
				    
				    ; 計算分數 (combo * 5 + 100)
 00000400  8B 48 0C		    mov ecx, dword ptr [eax+12]      ; 取得current_combo
 00000403  6B C9 05		    imul ecx, 5
 00000406  83 C1 64		    add ecx, 100
 00000409  01 48 14		    add dword ptr [eax+20], ecx      ; 加到total_score
				    
				    ; 更新max_combo
 0000040C  8B 48 0C		    mov ecx, dword ptr [eax+12]      ; current_combo
 0000040F  3B 48 10		    cmp ecx, dword ptr [eax+16]      ; 比較max_combo
 00000412  7E 05		    jle @remove_note
 00000414  89 48 10		    mov dword ptr [eax+16], ecx      ; 更新max_combo
 00000417  EB 00		    jmp @remove_note
				    
 00000419			@remove_note:
 00000419  E8 FFFFFC3C		    call dequeue
				    
 0000041E			@done_processing:
 00000422  C2 0004		    ret 4

 00000425			processHit endp
main_game_page.asm(509) : warning A6004:procedure argument or local not referenced : delta

				;播放音效
 00000425			initializeSounds PROC
				    ; 創建紅色音符音效
 00000425  68 000000A6 R	    push offset red_note_sound_path
 0000042A  E8 00000000 E	    call sfMusic_createFromFile
 0000042F  83 C4 04		    add esp, 4
 00000432  A3 00000050 R	    mov redNoteSound, eax

				    ; 創建藍色音符音效
 00000437  68 000000BE R	    push offset blue_note_sound_path
 0000043C  E8 00000000 E	    call sfMusic_createFromFile
 00000441  83 C4 04		    add esp, 4
 00000444  A3 00000054 R	    mov blueNoteSound, eax

 00000449  C3			    ret
 0000044A			initializeSounds ENDP

				; 修改紅色音符音效函數
 0000044A			rednote_sound PROC
 0000044A  FF 35 00000050 R	    push redNoteSound
 00000450  E8 00000000 E	    call sfMusic_stop    ; 先停止之前的播放
 00000455  83 C4 04		    add esp, 4

 00000458  FF 35 00000050 R	    push redNoteSound
 0000045E  E8 00000000 E	    call sfMusic_play    ; 播放音效
 00000463  83 C4 04		    add esp, 4
 00000466  C3			    ret
 00000467			rednote_sound ENDP

				; 修改藍色音符音效函數
 00000467			bluenote_sound PROC
 00000467  FF 35 00000054 R	    push blueNoteSound
 0000046D  E8 00000000 E	    call sfMusic_stop    ; 先停止之前的播放
 00000472  83 C4 04		    add esp, 4

 00000475  FF 35 00000054 R	    push blueNoteSound
 0000047B  E8 00000000 E	    call sfMusic_play    ; 播放音效
 00000480  83 C4 04		    add esp, 4
 00000483  C3			    ret
 00000484			bluenote_sound ENDP

 00000484			main_game_page PROC window:dword,musicPath:dword,selected_notes:dword,selected_totalNotes,selected_notesTiming:dword,selected_msInfo:dword
				    ; 設定音樂資訊
				    ; Load music info structure
 00000487  8B 45 1C		    mov eax, selected_msInfo              ; Get pointer to music1Info
 0000048A  D9 00		    fld real4 ptr [eax]            ; Load tempo into FPU stack
 0000048C  D9 1D 000000EF R	    fstp [msInfo.bpm]            ; Store tempo
 00000492  D9 40 04		    fld real4 ptr [eax+4]          ; Load unknown value
 00000495  D9 1D 000000F3 R	    fstp [msInfo._offset]          ; Store unknown value
 0000049B  D9 40 08		    fld real4 ptr [eax+8]          ; Load interval
 0000049E  D9 1D 000000F7 R	    fstp [msInfo.spawnTime]         ; Store interval
				    
				    ; Load total notes count
 000004A4  8B 75 14		    mov esi, selected_totalNotes   ; Get pointer to totalNotes
 000004A7  8B 0E		    mov ecx, [esi]                 ; Load value
 000004A9  89 0D 000004F0 R	    mov [totalNotes], ecx          ; Store locally
				    
				    ; Load notes array
 000004AF  8B 75 10		    mov esi, selected_notes        ; Get pointer to notes array
 000004B2  BF 0000030C R	    mov edi, offset notes                 ; Destination for notes
 000004B7  8B 0D 000004F0 R	    mov ecx, [totalNotes]          ; Counter for loop
 000004BD  F3/ A5		    rep movsd                      ; Copy all notes
				    
				    ; Load timing array
 000004BF  8B 75 18		    mov esi, selected_notesTiming  ; Get pointer to timing array
 000004C2  BF 000004F4 R	    mov edi, offset noteTimings           ; Destination for timings
 000004C7  8B 0D 000004F0 R	    mov ecx, [totalNotes]          ; Counter for loop
 000004CD  F3/ A5		    rep movsd                      ; Copy all timings

 000004CF  B8 0000030C R	    mov eax, offset notes
 000004D4  B8 000004F4 R	    mov eax, offset noteTimings
 000004D9  B8 000000EF R	    mov eax, offset msInfo

 000004DE  B8 000000D7 R	    mov eax, offset stats
 000004E3  C7 00 00000000	    mov dword ptr [eax], 0      ; great_count
 000004E9  C7 40 04		    mov dword ptr [eax+4], 0    ; good_count
	   00000000
 000004F0  C7 40 08		    mov dword ptr [eax+8], 0    ; miss_count
	   00000000
 000004F7  C7 40 0C		    mov dword ptr [eax+12], 0   ; current_combo
	   00000000
 000004FE  C7 40 10		    mov dword ptr [eax+16], 0   ; max_combo
	   00000000
 00000505  C7 40 14		    mov dword ptr [eax+20], 0   ; total_score
	   00000000

				    ; load background
 0000050C  E8 FFFFFD83		    call @ld_background
 00000511  E8 FFFFFF0F		    call initializeSounds    ; 初始化音效

				    ; load red note texture
 00000516  6A 00		    push 0
 00000518  68 00000073 R	    push offset redNotePath
 0000051D  E8 00000000 E	    call sfTexture_createFromFile
 00000522  83 C4 08		    add esp, 8
 00000525  A3 0000029F R	    mov redDrumTexture, eax

				    ; load blue note texture
 0000052A  6A 00		    push 0
 0000052C  68 0000008C R	    push offset blueNotePath
 00000531  E8 00000000 E	    call sfTexture_createFromFile
 00000536  83 C4 08		    add esp, 8
 00000539  A3 000002A3 R	    mov blueDrumTexture, eax

				    ; create judgement circle
 0000053E  E8 FFFFFCD3		    call createJudgementCircle

				    ; create music
 00000543  6A 00		    push 0
 00000545  FF 75 0C		    push dword ptr [musicPath]
 00000548  E8 00000000 E	    call sfMusic_createFromFile
 0000054D  83 C4 08		    add esp, 8
 00000550  A3 000002EC R	    mov music, eax

 00000555  6A 00		    push 0
 00000557  FF 35 000002EC R	    push music
 0000055D  E8 00000000 E	    call sfMusic_setLoop
 00000562  83 C4 08		    add esp, 8

 00000565  E8 00000000 E	    call sfClock_create
 0000056A  A3 000002F0 R	    mov spawnClock, eax

				    ; 創建延遲計時器
 0000056F  E8 00000000 E	    call sfClock_create
 00000574  A3 00000018 R	    mov delay_clock, eax

 00000579			@main_loop:
 00000579  8B 45 08		    mov eax, DWORD PTR [window]
 0000057C  50			    push eax
 0000057D  E8 00000000 E	    call sfRenderWindow_isOpen
 00000582  83 C4 04		    add esp, 4
 00000585  85 C0		    test eax, eax
 00000587  0F 84 0000034E	    je exit_program

				    ; 檢查延遲狀態
 0000058D  A1 00000014 R	    mov eax, delay_started
 00000592  83 F8 00		    cmp eax, 0
 00000595  75 1D		    jne check_game_start    ; 如果延遲已經開始，檢查遊戲開始

				    ; 開始延遲計時
 00000597  C7 05 00000014 R	    mov delay_started, 1
	   00000001
 000005A1  FF 35 00000018 R	    push delay_clock
 000005A7  E8 00000000 E	    call sfClock_restart
 000005AC  83 C4 04		    add esp, 4
 000005AF  E9 000000B1		    jmp @event_loop

 000005B4			check_game_start:
				    ; 檢查是否已經過了延遲時間
 000005B4  FF 35 00000018 R	    push delay_clock
 000005BA  E8 00000000 E	    call sfClock_getElapsedTime
 000005BF  F3/ 0F 2A C8		    cvtsi2ss xmm1, eax
				    
 000005C3  F3/ 0F 10 05		    movss xmm0, [real_1000000]
	   0000073D R
 000005CB  F3/ 0F 5E C8		    divss xmm1, xmm0        ; 轉換為秒
				    
 000005CF  F3/ 0F 10 05		    movss xmm0, dword ptr [initial_delay_1]
	   00000010 R
 000005D7  0F 2F C8		    comiss xmm1, xmm0       ; 比較是否超過延遲時間
 000005DA  0F 82 00000085	    jb @event_loop          ; 如果還沒超過延遲時間，繼續等待

				    ; 如果超過延遲時間且遊戲還沒開始，開始遊戲
 000005E0  A1 00000300 R	    mov eax, gameStarted
 000005E5  83 F8 00		    cmp eax, 0
 000005E8  75 2E		    jne deter_offset

				    ; 開始播放音樂
 000005EA  FF 35 000002EC R	    push music
 000005F0  E8 00000000 E	    call sfMusic_play
 000005F5  83 C4 04		    add esp, 4

 000005F8  FF 35 000002F0 R	    push spawnClock
 000005FE  E8 00000000 E	    call sfClock_restart
 00000603  83 C4 04		    add esp, 4

 00000606  D9 EE		    fldz
 00000608  D9 1D 000002FC R	    fstp gameStartTime
 0000060E  C7 05 00000300 R	    mov gameStarted, 1
	   00000001

 00000618			deter_offset:
 00000618  A1 00000300 R	    mov eax, gameStarted
 0000061D  83 F8 01		    cmp eax, 1
 00000620  75 43		    jne @event_loop

 00000622  D9 EE		    fldz
 00000624  D9 05 000000F3 R	    fld msInfo._offset
 0000062A  DF F1		    fcomip st(0), st(1)
 0000062C  73 37		    jae @event_loop
 0000062E  DD D8		    fstp st(0)

 00000630  FF 35 000002EC R	    push music
 00000636  E8 00000000 E	    call sfMusic_getStatus
 0000063B  83 C4 04		    add esp, 4
 0000063E  83 F8 02		    cmp eax, sfPlaying
 00000641  74 22		    je @event_loop

 00000643  D9 05 000000F3 R	    fld msInfo._offset
 00000649  D9 E0		    fchs
 0000064B  D9 05 000002F4 R	    fld currentTime
 00000651  DF F1		    fcomip st(0), st(1)
 00000653  72 10		    jb @event_loop
 00000655  DD D8		    fstp st(0)

 00000657  FF 35 000002EC R	    push music
 0000065D  E8 00000000 E	    call sfMusic_play
 00000662  83 C4 04		    add esp, 4

 00000665			    @event_loop:
 00000665  8D 35 00000020 R	        lea esi, event
 0000066B  56			        push esi
 0000066C  8B 45 08		        mov eax, DWORD PTR [window]
 0000066F  50			        push eax
 00000670  E8 00000000 E	        call sfRenderWindow_pollEvent
 00000675  83 C4 08		        add esp, 8
 00000678  85 C0		        test eax, eax
 0000067A  74 46		        je @controll_drum

 0000067C  83 3E 00		        cmp dword ptr [esi].sfEvent._type, sfEvtClosed
 0000067F  0F 84 000001A1	        je @end

 00000685  83 3E 05		        cmp dword ptr [esi].sfEvent._type, sfEvtKeyPressed
 00000688  74 02		        je @check_key_press

				    ; check_gameStarted:
				        ; cmp gameStarted, 1
				        ; je @check_key_press

 0000068A  EB D9		        jmp @event_loop

				        ; 修改按鍵處理部分
 0000068C			        @check_key_press:
				   
				            ; 檢查是否是F鍵或J鍵
 0000068C  83 7E 04 05		            cmp dword ptr [esi+4], sfKeyF
 00000690  74 14		            je @handle_red
 00000692  83 7E 04 09		            cmp dword ptr [esi+4], sfKeyJ
 00000696  74 0E		            je @handle_red
				    
				            ; 檢查是否是D鍵或K鍵
 00000698  83 7E 04 03		            cmp dword ptr [esi+4], sfKeyD
 0000069C  74 16		            je @handle_blue
 0000069E  83 7E 04 0A		            cmp dword ptr [esi+4], sfKeyK
 000006A2  74 10		            je @handle_blue
				    
 000006A4  EB BF		            jmp @event_loop

 000006A6			            @handle_red:
 000006A6  E8 FFFFFD9F		                call rednote_sound
 000006AB  6A 01		                push 1                   ; 紅色音符類型
 000006AD  E8 FFFFFCAD		                call processHit
 000006B2  EB 0E		                jmp @controll_drum

 000006B4			            @handle_blue:
 000006B4  E8 FFFFFDAE		                call bluenote_sound
 000006B9  6A 02		                push 2                   ; 藍色音符類型
 000006BB  E8 FFFFFC9F		                call processHit
 000006C0  EB 00		                jmp @controll_drum

 000006C2			            @controll_drum:
 000006C2  A1 00000300 R	                mov eax, gameStarted
 000006C7  83 F8 00		                cmp eax, 0
 000006CA  0F 84 000000C1	                je @render_window

 000006D0  FF 35 000002F0 R	                push spawnClock
 000006D6  E8 00000000 E	                call sfClock_getElapsedTime
 000006DB  F3/ 0F 2A C8		                cvtsi2ss xmm1, eax

 000006DF  F3/ 0F 10 05		                movss xmm0, [real_1000000]
	   0000073D R
 000006E7  F3/ 0F 5E C8		                divss xmm1, xmm0

 000006EB  F3/ 0F 11 0D		                movss dword ptr [currentTime], xmm1
	   000002F4 R

 000006F3			spawn_loop:
 000006F3  A1 000002F8 R	    mov eax, currentNoteIndex
 000006F8  8B 1D 000004F0 R	    mov ebx, totalNotes
 000006FE  3B C3		    cmp eax, ebx
 00000700  73 48		    jae check_last_note    ; 如果所有音符都已生成，檢查最後一個音符

 00000702  F3/ 0F 10 05		    movss xmm0, [currentTime]
	   000002F4 R
 0000070A  8B 1D 000002F8 R	    mov ebx, currentNoteIndex
 00000710  C1 E3 02		    shl ebx, 2
 00000713  F3/ 0F 10 8B		    movss xmm1, noteTimings[ebx]
	   000004F4 R
 0000071B  0F 2E C1		    ucomiss xmm0, xmm1
 0000071E  72 6C		    jb loop_end

 00000720  A1 000002F8 R	    mov eax, currentNoteIndex
 00000725  8B 1C 85		    mov ebx, notes[eax*4]
	   0000030C R
 0000072C  83 FB 00		    cmp ebx, 0
 0000072F  74 11		    je skip_spawn

 00000731  83 EC 04		    sub esp, 4
 00000734  F3/ 0F 11 0C 24	    movss dword ptr [esp], xmm1
 00000739  53			    push ebx
 0000073A  E8 FFFFF95B		    call spawnDrum
 0000073F  83 C4 08		    add esp, 8

 00000742			skip_spawn:
 00000742  FF 05 000002F8 R	    inc currentNoteIndex
 00000748  EB A9		    jmp spawn_loop

 0000074A			check_last_note:
				    ; 檢查是否有音符在隊列中
				    ;push music
				    ;call sfMusic_getStatus
				    ;add esp, 4
				    ;cmp eax, sfStopped
				    ;jne @end_game

 0000074A  A1 0000029B R	    mov eax, _size
 0000074F  85 C0		    test eax, eax
 00000751  0F 84 0000014D	    jz @end_game         ; 如果沒有音符且都已生成，結束遊戲

				    ; 檢查最後一個音符的位置
 00000757  8B 3D 00000293 R	    mov edi, front
 0000075D  8B 0D 0000029B R	    mov ecx, _size
 00000763  49			    dec ecx              ; 獲取最後一個音符的索引
 00000764  03 F9		    add edi, ecx
 00000766  83 FF 64		    cmp edi, MAX_DRUMS
 00000769  72 03		    jb no_wrap
 0000076B  83 EF 64		    sub edi, MAX_DRUMS
 0000076E			no_wrap:
 0000076E  8B 34 BD		    mov esi, drumQueue[edi*4]
	   00000103 R
 00000775  FF 36		    push [esi]
 00000777  E8 00000000 E	    call sfSprite_getPosition
 0000077C  83 C4 04		    add esp, 4
				    
				    ; 檢查音符是否已離開畫面
 0000077F  0F 2F 05		    comiss xmm0, real_0   ; 比較 x 位置是否小於 0
	   0000074D R
 00000786  0F 82 00000118	    jb @end_game         ; 如果最後一個音符已離開畫面，結束遊戲

 0000078C			loop_end:
 0000078C  E8 FFFFF9A8		    call updateDrums

 00000791			@render_window:
 00000791  FF 35 000006D8 R	    push blackColor
 00000797  FF 75 08		    push window
 0000079A  E8 00000000 E	    call sfRenderWindow_clear
 0000079F  83 C4 08		    add esp, 8

 000007A2  6A 00		    push 0
 000007A4  A1 000002E4 R	    mov eax, DWORD PTR [bgSprite]
 000007A9  50			    push eax
 000007AA  8B 4D 08		    mov ecx, DWORD PTR [window]
 000007AD  51			    push ecx
 000007AE  E8 00000000 E	    call sfRenderWindow_drawSprite
 000007B3  83 C4 0C		    add esp, 12

 000007B6  A1 0000029B R	    mov eax, _size
 000007BB  85 C0		    test eax, eax
 000007BD  74 44		    jz @display
 000007BF  A3 00000751 R	    mov loop_index, eax
 000007C4  8B 3D 00000293 R	    mov edi, front

 000007CA			draw_notes:
 000007CA  A1 00000751 R	    mov eax, loop_index
 000007CF  83 F8 00		    cmp eax, 0
 000007D2  74 2F		    jz @display

 000007D4  6A 00		    push 0
 000007D6  8B 04 BD		    mov eax, [drumQueue + edi*4]
	   00000103 R
 000007DD  FF 30		    push dword ptr [eax]
 000007DF  8B 4D 08		    mov ecx, DWORD PTR [window]
 000007E2  51			    push ecx
 000007E3  E8 00000000 E	    call sfRenderWindow_drawSprite
 000007E8  83 C4 0C		    add esp, 12

 000007EB  47			    inc edi
 000007EC  83 FF 64		    cmp edi, MAX_DRUMS
 000007EF  75 05		    jne @next_note
 000007F1  BF 00000000		    mov edi, 0

 000007F6			@next_note:
 000007F6  A1 00000751 R	    mov eax, loop_index
 000007FB  48			    dec eax
 000007FC  A3 00000751 R	    mov loop_index, eax
 00000801  EB C7		    jmp draw_notes

 00000803			@display:
 00000803  6A 00		    push 0
 00000805  FF 35 000002E8 R	    push dword ptr [judgementCircle]
 0000080B  FF 75 08		    push DWORD PTR [window]
 0000080E  E8 00000000 E	    call sfRenderWindow_drawCircleShape
 00000813  83 C4 0C		    add esp, 12

 00000816  FF 75 08		    push window
 00000819  E8 00000000 E	    call sfRenderWindow_display
 0000081E  83 C4 04		    add esp, 4

 00000821  E9 FFFFFD53		    jmp @main_loop

 00000826			@end:
 00000826  FF 35 000002EC R	    push music
 0000082C  E8 00000000 E	    call sfMusic_destroy
 00000831  83 C4 04		    add esp, 4

 00000834  FF 35 000002E0 R	    push bgTexture
 0000083A  E8 00000000 E	    call sfTexture_destroy
 0000083F  83 C4 04		    add esp, 4

 00000842  FF 35 000002E4 R	    push bgSprite
 00000848  E8 00000000 E	    call sfSprite_destroy
 0000084D  83 C4 04		    add esp, 4

 00000850  FF 35 000002E8 R	    push judgementCircle
 00000856  E8 00000000 E	    call sfCircleShape_destroy
 0000085B  83 C4 04		    add esp, 4

 0000085E  FF 35 000002D8 R	    push font
 00000864  E8 00000000 E	    call sfFont_destroy
 00000869  83 C4 04		    add esp, 4

 0000086C  FF 35 000002DC R	    push countDownText
 00000872  E8 00000000 E	    call sfText_destroy
 00000877  83 C4 04		    add esp, 4

				    ; 釋放紅色音符音效
 0000087A  FF 35 00000050 R	    push redNoteSound
 00000880  E8 00000000 E	    call sfMusic_destroy
 00000885  83 C4 04		    add esp, 4

				    ; 釋放藍色音符音效
 00000888  FF 35 00000054 R	    push blueNoteSound
 0000088E  E8 00000000 E	    call sfMusic_destroy
 00000893  83 C4 04		    add esp, 4

 00000896  FF 35 000002EC R	    push music
 0000089C  E8 00000000 E	    call sfMusic_destroy
 000008A1  83 C4 04		    add esp, 4

 000008A4			@end_game:
 000008A4  FF 35 000002EC R	    push music
 000008AA  E8 00000000 E	    call sfMusic_stop    ; 停止音樂
 000008AF  83 C4 04		    add esp, 4

 000008B2  FF 35 000000E7 R	    push dword ptr [stats+16]    ; max_combo
 000008B8  FF 35 000000EB R	    push dword ptr [stats+20]    ; total_score
 000008BE  FF 35 000000DF R	    push dword ptr [stats+8]       ; miss_count
 000008C4  FF 35 000000DB R	    push dword ptr [stats+4]     ; good_count
 000008CA  FF 35 000000D7 R	    push dword ptr [stats]     ; great_count
 000008D0  FF 75 08		    push window
 000008D3  E8 00000000 E	    call end_game_page
 000008D8  83 C4 18		    add esp, 24

 000008DB			exit_program:
				    ret

 000008DD			main_game_page ENDP

				END main_game_page
Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/30/24 01:50:30
main_game_page.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Drum . . . . . . . . . . . . . .	 0000000C
  sprite . . . . . . . . . . . .	 00000000	 DWord
  _type  . . . . . . . . . . . .	 00000004	 DWord
  targetTime . . . . . . . . . .	 00000008	 DWord
GameStats  . . . . . . . . . . .	 00000018
  great_count  . . . . . . . . .	 00000000	 DWord
  good_count . . . . . . . . . .	 00000004	 DWord
  miss_count . . . . . . . . . .	 00000008	 DWord
  current_combo  . . . . . . . .	 0000000C	 DWord
  max_combo  . . . . . . . . . .	 00000010	 DWord
  total_score  . . . . . . . . .	 00000014	 DWord
MusicInfo  . . . . . . . . . . .	 00000014
  bpm  . . . . . . . . . . . . .	 00000000	 DWord
  _offset  . . . . . . . . . . .	 00000004	 DWord
  spawnTime  . . . . . . . . . .	 00000008	 DWord
  currentBar . . . . . . . . . .	 0000000C	 DWord
  notesInBar . . . . . . . . . .	 00000010	 DWord
key  . . . . . . . . . . . . . .	 00000014
  code . . . . . . . . . . . . .	 00000000	 DWord
  alt  . . . . . . . . . . . . .	 00000004	 DWord
  control  . . . . . . . . . . .	 00000008	 DWord
  shift  . . . . . . . . . . . .	 0000000C	 DWord
  system . . . . . . . . . . . .	 00000010	 DWord
mouseButton  . . . . . . . . . .	 0000000C
  button . . . . . . . . . . . .	 00000000	 DWord
  x  . . . . . . . . . . . . . .	 00000004	 DWord
  y  . . . . . . . . . . . . . .	 00000008	 DWord
sfColor  . . . . . . . . . . . .	 00000004
  r  . . . . . . . . . . . . . .	 00000000	 Byte
  g  . . . . . . . . . . . . . .	 00000001	 Byte
  b  . . . . . . . . . . . . . .	 00000002	 Byte
  a  . . . . . . . . . . . . . .	 00000003	 Byte
sfEvent  . . . . . . . . . . . .	 00000030
  _type  . . . . . . . . . . . .	 00000000	 DWord
  _size  . . . . . . . . . . . .	 00000004	 DWord
  mouse  . . . . . . . . . . . .	 00000008	 
  _key . . . . . . . . . . . . .	 00000014	 
  mouseMove  . . . . . . . . . .	 00000028	 QWord
sfFloatRect  . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  _width . . . . . . . . . . . .	 00000008	 DWord
  height . . . . . . . . . . . .	 0000000C	 DWord
sfVector2f . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVector2i . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVideoMode  . . . . . . . . . .	 0000000C
  _width . . . . . . . . . . . .	 00000000	 DWord
  height . . . . . . . . . . . .	 00000004	 DWord
  bpp  . . . . . . . . . . . . .	 00000008	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000755 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008DD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@countDown_text  . . . . . . . .	P Near	 000002CA _TEXT	Length= 00000095 Public C
@ld_background . . . . . . . . .	P Near	 00000294 _TEXT	Length= 00000036 Public C
bluenote_sound . . . . . . . . .	P Near	 00000467 _TEXT	Length= 0000001D Public C
createJudgementCircle  . . . . .	P Near	 00000216 _TEXT	Length= 0000007E Public C
dequeue  . . . . . . . . . . . .	P Near	 0000005A _TEXT	Length= 00000040 Public C
  SkipFrontWrap  . . . . . . . .	L Near	 00000092 _TEXT	
  QueueEmpty . . . . . . . . . .	L Near	 00000099 _TEXT	
enqueue  . . . . . . . . . . . .	P Near	 00000017 _TEXT	Length= 00000043 Public C
  @drum  . . . . . . . . . . . .	DWord	 bp + 00000008
  SkipRearWrap . . . . . . . . .	L Near	 0000004F _TEXT	
  @end_enqueue . . . . . . . . .	L Near	 00000055 _TEXT	
initializeSounds . . . . . . . .	P Near	 00000425 _TEXT	Length= 00000025 Public C
isQueueEmpty . . . . . . . . . .	P Near	 0000000C _TEXT	Length= 0000000B Public C
isQueueFull  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000C Public C
main_game_page . . . . . . . . .	P Near	 00000484 _TEXT	Length= 00000459 Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
  musicPath  . . . . . . . . . .	DWord	 bp + 0000000C
  selected_notes . . . . . . . .	DWord	 bp + 00000010
  selected_totalNotes  . . . . .	DWord	 bp + 00000014
  selected_notesTiming . . . . .	DWord	 bp + 00000018
  selected_msInfo  . . . . . . .	DWord	 bp + 0000001C
  @main_loop . . . . . . . . . .	L Near	 00000579 _TEXT	
  check_game_start . . . . . . .	L Near	 000005B4 _TEXT	
  deter_offset . . . . . . . . .	L Near	 00000618 _TEXT	
  @event_loop  . . . . . . . . .	L Near	 00000665 _TEXT	
  @check_key_press . . . . . . .	L Near	 0000068C _TEXT	
  @handle_red  . . . . . . . . .	L Near	 000006A6 _TEXT	
  @handle_blue . . . . . . . . .	L Near	 000006B4 _TEXT	
  @controll_drum . . . . . . . .	L Near	 000006C2 _TEXT	
  spawn_loop . . . . . . . . . .	L Near	 000006F3 _TEXT	
  skip_spawn . . . . . . . . . .	L Near	 00000742 _TEXT	
  check_last_note  . . . . . . .	L Near	 0000074A _TEXT	
  no_wrap  . . . . . . . . . . .	L Near	 0000076E _TEXT	
  loop_end . . . . . . . . . . .	L Near	 0000078C _TEXT	
  @render_window . . . . . . . .	L Near	 00000791 _TEXT	
  draw_notes . . . . . . . . . .	L Near	 000007CA _TEXT	
  @next_note . . . . . . . . . .	L Near	 000007F6 _TEXT	
  @display . . . . . . . . . . .	L Near	 00000803 _TEXT	
  @end . . . . . . . . . . . . .	L Near	 00000826 _TEXT	
  @end_game  . . . . . . . . . .	L Near	 000008A4 _TEXT	
  exit_program . . . . . . . . .	L Near	 000008DB _TEXT	
processHit . . . . . . . . . . .	P Near	 0000035F _TEXT	Length= 000000C6 Public C
  hitType  . . . . . . . . . . .	DWord	 bp + 00000008
  delta  . . . . . . . . . . . .	DWord	 bp - 00000004
  @great_hit . . . . . . . . . .	L Near	 000003CF _TEXT	
  @good_hit  . . . . . . . . . .	L Near	 000003F5 _TEXT	
  @remove_note . . . . . . . . .	L Near	 00000419 _TEXT	
  @done_processing . . . . . . .	L Near	 0000041E _TEXT	
rednote_sound  . . . . . . . . .	P Near	 0000044A _TEXT	Length= 0000001D Public C
spawnDrum  . . . . . . . . . . .	P Near	 0000009A _TEXT	Length= 0000009F Public C
  _type  . . . . . . . . . . . .	DWord	 bp + 00000008
  targetTime . . . . . . . . . .	DWord	 bp + 0000000C
  SetBlueTexture . . . . . . . .	L Near	 000000EE _TEXT	
  DoneTexture  . . . . . . . . .	L Near	 00000100 _TEXT	
  QueueFullSpawn . . . . . . . .	L Near	 00000135 _TEXT	
updateDrums  . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 000000DD Public C
  i  . . . . . . . . . . . . . .	DWord	 bp - 00000004
  SkipFrontWrap2 . . . . . . . .	L Near	 000001B5 _TEXT	
  SkipFrontRemoval . . . . . . .	L Near	 000001BB _TEXT	
  UpdateLoop . . . . . . . . . .	L Near	 000001C9 _TEXT	
  NoWrap . . . . . . . . . . . .	L Near	 00000208 _TEXT	
  EndUpdateLoop  . . . . . . . .	L Near	 00000211 _TEXT	
  SkipUpdate . . . . . . . . . .	L Near	 00000211 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
GOOD_THRESHOLD . . . . . . . . .	Number	 0000001Eh   
GREAT_THRESHOLD  . . . . . . . .	Number	 00000004h   
HIT_POSITION_X . . . . . . . . .	Number	 000001C2h   
INITIAL_DELAY  . . . . . . . . .	Number	 00000003h   
MAX_DRUMS  . . . . . . . . . . .	Number	 00000064h   
MAX_LINE_LENGTH  . . . . . . . .	Number	 000003E8h   
MAX_NOTES  . . . . . . . . . . .	Number	 00002710h   
SCREEN_HEIGHT  . . . . . . . . .	Number	 000002D0h   
SCREEN_WIDTH . . . . . . . . . .	Number	 00000500h   
_size  . . . . . . . . . . . . .	DWord	 0000029B _DATA	
abs_mask . . . . . . . . . . . .	DWord	 00000000 _DATA	
bgPath . . . . . . . . . . . . .	Byte	 00000058 _DATA	
bgSprite . . . . . . . . . . . .	DWord	 000002E4 _DATA	
bgTexture  . . . . . . . . . . .	DWord	 000002E0 _DATA	
blackColor . . . . . . . . . . .	sfColor	 000006D8 _DATA	
blueDrumTexture  . . . . . . . .	DWord	 000002A3 _DATA	
blueNotePath . . . . . . . . . .	Byte	 0000008C _DATA	
blueNoteSound  . . . . . . . . .	DWord	 00000054 _DATA	
blue_note_sound_path . . . . . .	Byte	 000000BE _DATA	
consoleHandle  . . . . . . . . .	DWord	 0000001C _DATA	
countDownText  . . . . . . . . .	DWord	 000002DC _DATA	
currentNoteIndex . . . . . . . .	DWord	 000002F8 _DATA	
currentPage  . . . . . . . . . .	DWord	 00000000 FLAT	External C
currentTime  . . . . . . . . . .	DWord	 000002F4 _DATA	
decimal_mult . . . . . . . . . .	QWord	 00000701 _DATA	
delay_clock  . . . . . . . . . .	DWord	 00000018 _DATA	
delay_started  . . . . . . . . .	DWord	 00000014 _DATA	
drumQueue  . . . . . . . . . . .	DWord	 00000103 _DATA	
drumStep . . . . . . . . . . . .	DWord	 00000308 _DATA	
end_game_page  . . . . . . . . .	L Near	 00000000 FLAT	External C
event  . . . . . . . . . . . . .	sfEvent	 00000020 _DATA	
font_path  . . . . . . . . . . .	Byte	 000002A7 _DATA	
font . . . . . . . . . . . . . .	DWord	 000002D8 _DATA	
front  . . . . . . . . . . . . .	DWord	 00000293 _DATA	
gameStartTime  . . . . . . . . .	DWord	 000002FC _DATA	
gameStarted  . . . . . . . . . .	DWord	 00000300 _DATA	
getBpm . . . . . . . . . . . . .	Byte	 000006E4 _DATA	
getOffset  . . . . . . . . . . .	Byte	 000006EB _DATA	
initial_delay_1  . . . . . . . .	DWord	 00000010 _DATA	
judgementCircle  . . . . . . . .	DWord	 000002E8 _DATA	
loop_index . . . . . . . . . . .	DWord	 00000751 _DATA	
malloc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
msInfo . . . . . . . . . . . . .	MusicInfo  000000EF _DATA	
music  . . . . . . . . . . . . .	DWord	 000002EC _DATA	
noteSpawnInterval  . . . . . . .	DWord	 00000304 _DATA	
noteTimings  . . . . . . . . . .	DWord	 000004F4 _DATA	
notes  . . . . . . . . . . . . .	DWord	 0000030C _DATA	
real_0 . . . . . . . . . . . . .	DWord	 0000074D _DATA	
real_1000000 . . . . . . . . . .	DWord	 0000073D _DATA	
real_1280  . . . . . . . . . . .	DWord	 00000739 _DATA	
real_15  . . . . . . . . . . . .	DWord	 00000715 _DATA	
real_200 . . . . . . . . . . . .	DWord	 00000729 _DATA	
real_225 . . . . . . . . . . . .	DWord	 0000072D _DATA	
real_2 . . . . . . . . . . . . .	DWord	 00000711 _DATA	
real_30  . . . . . . . . . . . .	DWord	 00000719 _DATA	
real_32  . . . . . . . . . . . .	DWord	 0000071D _DATA	
real_365 . . . . . . . . . . . .	DWord	 00000749 _DATA	
real_450 . . . . . . . . . . . .	DWord	 00000731 _DATA	
real_46  . . . . . . . . . . . .	DWord	 00000721 _DATA	
real_4 . . . . . . . . . . . . .	DWord	 000006F9 _DATA	
real_60000 . . . . . . . . . . .	DWord	 000006FD _DATA	
real_60  . . . . . . . . . . . .	DWord	 000006F5 _DATA	
real_64  . . . . . . . . . . . .	DWord	 00000725 _DATA	
real_720 . . . . . . . . . . . .	DWord	 00000735 _DATA	
real_good_threshold  . . . . . .	DWord	 00000741 _DATA	
real_great_threshold . . . . . .	DWord	 00000745 _DATA	
rear . . . . . . . . . . . . . .	DWord	 00000297 _DATA	
redDrumTexture . . . . . . . . .	DWord	 0000029F _DATA	
redNotePath  . . . . . . . . . .	Byte	 00000073 _DATA	
redNoteSound . . . . . . . . . .	DWord	 00000050 _DATA	
red_note_sound_path  . . . . . .	Byte	 000000A6 _DATA	
sfCircleShape_create . . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_destroy  . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setFillColor . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineColor  .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineThickness 	L Near	 00000000 FLAT	External C
sfCircleShape_setPosition  . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setRadius  . . . .	L Near	 00000000 FLAT	External C
sfClock_create . . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_getElapsedTime . . . . .	L Near	 00000000 FLAT	External C
sfClock_restart  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClose  . . . . . . . . . . . .	Number	 00000004h   
sfColor_fromRGBA . . . . . . . .	L Near	 00000000 FLAT	External C
sfColor_fromRGB  . . . . . . . .	L Near	 00000000 FLAT	External C
sfEvtClosed  . . . . . . . . . .	Number	 00000000h   
sfEvtGainedFocus . . . . . . . .	Number	 00000003h   
sfEvtKeyPressed  . . . . . . . .	Number	 00000005h   
sfEvtKeyReleased . . . . . . . .	Number	 00000006h   
sfEvtLostFocus . . . . . . . . .	Number	 00000002h   
sfEvtMouseButtonPressed  . . . .	Number	 00000009h   
sfEvtMouseButtonReleased . . . .	Number	 0000000Ah   
sfEvtMouseEntered  . . . . . . .	Number	 0000000Ch   
sfEvtMouseLeft . . . . . . . . .	Number	 0000000Dh   
sfEvtMouseMoved  . . . . . . . .	Number	 0000000Bh   
sfEvtMouseWheelMoved . . . . . .	Number	 00000007h   
sfEvtMouseWheelScrolled  . . . .	Number	 00000008h   
sfEvtResized . . . . . . . . . .	Number	 00000001h   
sfEvtTextEntered . . . . . . . .	Number	 00000004h   
sfFalse  . . . . . . . . . . . .	Number	 00000000h   
sfFont_createFromFile  . . . . .	L Near	 00000000 FLAT	External C
sfFont_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfFullscreen . . . . . . . . . .	Number	 00000008h   
sfKeyA . . . . . . . . . . . . .	Number	 00000000h   
sfKeyD . . . . . . . . . . . . .	Number	 00000003h   
sfKeyEnter . . . . . . . . . . .	Number	 0000003Ah   
sfKeyEscape  . . . . . . . . . .	Number	 00000024h   
sfKeyF . . . . . . . . . . . . .	Number	 00000005h   
sfKeyJ . . . . . . . . . . . . .	Number	 00000009h   
sfKeyK . . . . . . . . . . . . .	Number	 0000000Ah   
sfKeyS . . . . . . . . . . . . .	Number	 00000012h   
sfMouseLeft  . . . . . . . . . .	Number	 00000000h   
sfMouseMiddle  . . . . . . . . .	Number	 00000002h   
sfMouseRight . . . . . . . . . .	Number	 00000001h   
sfMusic_createFromFile . . . . .	L Near	 00000000 FLAT	External C
sfMusic_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_getStatus  . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_play . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_setLoop  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_stop . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfNone . . . . . . . . . . . . .	Number	 00000000h   
sfPaused . . . . . . . . . . . .	Number	 00000001h   
sfPlaying  . . . . . . . . . . .	Number	 00000002h   
sfRectangleShape_create  . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_destroy . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setFillColor  .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineColor .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineThickness .	L Near	 00000000 FLAT	External C
sfRectangleShape_setPosition . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setSize . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_clear . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_close . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_create  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_destroy . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_display . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawCircleShape .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawRectangleShape 	L Near	 00000000 FLAT	External C
sfRenderWindow_drawSprite  . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawText  . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_isOpen  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_pollEvent . . . .	L Near	 00000000 FLAT	External C
sfResize . . . . . . . . . . . .	Number	 00000002h   
sfSleep  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_create  . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_destroy . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_getPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setTexture  . . . . . .	L Near	 00000000 FLAT	External C
sfStopped  . . . . . . . . . . .	Number	 00000000h   
sfText_create  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_getGlobalBounds . . . . .	L Near	 00000000 FLAT	External C
sfText_getLocalBounds  . . . . .	L Near	 00000000 FLAT	External C
sfText_setCharacterSize  . . . .	L Near	 00000000 FLAT	External C
sfText_setFillColor  . . . . . .	L Near	 00000000 FLAT	External C
sfText_setFont . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineColor . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineThickness . . .	L Near	 00000000 FLAT	External C
sfText_setPosition . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setString . . . . . . . .	L Near	 00000000 FLAT	External C
sfTexture_createFromFile . . . .	L Near	 00000000 FLAT	External C
sfTexture_destroy  . . . . . . .	L Near	 00000000 FLAT	External C
sfTitlebar . . . . . . . . . . .	Number	 00000001h   
sfTrue . . . . . . . . . . . . .	Number	 00000001h   
sfWindow_setFramerateLimit . . .	L Near	 00000000 FLAT	External C
spawnClock . . . . . . . . . . .	DWord	 000002F0 _DATA	
stats  . . . . . . . . . . . . .	GameStats  000000D7 _DATA	
ten  . . . . . . . . . . . . . .	QWord	 00000709 _DATA	
totalNotes . . . . . . . . . . .	DWord	 000004F0 _DATA	
transparentColor . . . . . . . .	sfColor	 000006E0 _DATA	
white_color  . . . . . . . . . .	sfColor	 000006DC _DATA	

	   1 Warnings
	   0 Errors
