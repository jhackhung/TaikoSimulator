Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/22/24 22:47:42
main_game_page.asm					     Page 1 - 1


				.686P
				.XMM
				.model flat, c
				include csfml.inc
			      C ; CSFML.INC - SFML Definitions for x86 Assembly
			      C ; 使用 MASM 語法
			      C 
			      C includelib csfml-audio.lib
			      C includelib csfml-graphics.lib
			      C includelib csfml-system.lib
			      C includelib csfml-window.lib
			      C 
			      C ; sfBool 定義
 = 00000000		      C sfFalse     equ 0
 = 00000001		      C sfTrue      equ 1
			      C 
			      C ; sfMusic status
 = 00000000		      C sfStopped   equ 0
 = 00000001		      C sfPaused    equ 1
 = 00000002		      C sfPlaying   equ 2
			      C 
			      C 
			      C ; sfEventType 定義
 = 00000000		      C sfEvtClosed               equ 0
 = 00000001		      C sfEvtResized              equ 1
 = 00000002		      C sfEvtLostFocus            equ 2
 = 00000003		      C sfEvtGainedFocus          equ 3
 = 00000004		      C sfEvtTextEntered          equ 4
 = 00000005		      C sfEvtKeyPressed           equ 5
 = 00000006		      C sfEvtKeyReleased          equ 6
 = 00000007		      C sfEvtMouseWheelMoved      equ 7
 = 00000008		      C sfEvtMouseWheelScrolled   equ 8
 = 00000009		      C sfEvtMouseButtonPressed   equ 9
 = 0000000A		      C sfEvtMouseButtonReleased  equ 10
 = 0000000B		      C sfEvtMouseMoved           equ 11
 = 0000000C		      C sfEvtMouseEntered         equ 12
 = 0000000D		      C sfEvtMouseLeft            equ 13
			      C 
			      C ; sfMouseButton 定義
 = 00000000		      C sfMouseLeft   equ 0
 = 00000001		      C sfMouseRight  equ 1
 = 00000002		      C sfMouseMiddle equ 2
			      C 
			      C ; sfKey 定義
 = 0000003A		      C sfKeyEnter    equ 58
 = 00000000		      C sfKeyA        equ 0
 = 00000012		      C sfKeyS        equ 18
 = 00000003		      C sfKeyD        equ 3
 = 00000024		      C sfKeyEscape   equ 36
 = 00000005		      C sfKeyF        equ 5
 = 00000009		      C sfKeyJ        equ 9
 = 0000000A		      C sfKeyK        equ 10
			      C 
			      C ; 視窗風格定義
 = 00000000		      C sfNone       equ 0
 = 00000001		      C sfTitlebar   equ 1
 = 00000002		      C sfResize     equ 2
 = 00000004		      C sfClose      equ 4
 = 00000008		      C sfFullscreen equ 8
			      C 
			      C ; 結構體定義
 00000008		      C sfVector2f STRUCT
 00000000  00000000	      C     x REAL4 ?
 00000004  00000000	      C     y REAL4 ?
			      C sfVector2f ENDS
			      C 
 00000008		      C sfVector2i STRUCT
 00000000  00000000	      C     x SDWORD ?
 00000004  00000000	      C     y SDWORD ?
			      C sfVector2i ENDS
			      C 
 0000000C		      C sfVideoMode STRUCT
 00000000  00000000	      C     _width  DWORD ?
 00000004  00000000	      C     height DWORD ?
 00000008  00000000	      C     bpp    DWORD ?
			      C sfVideoMode ENDS
			      C 
 00000004		      C sfColor STRUCT
 00000000  00		      C     r BYTE ?
 00000001  00		      C     g BYTE ?
 00000002  00		      C     b BYTE ?
 00000003  00		      C     a BYTE ?
			      C sfColor ENDS
			      C 
 00000010		      C sfFloatRect STRUCT
 00000000  00000000	      C     left   REAL4 ?
 00000004  00000000	      C     top    REAL4 ?
 00000008  00000000	      C     _width  REAL4 ?
 0000000C  00000000	      C     height REAL4 ?
			      C sfFloatRect ENDS
			      C 
 0000000C		      C mouseButton STRUCT
 00000000  00000000	      C     button DWORD ?
 00000004  00000000	      C     x DWORD ?
 00000008  00000000	      C     y DWORD ?
			      C mouseButton ENDS
			      C 
 00000014		      C key STRUCT
 00000000  00000000	      C     code DWORD ?
 00000004  00000000	      C     alt DWORD ?
 00000008  00000000	      C     control DWORD ?
 0000000C  00000000	      C     shift DWORD ?
 00000010  00000000	      C     system DWORD ?
			      C key ENDS
			      C 
 00000030		      C sfEvent STRUCT
 00000000  00000000	      C     _type DWORD ?                
 00000004  00000000	      C     _size DWORD ?                
 00000008  00000000	      C     mouse mouseButton <>       
	   00000000
	   00000000
 00000014  00000000	      C     _key key <>                 
	   00000000
	   00000000
	   00000000
	   00000000
 00000028  00000000	      C     mouseMove sfVector2i <>     
	   00000000
			      C sfEvent ENDS
			      C 
			      C ; 函數原型 - 視窗相關
			      C EXTERN sfRenderWindow_create:PROC
			      C EXTERN sfRenderWindow_destroy:PROC
			      C EXTERN sfRenderWindow_close:PROC
			      C EXTERN sfRenderWindow_isOpen:PROC
			      C EXTERN sfRenderWindow_clear:PROC
			      C EXTERN sfRenderWindow_display:PROC
			      C EXTERN sfRenderWindow_pollEvent:PROC
			      C EXTERN sfRenderWindow_drawSprite:PROC
			      C EXTERN sfRenderWindow_drawText:PROC
			      C 
			      C EXTERN sfWindow_setFramerateLimit:PROC
			      C 
			      C ; 函數原型 - 紋理相關
			      C EXTERN sfTexture_createFromFile:PROC
			      C EXTERN sfTexture_destroy:PROC
			      C 
			      C ; 函數原型 - 精靈相關
			      C EXTERN sfSprite_create:PROC
			      C EXTERN sfSprite_destroy:PROC
			      C EXTERN sfSprite_setTexture:PROC
			      C EXTERN sfSprite_setPosition:PROC
			      C EXTERN sfSprite_getPosition:PROC
			      C 
			      C ; 函數原型 - 音樂相關
			      C EXTERN sfMusic_createFromFile:PROC
			      C EXTERN sfMusic_destroy:PROC
			      C EXTERN sfMusic_play:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C EXTERN sfMusic_stop: PROC
			      C EXTERN sfMusic_getStatus: PROC
			      C 
			      C ; 函數原型 - 文字相關
			      C EXTERN sfFont_createFromFile:PROC
			      C EXTERN sfFont_destroy:PROC
			      C EXTERN sfText_create:PROC
			      C EXTERN sfText_destroy:PROC
			      C EXTERN sfText_setFont:PROC
			      C EXTERN sfText_setString:PROC
			      C EXTERN sfText_setCharacterSize:PROC
			      C EXTERN sfText_setFillColor:PROC
			      C EXTERN sfText_setOutlineColor:PROC
			      C EXTERN sfText_setOutlineThickness:PROC
			      C EXTERN sfText_getLocalBounds:PROC
			      C EXTERN sfText_getGlobalBounds:PROC
			      C EXTERN sfText_setPosition:PROC
			      C 
			      C ; 函數原型 - 顏色相關
			      C EXTERN sfColor_fromRGB:PROC
			      C EXTERN sfColor_fromRGBA:PROC
			      C 
			      C ; 函數原型 - 圓形相關
			      C EXTERN sfCircleShape_create: PROC
			      C EXTERN sfCircleShape_setPosition: PROC
			      C EXTERN sfCircleShape_setRadius: PROC
			      C EXTERN sfCircleShape_setFillColor: PROC
			      C EXTERN sfRenderWindow_drawCircleShape: PROC
			      C EXTERN sfCircleShape_destroy: PROC
			      C EXTERN sfCircleShape_setOutlineThickness: PROC
			      C EXTERN sfCircleShape_setOutlineColor: PROC
			      C 
			      C ; 函數原型 - 矩形相關
			      C EXTERN sfRectangleShape_create: PROC
			      C EXTERN sfRectangleShape_setPosition: PROC
			      C EXTERN sfRectangleShape_setSize: PROC
			      C EXTERN sfRectangleShape_setFillColor: PROC
			      C EXTERN sfRectangleShape_setOutlineThickness: PROC
			      C EXTERN sfRenderWindow_drawRectangleShape: PROC
			      C EXTERN sfRectangleShape_destroy: PROC
			      C EXTERN sfRectangleShape_setOutlineColor: PROC
			      C 
			      C EXTERN sfSleep: PROC
			      C EXTERN sfClock_create: PROC
			      C EXTERN sfClock_getElapsedTime: PROC
			      C EXTERN sfClock_restart: PROC
			      C 
				include file.inc
			      C includelib ucrt.lib
			      C includelib kernel32.lib
			      C 
			      C 
 0000000C		      C Drum struct
 00000000  00000000	      C 	sprite dword ?
 00000004  00000000	      C 	_type dword ?
 00000008  00000000	      C 	targetTime real4 ?
			      C Drum ends
			      C 
 00000018		      C GameStats struct
 00000000  00000000	      C 	great_count dword ?
 00000004  00000000	      C 	good_count dword ?
 00000008  00000000	      C 	miss_count dword ?
 0000000C  00000000	      C 	current_combo dword ?
 00000010  00000000	      C 	max_combo dword ?
 00000014  00000000	      C 	total_score dword ?
			      C GameStats ends
			      C 
 00000014		      C MusicInfo struct
 00000000  00000000	      C 	bpm real4 ?
 00000004  00000000	      C 	_offset real4 ?
 00000008  00000000	      C 	spawnTime real4 ?
 0000000C  00000000	      C 	currentBar dword ?
 00000010  00000000	      C 	notesInBar dword ?
			      C MusicInfo ends
			      C 
			      C extern malloc:proc
			      C extern fopen:proc
			      C extern fclose:proc
			      C extern fgets:proc
			      C 
			      C 
			      C ; string
			      C 
			      C extern strcspn:proc
			      C extern strncmp:proc
			      C ;extern __imp____stdio_common_vsscanf:proc
			      C extern strtok_s:proc
			      C extern strlen:proc
			      C 
				includelib kernel32.lib

				extern GetStdHandle@4: PROC
				extern WriteConsoleA@20:PROC
 =-0000000B			STD_OUTPUT_HANDLE EQU -11

				extern end_game_page: PROC
				extern currentPage: DWORD

				; Constants
 = 00002710			MAX_NOTES = 10000
 = 000003E8			MAX_LINE_LENGTH = 1000
 = 00000500			SCREEN_WIDTH = 1280
 = 000002D0			SCREEN_HEIGHT = 720
 = 00000064			MAX_DRUMS = 100
 = 000001C2			HIT_POSITION_X = 450
 = 00000004			GREAT_THRESHOLD = 4
 = 0000001E			GOOD_THRESHOLD = 30
 = 00000003			INITIAL_DELAY = 3

 00000000			.data
 00000000 00000000			consoleHandle dd ?
 00000004 00000000			event sfEvent <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000

 00000034 61 73 73 65 74		chart db "assets/game/yoasobi.txt", 0
	   73 2F 67 61 6D
	   65 2F 79 6F 61
	   73 6F 62 69 2E
	   74 78 74 00
 0000004C 61 73 73 65 74		bgPath db "assets/game/bg_genre_2.png", 0
	   73 2F 67 61 6D
	   65 2F 62 67 5F
	   67 65 6E 72 65
	   5F 32 2E 70 6E
	   67 00
 00000067 61 73 73 65 74		redNotePath db "assets/game/red_note.png", 0
	   73 2F 67 61 6D
	   65 2F 72 65 64
	   5F 6E 6F 74 65
	   2E 70 6E 67 00
 00000080 61 73 73 65 74		blueNotePath db "assets/game/blue_note.png", 0
	   73 2F 67 61 6D
	   65 2F 62 6C 75
	   65 5F 6E 6F 74
	   65 2E 70 6E 67
	   00

 0000009A 00000000			stats GameStats <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 000000B2 43020000			msInfo MusicInfo <130.000000, -1.962000, 115.384613>
	   BFFB22D1
	   42E6C4EC
	   00000000
	   00000000

					; queue for drums
 000000C6				drumQueue dword MAX_DRUMS dup(?) ; 存放Drum結構指針
 00000256 00000000			front dword 0
 0000025A 00000000			rear dword 0
 0000025E 00000000			_size dword 0

					; texture
 00000262 00000000			redDrumTexture dword ?
 00000266 00000000			blueDrumTexture dword ?

 0000026A 61 73 73 65 74		font_path db "assets/fonts/arial.ttf", 0
	   73 2F 66 6F 6E
	   74 73 2F 61 72
	   69 61 6C 2E 74
	   74 66 00
 00000281 00000000			font dd 0

					; text
 00000285 00000000			countDownText dword ?

					; background
 00000289 00000000			bgTexture dword ?
 0000028D 00000000			bgSprite dword ?

					; judgement circle
 00000291 00000000			judgmentCircle dword ?
					
					; music
 00000295 00000000			music dword ?

					; clock
 00000299 00000000			spawnClock dword 0

 0000029D 00000000			currentTime real4 0.0

 000002A1 00000000			currentNoteIndex dd 0
 000002A5 40400000			gameStartTime real4 3.0
 000002A9 00000000			gameStarted dword 0

					; note chart
 000002AD 00000001			notes dword 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
 00000309 00000017			totalNotes dword 23
 0000030D 00000000			noteSpawnInterval real4 0.0
 00000311 00000000			noteTimings real4 0.000000, 0.923077, 1.846154, 2.769229, 3.653842, 7.384611, 8.307688, 9.230764, 10.153841, 11.076918, 12.884617, 14.769233, 15.692309, 16.615387, 17.538464, 18.461540, 19.384617, 20.307693, 22.153847, 23.076923, 24.000000, 24.923077, 25.846153
	   3F6C4EC6
	   3FEC4EC6
	   40313B0C
	   4069D88C
	   40EC4EBC
	   4104EC4A
	   4113B136
	   41227622
	   41313B0E
	   414E2764
	   416C4EC7
	   417B13B3
	   4184EC50
	   418C4EC6
	   4193B13C
	   419B13B2
	   41A27628
	   41B13B14
	   41B89D8A
	   41C00000
	   41C76276
	   41CEC4EC
 0000036D 40EFC71D			drumStep real4 7.493056

					; color
 00000371 00 00 00 FF			blackColor sfColor <0, 0, 0, 255>
 00000375 00 00 00 96			transparentColor sfColor <0, 0, 0, 150>

					; file
 00000379 72 00				readA byte "r", 0

					; 字串常量
 0000037B 42 50 4D 3A 00		str_bpm db "BPM:", 0
 00000380 4F 46 46 53 45		str_offset db "OFFSET:", 0
	   54 3A 00
 00000388 23 53 54 41 52		str_start db "#START", 0
	   54 00
 0000038F 23 45 4E 44 00		str_end db "#END", 0
 00000394 2C 00				comma db ",", 0
 00000396 5C 6E 00			breakline db "\n", 0
					;format db "%", 0

 00000399 42 50 4D 3A 25		getBpm db "BPM:%f", 0
	   66 00
 000003A0 4F 46 46 53 45		getOffset db "OFFSET:%f", 0
	   54 3A 25 66 00

 000003AA 42700000			real_60 real4 60.0
 000003AE 40800000			real_4 real4 4.0
 000003B2 476A6000			real_60000 real4 60000.0
 000003B6				decimal_mult  dq 0.1                  ; 小數位數乘數
	   3FB999999999999A
 000003BE			    ten           dq 10.0                 ; 用於乘法運算
	   4024000000000000
 000003C6 40000000			real_2 real4 2.0
 000003CA 42000000			real_32 real4 32.0
 000003CE 44340000			real_720 real4 720.0
 000003D2 44A00000			real_1280 real4 1280.0
 000003D6 49742400			real_1000000 real4 1000000.0
 000003DA 41F00000		    real_good_threshold real4 30.0
 000003DE 40800000		    real_great_threshold real4 4.0

 00000000			.code

 00000000			readNoteChart PROC


 00000000			readNoteChart ENDP

 00000000			isQueueFull PROC
 00000000  A1 0000025E R	    mov eax, _size
 00000005  83 F8 64		    cmp eax, MAX_DRUMS
 00000008  0F 94 C0		    sete al                ; 如果滿了，設置返回值為1
 0000000B  C3			    ret
 0000000C			isQueueFull ENDP

 0000000C			isQueueEmpty PROC
 0000000C  A1 0000025E R	    mov eax, _size
 00000011  85 C0		    test eax, eax
 00000013  0F 94 C0		    sete al                ; 如果空，設置返回值為1
 00000016  C3			    ret
 00000017			isQueueEmpty ENDP

 00000017			enqueue PROC USES edi esi ebx @drum:DWORD 
				    ; 檢查是否滿了
 0000001D  E8 FFFFFFDE		    call isQueueFull
 00000022  84 C0		    test al, al
 00000024  75 2F		    jnz @end_enqueue

				    ; 加入隊列
 00000026  8B 75 08		    mov esi, @drum          ; drum參數
 00000029  8B 3D 0000025A R	    mov edi, rear          ; rear索引
 0000002F  89 34 BD		    mov drumQueue[edi*4], esi ; 將drum加入隊列
	   000000C6 R

				    ; 更新rear和size
 00000036  FF 05 0000025A R	    inc rear
 0000003C  83 3D 0000025A R	    cmp rear, MAX_DRUMS
	   64
 00000043  72 0A		    jb SkipRearWrap
 00000045  C7 05 0000025A R	    mov rear, 0
	   00000000
 0000004F				SkipRearWrap:
 0000004F  FF 05 0000025E R			inc _size
 00000055				@end_enqueue:
						ret
 0000005A			enqueue ENDP

 0000005A			dequeue PROC
				    ; 檢查是否空了
 0000005A  E8 FFFFFFAD		    call isQueueEmpty
 0000005F  84 C0		    test al, al
 00000061  75 36		    jnz QueueEmpty

				    ; 刪除隊列頭
 00000063  8B 3D 00000256 R	    mov edi, front          ; front索引
 00000069  8B 34 BD		    mov esi, drumQueue[edi*4] ; 獲取隊列頭的drum指針
	   000000C6 R
 00000070  56			    push esi
 00000071  E8 00000000 E	    call sfSprite_destroy   ; 釋放sprite
 00000076  83 C4 04		    add esp, 4

				    ; 更新front和size
 00000079  FF 05 00000256 R	    inc front
 0000007F  83 3D 00000256 R	    cmp front, MAX_DRUMS
	   64
 00000086  72 0A		    jb SkipFrontWrap
 00000088  C7 05 00000256 R	    mov front, 0
	   00000000
 00000092			SkipFrontWrap:
 00000092  FF 0D 0000025E R	    dec _size
 00000098  C3			    ret

 00000099			QueueEmpty:
 00000099  C3			    ret
 0000009A			dequeue ENDP

 0000009A			spawnDrum PROC USES esi edi _type:DWORD, targetTime:REAL4
				    ; 檢查是否滿了
 0000009F  E8 FFFFFF5C		    call isQueueFull
 000000A4  84 C0		    test al, al
 000000A6  75 73		    jnz QueueFullSpawn

				    ; 創建新的Drum結構
 000000A8  6A 0C		    push 12                ; 分配空間
 000000AA  E8 00000000 E	    call malloc
 000000AF  83 C4 04		    add esp, 4
 000000B2  8B F0		    mov esi, eax           ; 保存新結構指針

				    ; 初始化Drum結構
 000000B4  6A 00			push 0
 000000B6  E8 00000000 E	    call sfSprite_create
 000000BB  83 C4 04		    add esp, 4
 000000BE  89 06		    mov [esi], eax       ; sprite指針

 000000C0  8B 45 08			mov eax, _type
 000000C3  89 46 04		    mov dword ptr [esi+4], eax
 000000C6  F3/ 0F 10 45		    movss xmm0, targetTime
	   0C
 000000CB  F3/ 0F 11 46		    movss dword ptr [esi+8], xmm0
	   08
				    

				    ; 設置音符的紋理
 000000D0  83 7D 08 01		    cmp _type, 1
 000000D4  75 13		    jne SetBlueTexture
 000000D6  6A 01		    push sfTrue
 000000D8  68 00000262 R	    push OFFSET redDrumTexture
 000000DD  FF 36		    push [esi]
 000000DF  E8 00000000 E	    call sfSprite_setTexture
 000000E4  83 C4 0C		    add esp, 12
 000000E7  EB 11		    jmp DoneTexture
 000000E9			SetBlueTexture:
 000000E9  6A 01		    push sfTrue
 000000EB  68 00000266 R	    push OFFSET blueDrumTexture
 000000F0  FF 36		    push [esi]
 000000F2  E8 00000000 E	    call sfSprite_setTexture
 000000F7  83 C4 0C		    add esp, 12
 000000FA			DoneTexture:

				    ; 設置初始位置
 000000FA  68 000000C8		    push 200
 000000FF  68 00000500		    push SCREEN_WIDTH
 00000104  FF 36		    push [esi]
 00000106  E8 00000000 E	    call sfSprite_setPosition
 0000010B  83 C4 0C		    add esp, 12

				    ; 將Drum加入隊列
 0000010E  56			    push esi
 0000010F  E8 FFFFFF03		    call enqueue
 00000114  83 C4 04		    add esp, 4
				    ret

 0000011B			QueueFullSpawn:
				    ret
 0000011F			spawnDrum ENDP

 0000011F			updateDrums PROC USES esi edi ebx
				    ; 檢查並移除過時的音符
 00000122  A1 0000025E R	    mov eax, _size
 00000127  85 C0		    test eax, eax
 00000129  0F 84 00000092	    jz SkipUpdate

 0000012F  8B 3D 00000256 R	    mov edi, front
 00000135  8B 34 BD		    mov esi, drumQueue[edi*4]
	   000000C6 R
 0000013C  FF 36		    push [esi]            ; drum.sprite
 0000013E  E8 00000000 E	    call sfSprite_getPosition
 00000143  83 C4 04		    add esp, 4
 00000146  8B D8		    mov ebx, eax            ; 保存X座標
 00000148  81 EB 000001C2	    sub ebx, HIT_POSITION_X
 0000014E  83 EB 55		    sub ebx, 85
 00000151  83 FB 00		    cmp ebx, 0
 00000154  7D 29		    jnl SkipFrontRemoval

				    ; 移除過時音符
 00000156  FF 36		    push [esi]
 00000158  E8 00000000 E	    call sfSprite_destroy
 0000015D  83 C4 04		    add esp, 4
 00000160  FF 05 00000256 R	    inc front
 00000166  83 3D 00000256 R	    cmp front, MAX_DRUMS
	   64
 0000016D  72 0A		    jb SkipFrontWrap2
 0000016F  C7 05 00000256 R	    mov front, 0
	   00000000
 00000179			SkipFrontWrap2:
 00000179  FF 0D 0000025E R	    dec _size
 0000017F			SkipFrontRemoval:

				    ; 更新音符位置
 0000017F  8B 0D 0000025E R	    mov ecx, _size
 00000185  8B 3D 00000256 R	    mov edi, front
 0000018B			UpdateLoop:
 0000018B  85 C9		    test ecx, ecx
 0000018D  74 32		    jz EndUpdateLoop

 0000018F  8B 34 BD		    mov esi, drumQueue[edi*4]
	   000000C6 R
 00000196  FF 36		    push [esi]
 00000198  E8 00000000 E	    call sfSprite_getPosition
 0000019D  83 C4 04		    add esp, 4
 000001A0  8B D8		    mov ebx, eax
 000001A2  2B 1D 0000036D R	    sub ebx, drumStep
 000001A8  53			    push ebx
 000001A9  FF 36		    push [esi]
 000001AB  E8 00000000 E	    call sfSprite_setPosition
 000001B0  83 C4 08		    add esp, 8

 000001B3  47			    inc edi
 000001B4  83 FF 64		    cmp edi, MAX_DRUMS
 000001B7  72 05		    jb NoWrap
 000001B9  BF 00000000		    mov edi, 0
 000001BE			NoWrap:
 000001BE  49			    dec ecx
 000001BF  EB CA		    jmp UpdateLoop
 000001C1			EndUpdateLoop:
 000001C1			SkipUpdate:
				    ret
 000001C5			updateDrums ENDP

 000001C5			createJudgementCircle PROC USES esi edi
				    ; 創建圓形形狀
 000001C7  6A 00		    push 0
 000001C9  E8 00000000 E	    call sfCircleShape_create
 000001CE  83 C4 04		    add esp, 4
 000001D1  8B F0		    mov esi, eax

				    ; 設置圓形半徑
 000001D3  6A 1E		    push 30
 000001D5  56			    push esi
 000001D6  E8 00000000 E	    call sfCircleShape_setRadius
 000001DB  83 C4 08		    add esp, 8

				    ; 設置圓形位置
 000001DE  68 000000E1		    push 225               ; HIT_POSITION_X, 200+25
 000001E3  68 000001C2		    push HIT_POSITION_X
 000001E8  8D 04 24		    lea eax, [esp]
 000001EB  50			    push eax
 000001EC  56			    push esi
 000001ED  E8 00000000 E	    call sfCircleShape_setPosition
 000001F2  83 C4 10		    add esp, 16

				    ; 設置填充顏色
 000001F5  FF 35 00000371 R	    push blackColor
 000001FB  56			    push esi
 000001FC  E8 00000000 E	    call sfCircleShape_setFillColor
 00000201  83 C4 08		    add esp, 8

				    ; 設置邊框厚度
 00000204  6A 02		    push 2
 00000206  56			    push esi
 00000207  E8 00000000 E	    call sfCircleShape_setOutlineThickness
 0000020C  83 C4 08		    add esp, 8

				    ; 設置邊框顏色
 0000020F  FF 35 00000375 R	    push transparentColor
 00000215  56			    push esi
 00000216  E8 00000000 E	    call sfCircleShape_setOutlineColor
 0000021B  83 C4 08		    add esp, 8

 0000021E  8B C6		    mov eax, esi
				    ret
 00000223			createJudgementCircle ENDP

 00000223			@ld_background PROC
				    ; 創建背景紋理
 00000223  6A 00		    push 0
 00000225  68 0000004C R	    push offset bgPath
 0000022A  E8 00000000 E	    call sfTexture_createFromFile
 0000022F  83 C4 08		    add esp, 8
 00000232  A3 00000289 R	    mov bgTexture, eax
				    
				    ; 創建背景精靈
 00000237  E8 00000000 E	    call sfSprite_create
 0000023C  A3 0000028D R	    mov DWORD PTR [bgSprite], eax
				    
				    ; 設定紋理
 00000241  6A 01		    push 1
 00000243  A1 00000289 R	    mov eax, DWORD PTR [bgTexture]
 00000248  50			    push eax
 00000249  8B 0D 0000028D R	    mov ecx, DWORD PTR [bgSprite]
 0000024F  51			    push ecx
 00000250  E8 00000000 E	    call sfSprite_setTexture
 00000255  83 C4 0C		    add esp, 12
 00000258  C3			    ret
 00000259			@ld_background ENDP

 00000259			@countDown_text proc
 00000259  6A 00			push 0
 0000025B  68 0000026A R		push offset font_path
 00000260  E8 00000000 E		call sfFont_createFromFile
 00000265  83 C4 08			add esp, 8
 00000268  A3 00000281 R		mov font, eax

 0000026D  E8 00000000 E		call sfText_create
 00000272  A3 00000285 R		mov countDownText, eax

 00000277  FF 35 00000281 R		push font
 0000027D  FF 35 00000285 R		push dword ptr [countDownText]
 00000283  E8 00000000 E		call sfText_setFont
 00000288  83 C4 08			add esp, 8

 0000028B  6A 48			push 72
 0000028D  FF 35 00000285 R		push dword ptr [countDownText]
 00000293  E8 00000000 E		call sfText_setCharacterSize
 00000298  83 C4 08			add esp, 8

 0000029B  F3/ 0F 10 05			movss xmm0, [real_720]
	   000003CE R
 000002A3  F3/ 0F 5E 05			divss xmm0, [real_2]
	   000003C6 R
 000002AB  F3/ 0F 5C 05			subss xmm0, [real_32]
	   000003CA R
 000002B3  F3/ 0F 11 44 24		movss dword ptr [esp-4], xmm0
	   FC

 000002B9  F3/ 0F 10 05			movss xmm0, [real_1280]
	   000003D2 R
 000002C1  F3/ 0F 5E 05			divss xmm0, [real_2]
	   000003C6 R
 000002C9  F3/ 0F 5C 05			subss xmm0, [real_32]
	   000003CA R
 000002D1  F3/ 0F 11 44 24		movss dword ptr [esp-8], xmm0
	   F8

 000002D7  8B F4			mov esi, esp
 000002D9  FF 76 FC			push dword ptr [esi-4]
 000002DC  FF 76 F8			push dword ptr [esi-8]
 000002DF  FF 35 00000285 R		push dword ptr [countDownText]
 000002E5  E8 00000000 E		call sfText_setPosition
 000002EA  83 C4 0C			add esp, 12

 000002ED  C3				ret
 000002EE			@countDown_text ENDP

 000002EE			processHit proc
 000002EE  55			    push ebp
 000002EF  8B EC		    mov ebp, esp
 000002F1  83 EC 20		    sub esp, 32                          ; Local stack space
				    
				    ; Save registers
 000002F4  53			    push ebx
 000002F5  56			    push esi
 000002F6  57			    push edi
				    
				    ; Get parameters (cdecl)
 000002F7  8B 5D 08		    mov ebx, [ebp + 8]                   ; hitType in ebx
				    
				    ; Check if size == 0
 000002FA  A1 0000025E R	    mov eax, dword ptr [_size]
 000002FF  85 C0		    test eax, eax
 00000301  0F 84 000000D1	    jz done_processing
				    
				    ; Get drum position
 00000307  A1 00000256 R	    mov eax, dword ptr [front]           ; Load front index
 0000030C  B9 00000018		    mov ecx, 24                          ; sizeof(DrumNote)
 00000311  F7 E1		    mul ecx                              ; eax = front * 24
 00000313  03 05 000000C6 R	    add eax, dword ptr [drumQueue]       ; Base address of current drum
 00000319  50			    push eax                             ; Push sprite pointer
 0000031A  E8 00000000 E	    call sfSprite_getPosition            ; Call function (cdecl)
 0000031F  83 C4 04		    add esp, 4                           ; Clean stack
				    
				    ; Calculate distance
 00000322  8B 0D 000001C2	    mov ecx, dword ptr [HIT_POSITION_X]
 00000328  83 E9 2E		    sub ecx, 46                          ; HIT_POSITION_X - 46
 0000032B  D9 00		    fld dword ptr [eax]                  ; Load x position
 0000032D  D8 21		    fsub dword ptr [ecx]                 ; Calculate distance
 0000032F  D9 5D FC		    fstp dword ptr [ebp-4]              ; Store distance
				    
				    ; Check distance thresholds
 00000332  D9 45 FC		    fld dword ptr [ebp-4]               ; Load distance
 00000335  D9 E1		    fabs                                ; Get absolute value
 00000337  D9 05 000003DA R	    fld dword ptr [real_good_threshold]      ; Load GOOD_THRESHOLD
 0000033D  DE D9		    fcompp                              ; Compare and pop both
 0000033F  9B DF E0		    fstsw ax                           ; Store FPU status
 00000342  9E			    sahf                               ; Transfer to CPU flags
 00000343  0F 87 0000008F	    ja done_processing                 ; If abs(distance) > GOOD_THRESHOLD
				    
				    ; Check note type match
 00000349  A1 00000256 R	    mov eax, dword ptr [front]
 0000034E  B9 00000018		    mov ecx, 24
 00000353  F7 E1		    mul ecx
 00000355  03 05 000000C6 R	    add eax, dword ptr [drumQueue]
 0000035B  8B 50 04		    mov edx, dword ptr [eax+4]           ; Load drum type
 0000035E  3B D3		    cmp edx, ebx                       ; Compare with hitType
 00000360  75 5F		    jne miss_hit
				    
				    ; Check for GREAT hit
 00000362  D9 45 FC		    fld dword ptr [ebp-4]              ; Reload distance
 00000365  D9 E1		    fabs
 00000367  D9 05 000003DE R	    fld dword ptr [real_great_threshold]
 0000036D  DE D9		    fcompp
 0000036F  9B DF E0		    fstsw ax
 00000372  9E			    sahf
 00000373  77 27		    ja good_hit
				    
 00000375			great_hit:
 00000375  8B 35 0000009A R	    mov esi, dword ptr [stats]         ; Get stats pointer
 0000037B  FF 06		    inc dword ptr [esi + GameStats.great_count]      ; Increment great_count
 0000037D  FF 46 0C		    inc dword ptr [esi + GameStats.current_combo]    ; Increment current_combo
				    
				    ; Calculate score
 00000380  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 00000383  6B D2 0A		    imul edx, 10                       ; combo * 10
 00000386  81 C2 0000012C	    add edx, 300                       ; Add base score
 0000038C  01 56 14		    add dword ptr [esi + GameStats.total_score], edx  ; Add to total_score
				    
				    ; Update max combo
 0000038F  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 00000392  3B 56 10		    cmp edx, dword ptr [esi + GameStats.max_combo]      ; Compare with max_combo
 00000395  7E 3C		    jle do_dequeue
 00000397  89 56 10		    mov dword ptr [esi + GameStats.max_combo], edx      ; Update max_combo
 0000039A  EB 37		    jmp do_dequeue
				    
 0000039C			good_hit:
 0000039C  8B 35 0000009A R	    mov esi, dword ptr [stats]         ; Get stats pointer
 000003A2  FF 46 04		    inc dword ptr [esi + GameStats.good_count]       ; Increment good_count
 000003A5  FF 46 0C		    inc dword ptr [esi + GameStats.current_combo]    ; Increment current_combo
				    
				    ; Calculate score
 000003A8  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 000003AB  6B D2 05		    imul edx, 5                        ; combo * 5
 000003AE  83 C2 64		    add edx, 100                       ; Add base score
 000003B1  01 56 14		    add dword ptr [esi + GameStats.total_score], edx  ; Add to total_score
				    
				    ; Update max combo
 000003B4  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 000003B7  3B 56 10		    cmp edx, dword ptr [esi + GameStats.max_combo]      ; Compare with max_combo
 000003BA  7E 17		    jle do_dequeue
 000003BC  89 56 10		    mov dword ptr [esi + GameStats.max_combo], edx      ; Update max_combo
 000003BF  EB 12		    jmp do_dequeue
				    
 000003C1			miss_hit:
 000003C1  8B 35 0000009A R	    mov esi, dword ptr [stats]         ; Get stats pointer
 000003C7  FF 46 08		    inc dword ptr [esi + GameStats.miss_count]       ; Increment miss_count
 000003CA  C7 46 0C		    mov dword ptr [esi + GameStats.current_combo], 0  ; Reset current_combo
	   00000000
 000003D1  EB 05		    jmp done_processing
				    
 000003D3			do_dequeue:
 000003D3  E8 FFFFFC82		    call dequeue                       ; Remove the hit note (cdecl)
				    
 000003D8			done_processing:
				    ; Restore registers
 000003D8  5F			    pop edi
 000003D9  5E			    pop esi
 000003DA  5B			    pop ebx
				    
 000003DB  8B E5		    mov esp, ebp
 000003DD  5D			    pop ebp
 000003DE  C3			    ret

 000003DF			processHit endp

 000003DF			main_game_page PROC window:dword,musicPath:dword,noteChart:dword
					
 000003E2  C7 45 10			mov dword ptr [noteChart], offset chart
	   00000034 R
 000003E9  FF 75 10			push dword ptr [noteChart]
 000003EC  E8 FFFFFC0F			call readNoteChart
 000003F1  83 C4 04			add esp, 4

					; load background
 000003F4  E8 FFFFFE2A			call @ld_background

					; load red note texture
 000003F9  6A 00			push 0
 000003FB  68 00000067 R		push offset redNotePath
 00000400  E8 00000000 E		call sfTexture_createFromFile
 00000405  83 C4 08			add esp, 8
 00000408  A3 00000262 R		mov redDrumTexture, eax

					; load blue note texture
 0000040D  6A 00			push 0
 0000040F  68 00000080 R		push offset blueNotePath
 00000414  E8 00000000 E		call sfTexture_createFromFile
 00000419  83 C4 08			add esp, 8
 0000041C  A3 00000266 R		mov blueDrumTexture, eax

					; create judgement circle
 00000421  E8 FFFFFD9F			call createJudgementCircle
 00000426  A3 00000291 R		mov judgmentCircle, eax

					; create music
 0000042B  6A 00			push 0
 0000042D  FF 75 0C			push dword ptr [musicPath]
 00000430  E8 00000000 E		call sfMusic_createFromFile
 00000435  83 C4 08			add esp, 8
 00000438  A3 00000295 R		mov music, eax

 0000043D  6A 00			push 0
 0000043F  FF 35 00000295 R		push music
 00000445  E8 00000000 E		call sfMusic_setLoop
 0000044A  83 C4 08			add esp, 8

 0000044D  E8 00000000 E		call sfClock_create
 00000452  A3 00000299 R		mov spawnClock, eax

 00000457			@main_loop:
 00000457  8B 45 08			mov eax, DWORD PTR [window]
 0000045A  50			    push eax
 0000045B  E8 00000000 E	    call sfRenderWindow_isOpen
 00000460  83 C4 04		    add esp, 4
 00000463  85 C0		    test eax, eax
 00000465  0F 84 000002CB	    je exit_program

 0000046B  FF 35 00000299 R	    push spawnClock  ; 呼叫sfClock_getElapsedTime並獲取microseconds
 00000471  E8 00000000 E	    call sfClock_getElapsedTime
 00000476  F3/ 0F 2A C8		    cvtsi2ss xmm1, eax

 0000047A  F3/ 0F 10 05		    movss xmm0, [real_1000000]
	   000003D6 R
 00000482  F3/ 0F 5E C8		    divss xmm1, xmm0

				    ; 除以1000000.0以轉換為秒
 00000486  F3/ 0F 11 0D		    movss dword ptr [currentTime], xmm1
	   0000029D R

 0000048E  A1 000002A9 R		mov eax, gameStarted
 00000493  83 F8 00			cmp eax, 0
 00000496  75 59			jne deter_offset

					; check game start
 00000498  FF 35 00000295 R		push music 
 0000049E  E8 00000000 E		call sfMusic_getStatus
 000004A3  83 C4 04			add esp, 4
 000004A6  83 F8 02			cmp eax, sfPlaying
 000004A9  74 29			je skip_music_play

					; 比較 currentTime >= msInfo_offset
 000004AB  F3/ 0F 10 05		    movss xmm0, [msInfo._offset]     ; 加載 musicInfo.offset
	   000000B6 R
 000004B3  0F 2E C8		    ucomiss xmm1, xmm0               ; 比較 currentTime 和 musicInfo.offset
 000004B6  72 1C		    jb skip_music_play               ; 如果 currentTime < musicInfo.offset 跳過

				    ; 比較 msInfo_offset > 0
 000004B8  D9 EE		    fldz                             ; st(0) = 0.0
 000004BA  D9 05 000000B6 R	    fld msInfo._offset               ; st(1) = 0.0, st(0) = musicInfo.offset
 000004C0  DF F1		    fcomip st(0), st(1)              ; 比較 st(0) 與 0.0
 000004C2  76 10		    jbe skip_music_play              ; 如果 musicInfo.offset < 0 跳過
 000004C4  DD D8		    fstp st(0)                       ; 清除浮點堆疊

				    ; 播放音樂
 000004C6  FF 35 00000295 R	    push music
 000004CC  E8 00000000 E	    call sfMusic_play
 000004D1  83 C4 04			add esp, 4
 000004D4			skip_music_play:
				    ; 重置時鐘
 000004D4  FF 35 00000299 R	    push spawnClock
 000004DA  E8 00000000 E	    call sfClock_restart

				    ; 設定 gameStartTime = 0.0f
 000004DF  D9 EE		    fldz                             ; 加載 0.0
 000004E1  D9 1D 000002A5 R	    fstp gameStartTime

				    ; 設定 gameStarted = 1
 000004E7  C7 05 000002A9 R	    mov gameStarted, 1
	   00000001

 000004F1			deter_offset:
 000004F1  A1 000002A9 R		mov eax, gameStarted
 000004F6  83 F8 01			cmp eax, 1
 000004F9  75 43			jne @event_loop

					; 比較 musicInfo.offset < 0
 000004FB  D9 EE		    fldz                             ; st(0) = 0.0
 000004FD  D9 05 000000B6 R	    fld msInfo._offset               ; st(1) = 0.0, st(0) = musicInfo.offset
 00000503  DF F1		    fcomip st(0), st(1)              ; 比較 musicInfo.offset 和 0.0
 00000505  73 37		    jae @event_loop                  ;如果 offset >= 0，跳過
 00000507  DD D8		    fstp st(0)                       ; 清除浮點堆疊

					; 呼叫 sfMusic_getStatus 並檢查是否為 sfPlaying
 00000509  FF 35 00000295 R	    push music
 0000050F  E8 00000000 E	    call sfMusic_getStatus
 00000514  83 C4 04			add esp, 4
 00000517  83 F8 02		    cmp eax, sfPlaying               ; 比較返回值與 sfPlaying
 0000051A  74 22		    je @event_loop                  ; 如果音樂正在播放，跳過

				    ; 計算 currentTime >= -musicInfo.offset
 0000051C  D9 05 000000B6 R	    fld msInfo._offset              ; st(0) = musicInfo.offset
 00000522  D9 E0		    fchs                             ; st(0) = -musicInfo.offset
 00000524  D9 05 0000029D R	    fld currentTime                  ; st(1) = currentTime, st(0) = -musicInfo.offset
 0000052A  DF F1		    fcomip st(0), st(1)              ; 比較 currentTime 和 -musicInfo.offset
 0000052C  72 10		    jb @event_loop                  ; 如果 currentTime < -musicInfo.offset，跳過
 0000052E  DD D8		    fstp st(0)                       ; 清除浮點堆疊

				    ; 播放音樂
 00000530  FF 35 00000295 R	    push music
 00000536  E8 00000000 E	    call sfMusic_play
 0000053B  83 C4 04			add esp, 4

 0000053E				@event_loop:
						; 事件處理
 0000053E  8D 35 00000004 R	        lea esi, event
 00000544  56			        push esi
 00000545  8B 45 08		        mov eax, DWORD PTR [window]
 00000548  50			        push eax
 00000549  E8 00000000 E	        call sfRenderWindow_pollEvent
 0000054E  83 C4 08		        add esp, 8
 00000551  85 C0		        test eax, eax
 00000553  74 4B		        je @controll_drum
				    
				        ; 檢查關閉事件
 00000555  83 3E 00		        cmp dword ptr [esi].sfEvent._type, sfEvtClosed
 00000558  0F 84 0000016F	        je @end

 0000055E  83 3E 05				cmp dword ptr [esi].sfEvent._type, sfEvtKeyPressed
 00000561  74 00		        je check_gameStarted

 00000563			check_gameStarted:
 00000563  83 3D 000002A9 R	        cmp gameStarted, 1
	   01
 0000056A  74 02		        je @check_key_press

 0000056C  EB D0		        jmp @event_loop

 0000056E					@check_key_press:
 0000056E  83 7E 04 05					cmp dword ptr [esi+4], sfKeyF
 00000572  74 14		            je @red_pressed

 00000574  83 7E 04 09		            cmp dword ptr [esi+4], sfKeyJ
 00000578  74 0E		            je @red_pressed

 0000057A  83 7E 04 03		            cmp dword ptr [esi+4], sfKeyD
 0000057E  74 14		            je @blue_pressed

 00000580  83 7E 04 0A		            cmp dword ptr [esi+4], sfKeyK
 00000584  74 0E		            je @blue_pressed     
				            
 00000586  EB B6		            jmp @event_loop
 00000588				@red_pressed:
 00000588  6A 01				push 1
 0000058A  E8 FFFFFD5F				call processHit
 0000058F  83 C4 04				add esp, 4
 00000592  EB 0C				jmp @controll_drum
 00000594				@blue_pressed:
 00000594  6A 02				push 2
 00000596  E8 FFFFFD53				call processHit
 0000059B  83 C4 04				add esp, 4
 0000059E  EB 00				jmp @controll_drum

 000005A0				@controll_drum:
 000005A0  A1 000002A9 R			mov eax, gameStarted
 000005A5  83 F8 00				cmp eax, 0
 000005A8  74 7F				je @render_window

 000005AA  FF 35 00000299 R	        push spawnClock  ; 呼叫sfClock_getElapsedTime並獲取microseconds
 000005B0  E8 00000000 E	        call sfClock_getElapsedTime
 000005B5  F3/ 0F 2A C8		        cvtsi2ss xmm1, eax

 000005B9  F3/ 0F 10 05		        movss xmm0, [real_1000000]
	   000003D6 R
 000005C1  F3/ 0F 5E C8		        divss xmm1, xmm0

				        ; 除以1000000.0以轉換為秒
 000005C5  F3/ 0F 11 0D		        movss dword ptr [currentTime], xmm1
	   0000029D R

 000005CD			spawn_loop:
				        ;比較currentNoteIndex < totalNotes
 000005CD  A1 000002A1 R	        mov eax, currentNoteIndex
 000005D2  8B 1D 00000309 R	        mov ebx, totalNotes
 000005D8  3B C3		        cmp eax, ebx
 000005DA  73 40		        jae skip_spawn

				        ; 比較 currentTime >= noteTimings[currentNoteIndex]
 000005DC  F3/ 0F 10 05		        movss xmm0, [currentTime]              ; 加載 currentTime
	   0000029D R
 000005E4  8B 1D 000002A1 R	        mov ebx, currentNoteIndex               ; ebx = currentNoteIndex
 000005EA  C1 E3 02		        shl ebx, 2                              ; 計算索引的位移 (4字節對齊)
 000005ED  F3/ 0F 10 8B		        movss xmm1, noteTimings[ebx]            ; 加載 noteTimings[currentNoteIndex]
	   00000311 R
 000005F5  0F 2E C1		        ucomiss xmm0, xmm1                      ; 比較 currentTime 與 noteTimings
 000005F8  72 2A		        jb loop_end                             ; 如果 currentTime < noteTimings, 跳過迴圈

				        ; 檢查 notes[currentNoteIndex] != 0
 000005FA  A1 000002A1 R	        mov eax, currentNoteIndex               ; eax = currentNoteIndex
 000005FF  8B 1C 85		        mov ebx, notes[eax*4]                   ; ebx = notes[currentNoteIndex]
	   000002AD R
 00000606  83 FB 00		        cmp ebx, 0                              ; 比較 notes[currentNoteIndex] == 0
 00000609  74 11		        je skip_spawn                           ; 如果等於0，跳過 spawnDrum

				        ; 呼叫 spawnDrum(notes[currentNoteIndex], noteTimings[currentNoteIndex])

 0000060B  83 EC 04		        sub esp, 4
 0000060E  F3/ 0F 11 0C 24	        movss dword ptr [esp], xmm1               ; 將noteTimings[currentNoteIndex]壓入堆疊
 00000613  53			        push ebx                                ; 將notes[currentNoteIndex]壓入堆疊
 00000614  E8 FFFFFA81		        call spawnDrum
 00000619  83 C4 08		        add esp, 8                              ; 清理堆疊

 0000061C			    skip_spawn:
				        ; 更新 currentNoteIndex++
 0000061C  FF 05 000002A1 R	        inc currentNoteIndex
 00000622  EB A9		        jmp spawn_loop                          ; 返回迴圈起點

 00000624			    loop_end:
				        ; 呼叫 updateDrums 函式
 00000624  E8 FFFFFAF6		        call updateDrums

 00000629				@render_window:
				        ; 清除視窗
 00000629  FF 35 00000371 R	        push blackColor
 0000062F  FF 75 08		        push window
 00000632  E8 00000000 E	        call sfRenderWindow_clear
 00000637  83 C4 08		        add esp, 8

				        ; 繪製背景
 0000063A  6A 00		        push 0
 0000063C  A1 0000028D R	        mov eax, DWORD PTR [bgSprite]
 00000641  50			        push eax
 00000642  8B 4D 08		        mov ecx, DWORD PTR [window]
 00000645  51			        push ecx
 00000646  E8 00000000 E	        call sfRenderWindow_drawSprite
 0000064B  83 C4 0C		        add esp, 12

				        ; 繪製音符
 0000064E  8B 0D 0000025E R	        mov ecx, _size
 00000654  85 C9		        test ecx, ecx
 00000656  74 2F		        jz @deter_music_stop
 00000658  8B 3D 00000256 R	        mov edi, front
 0000065E			    draw_notes:
 0000065E  83 F9 00		        cmp ecx, 0
 00000661  74 24		        jz @deter_music_stop

 00000663  6A 00		        push 0
 00000665  8B 04 BD		        mov eax, [drumQueue + edi*4]
	   000000C6 R
 0000066C  50					push eax
 0000066D  8B 4D 08		        mov ecx, DWORD PTR [window]
 00000670  51			        push ecx
 00000671  E8 00000000 E	        call sfRenderWindow_drawSprite
 00000676  83 C4 08		        add esp, 8

 00000679  83 FF 64		        cmp edi, MAX_DRUMS
 0000067C  75 05		        jne @next_note
 0000067E  BF 00000000		        mov edi, 0

 00000683			    @next_note:
 00000683  47			        inc edi
 00000684  49			        dec ecx
 00000685  EB D7		        jmp draw_notes
				        

 00000687			    @deter_music_stop:
 00000687  FF 35 00000295 R	        push music
 0000068D  E8 00000000 E	        call sfMusic_getStatus
 00000692  83 C4 04		        add esp, 4
 00000695  83 F8 00		        cmp eax, sfStopped
 00000698  75 0F		        jne @display
 0000069A  A1 000002A1 R	        mov eax, currentNoteIndex
 0000069F  3B 05 00000309 R	        cmp eax, totalNotes
 000006A5  75 02		        jne @display

 000006A7  EB 64		        jmp @end_game

 000006A9			    @display:
				        ; 繪製判定圓
 000006A9  6A 00		        push 0
 000006AB  A1 00000291 R	        mov eax, judgmentCircle
 000006B0  50			        push eax
 000006B1  8B 4D 08		        mov ecx, DWORD PTR [window]
 000006B4  51			        push ecx
 000006B5  E8 00000000 E	        call sfRenderWindow_drawCircleShape
 000006BA  83 C4 0C		        add esp, 12

 000006BD  FF 75 08		        push window
 000006C0  E8 00000000 E	        call sfRenderWindow_display
 000006C5  83 C4 04		        add esp, 4

 000006C8  E9 FFFFFD8A		        jmp @main_loop

 000006CD			@end:

				    ; 釋放資源
 000006CD  FF 35 00000295 R		push music
 000006D3  E8 00000000 E		call sfMusic_destroy
 000006D8  83 C4 04			add esp, 4

 000006DB  6A 00			push 0
 000006DD  E8 00000000 E		call sfTexture_destroy
 000006E2  83 C4 04			add esp, 4

 000006E5  6A 00			push 0
 000006E7  E8 00000000 E		call sfSprite_destroy
 000006EC  83 C4 04			add esp, 4

 000006EF  6A 00			push 0
 000006F1  E8 00000000 E		call sfCircleShape_destroy
 000006F6  83 C4 04			add esp, 4

 000006F9  6A 00			push 0
 000006FB  E8 00000000 E		call sfFont_destroy
 00000700  83 C4 04			add esp, 4

 00000703  6A 00			push 0
 00000705  E8 00000000 E		call sfText_destroy
 0000070A  83 C4 04			add esp, 4

 0000070D			@end_game:
 0000070D  FF 35 000000AA R	    push stats.max_combo
 00000713  FF 35 000000AE R	    push stats.total_score
 00000719  FF 35 000000A2 R	    push stats.miss_count
 0000071F  FF 35 0000009E R	    push stats.good_count
 00000725  FF 35 0000009A R	    push stats.great_count
 0000072B  FF 75 08		    push window
 0000072E  E8 00000000 E	    call end_game_page
 00000733  83 C4 18		    add esp, 24

 00000736			exit_program:

					ret
 00000738			main_game_page ENDP

				END main_game_page
Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/22/24 22:47:42
main_game_page.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Drum . . . . . . . . . . . . . .	 0000000C
  sprite . . . . . . . . . . . .	 00000000	 DWord
  _type  . . . . . . . . . . . .	 00000004	 DWord
  targetTime . . . . . . . . . .	 00000008	 DWord
GameStats  . . . . . . . . . . .	 00000018
  great_count  . . . . . . . . .	 00000000	 DWord
  good_count . . . . . . . . . .	 00000004	 DWord
  miss_count . . . . . . . . . .	 00000008	 DWord
  current_combo  . . . . . . . .	 0000000C	 DWord
  max_combo  . . . . . . . . . .	 00000010	 DWord
  total_score  . . . . . . . . .	 00000014	 DWord
MusicInfo  . . . . . . . . . . .	 00000014
  bpm  . . . . . . . . . . . . .	 00000000	 DWord
  _offset  . . . . . . . . . . .	 00000004	 DWord
  spawnTime  . . . . . . . . . .	 00000008	 DWord
  currentBar . . . . . . . . . .	 0000000C	 DWord
  notesInBar . . . . . . . . . .	 00000010	 DWord
key  . . . . . . . . . . . . . .	 00000014
  code . . . . . . . . . . . . .	 00000000	 DWord
  alt  . . . . . . . . . . . . .	 00000004	 DWord
  control  . . . . . . . . . . .	 00000008	 DWord
  shift  . . . . . . . . . . . .	 0000000C	 DWord
  system . . . . . . . . . . . .	 00000010	 DWord
mouseButton  . . . . . . . . . .	 0000000C
  button . . . . . . . . . . . .	 00000000	 DWord
  x  . . . . . . . . . . . . . .	 00000004	 DWord
  y  . . . . . . . . . . . . . .	 00000008	 DWord
sfColor  . . . . . . . . . . . .	 00000004
  r  . . . . . . . . . . . . . .	 00000000	 Byte
  g  . . . . . . . . . . . . . .	 00000001	 Byte
  b  . . . . . . . . . . . . . .	 00000002	 Byte
  a  . . . . . . . . . . . . . .	 00000003	 Byte
sfEvent  . . . . . . . . . . . .	 00000030
  _type  . . . . . . . . . . . .	 00000000	 DWord
  _size  . . . . . . . . . . . .	 00000004	 DWord
  mouse  . . . . . . . . . . . .	 00000008	 
  _key . . . . . . . . . . . . .	 00000014	 
  mouseMove  . . . . . . . . . .	 00000028	 QWord
sfFloatRect  . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  _width . . . . . . . . . . . .	 00000008	 DWord
  height . . . . . . . . . . . .	 0000000C	 DWord
sfVector2f . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVector2i . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVideoMode  . . . . . . . . . .	 0000000C
  _width . . . . . . . . . . . .	 00000000	 DWord
  height . . . . . . . . . . . .	 00000004	 DWord
  bpp  . . . . . . . . . . . . .	 00000008	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000003E2 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000738 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@countDown_text  . . . . . . . .	P Near	 00000259 _TEXT	Length= 00000095 Public C
@ld_background . . . . . . . . .	P Near	 00000223 _TEXT	Length= 00000036 Public C
createJudgementCircle  . . . . .	P Near	 000001C5 _TEXT	Length= 0000005E Public C
dequeue  . . . . . . . . . . . .	P Near	 0000005A _TEXT	Length= 00000040 Public C
  SkipFrontWrap  . . . . . . . .	L Near	 00000092 _TEXT	
  QueueEmpty . . . . . . . . . .	L Near	 00000099 _TEXT	
enqueue  . . . . . . . . . . . .	P Near	 00000017 _TEXT	Length= 00000043 Public C
  @drum  . . . . . . . . . . . .	DWord	 bp + 00000008
  SkipRearWrap . . . . . . . . .	L Near	 0000004F _TEXT	
  @end_enqueue . . . . . . . . .	L Near	 00000055 _TEXT	
isQueueEmpty . . . . . . . . . .	P Near	 0000000C _TEXT	Length= 0000000B Public C
isQueueFull  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000C Public C
main_game_page . . . . . . . . .	P Near	 000003DF _TEXT	Length= 00000359 Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
  musicPath  . . . . . . . . . .	DWord	 bp + 0000000C
  noteChart  . . . . . . . . . .	DWord	 bp + 00000010
  @main_loop . . . . . . . . . .	L Near	 00000457 _TEXT	
  skip_music_play  . . . . . . .	L Near	 000004D4 _TEXT	
  deter_offset . . . . . . . . .	L Near	 000004F1 _TEXT	
  @event_loop  . . . . . . . . .	L Near	 0000053E _TEXT	
  check_gameStarted  . . . . . .	L Near	 00000563 _TEXT	
  @check_key_press . . . . . . .	L Near	 0000056E _TEXT	
  @red_pressed . . . . . . . . .	L Near	 00000588 _TEXT	
  @blue_pressed  . . . . . . . .	L Near	 00000594 _TEXT	
  @controll_drum . . . . . . . .	L Near	 000005A0 _TEXT	
  spawn_loop . . . . . . . . . .	L Near	 000005CD _TEXT	
  skip_spawn . . . . . . . . . .	L Near	 0000061C _TEXT	
  loop_end . . . . . . . . . . .	L Near	 00000624 _TEXT	
  @render_window . . . . . . . .	L Near	 00000629 _TEXT	
  draw_notes . . . . . . . . . .	L Near	 0000065E _TEXT	
  @next_note . . . . . . . . . .	L Near	 00000683 _TEXT	
  @deter_music_stop  . . . . . .	L Near	 00000687 _TEXT	
  @display . . . . . . . . . . .	L Near	 000006A9 _TEXT	
  @end . . . . . . . . . . . . .	L Near	 000006CD _TEXT	
  @end_game  . . . . . . . . . .	L Near	 0000070D _TEXT	
  exit_program . . . . . . . . .	L Near	 00000736 _TEXT	
processHit . . . . . . . . . . .	P Near	 000002EE _TEXT	Length= 000000F1 Public C
  great_hit  . . . . . . . . . .	L Near	 00000375 _TEXT	
  good_hit . . . . . . . . . . .	L Near	 0000039C _TEXT	
  miss_hit . . . . . . . . . . .	L Near	 000003C1 _TEXT	
  do_dequeue . . . . . . . . . .	L Near	 000003D3 _TEXT	
  done_processing  . . . . . . .	L Near	 000003D8 _TEXT	
readNoteChart  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000000 Public C
spawnDrum  . . . . . . . . . . .	P Near	 0000009A _TEXT	Length= 00000085 Public C
  _type  . . . . . . . . . . . .	DWord	 bp + 00000008
  targetTime . . . . . . . . . .	DWord	 bp + 0000000C
  SetBlueTexture . . . . . . . .	L Near	 000000E9 _TEXT	
  DoneTexture  . . . . . . . . .	L Near	 000000FA _TEXT	
  QueueFullSpawn . . . . . . . .	L Near	 0000011B _TEXT	
updateDrums  . . . . . . . . . .	P Near	 0000011F _TEXT	Length= 000000A6 Public C
  SkipFrontWrap2 . . . . . . . .	L Near	 00000179 _TEXT	
  SkipFrontRemoval . . . . . . .	L Near	 0000017F _TEXT	
  UpdateLoop . . . . . . . . . .	L Near	 0000018B _TEXT	
  NoWrap . . . . . . . . . . . .	L Near	 000001BE _TEXT	
  EndUpdateLoop  . . . . . . . .	L Near	 000001C1 _TEXT	
  SkipUpdate . . . . . . . . . .	L Near	 000001C1 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
GOOD_THRESHOLD . . . . . . . . .	Number	 0000001Eh   
GREAT_THRESHOLD  . . . . . . . .	Number	 00000004h   
GetStdHandle@4 . . . . . . . . .	L Near	 00000000 FLAT	External C
HIT_POSITION_X . . . . . . . . .	Number	 000001C2h   
INITIAL_DELAY  . . . . . . . . .	Number	 00000003h   
MAX_DRUMS  . . . . . . . . . . .	Number	 00000064h   
MAX_LINE_LENGTH  . . . . . . . .	Number	 000003E8h   
MAX_NOTES  . . . . . . . . . . .	Number	 00002710h   
SCREEN_HEIGHT  . . . . . . . . .	Number	 000002D0h   
SCREEN_WIDTH . . . . . . . . . .	Number	 00000500h   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
WriteConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External C
_size  . . . . . . . . . . . . .	DWord	 0000025E _DATA	
bgPath . . . . . . . . . . . . .	Byte	 0000004C _DATA	
bgSprite . . . . . . . . . . . .	DWord	 0000028D _DATA	
bgTexture  . . . . . . . . . . .	DWord	 00000289 _DATA	
blackColor . . . . . . . . . . .	sfColor	 00000371 _DATA	
blueDrumTexture  . . . . . . . .	DWord	 00000266 _DATA	
blueNotePath . . . . . . . . . .	Byte	 00000080 _DATA	
breakline  . . . . . . . . . . .	Byte	 00000396 _DATA	
chart  . . . . . . . . . . . . .	Byte	 00000034 _DATA	
comma  . . . . . . . . . . . . .	Byte	 00000394 _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000000 _DATA	
countDownText  . . . . . . . . .	DWord	 00000285 _DATA	
currentNoteIndex . . . . . . . .	DWord	 000002A1 _DATA	
currentPage  . . . . . . . . . .	DWord	 00000000 FLAT	External C
currentTime  . . . . . . . . . .	DWord	 0000029D _DATA	
decimal_mult . . . . . . . . . .	QWord	 000003B6 _DATA	
drumQueue  . . . . . . . . . . .	DWord	 000000C6 _DATA	
drumStep . . . . . . . . . . . .	DWord	 0000036D _DATA	
end_game_page  . . . . . . . . .	L Near	 00000000 FLAT	External C
event  . . . . . . . . . . . . .	sfEvent	 00000004 _DATA	
fclose . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fgets  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
font_path  . . . . . . . . . . .	Byte	 0000026A _DATA	
font . . . . . . . . . . . . . .	DWord	 00000281 _DATA	
fopen  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
front  . . . . . . . . . . . . .	DWord	 00000256 _DATA	
gameStartTime  . . . . . . . . .	DWord	 000002A5 _DATA	
gameStarted  . . . . . . . . . .	DWord	 000002A9 _DATA	
getBpm . . . . . . . . . . . . .	Byte	 00000399 _DATA	
getOffset  . . . . . . . . . . .	Byte	 000003A0 _DATA	
judgmentCircle . . . . . . . . .	DWord	 00000291 _DATA	
malloc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
msInfo . . . . . . . . . . . . .	MusicInfo  000000B2 _DATA	
music  . . . . . . . . . . . . .	DWord	 00000295 _DATA	
noteSpawnInterval  . . . . . . .	DWord	 0000030D _DATA	
noteTimings  . . . . . . . . . .	DWord	 00000311 _DATA	
notes  . . . . . . . . . . . . .	DWord	 000002AD _DATA	
readA  . . . . . . . . . . . . .	Byte	 00000379 _DATA	
real_1000000 . . . . . . . . . .	DWord	 000003D6 _DATA	
real_1280  . . . . . . . . . . .	DWord	 000003D2 _DATA	
real_2 . . . . . . . . . . . . .	DWord	 000003C6 _DATA	
real_32  . . . . . . . . . . . .	DWord	 000003CA _DATA	
real_4 . . . . . . . . . . . . .	DWord	 000003AE _DATA	
real_60000 . . . . . . . . . . .	DWord	 000003B2 _DATA	
real_60  . . . . . . . . . . . .	DWord	 000003AA _DATA	
real_720 . . . . . . . . . . . .	DWord	 000003CE _DATA	
real_good_threshold  . . . . . .	DWord	 000003DA _DATA	
real_great_threshold . . . . . .	DWord	 000003DE _DATA	
rear . . . . . . . . . . . . . .	DWord	 0000025A _DATA	
redDrumTexture . . . . . . . . .	DWord	 00000262 _DATA	
redNotePath  . . . . . . . . . .	Byte	 00000067 _DATA	
sfCircleShape_create . . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_destroy  . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setFillColor . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineColor  .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineThickness 	L Near	 00000000 FLAT	External C
sfCircleShape_setPosition  . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setRadius  . . . .	L Near	 00000000 FLAT	External C
sfClock_create . . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_getElapsedTime . . . . .	L Near	 00000000 FLAT	External C
sfClock_restart  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClose  . . . . . . . . . . . .	Number	 00000004h   
sfColor_fromRGBA . . . . . . . .	L Near	 00000000 FLAT	External C
sfColor_fromRGB  . . . . . . . .	L Near	 00000000 FLAT	External C
sfEvtClosed  . . . . . . . . . .	Number	 00000000h   
sfEvtGainedFocus . . . . . . . .	Number	 00000003h   
sfEvtKeyPressed  . . . . . . . .	Number	 00000005h   
sfEvtKeyReleased . . . . . . . .	Number	 00000006h   
sfEvtLostFocus . . . . . . . . .	Number	 00000002h   
sfEvtMouseButtonPressed  . . . .	Number	 00000009h   
sfEvtMouseButtonReleased . . . .	Number	 0000000Ah   
sfEvtMouseEntered  . . . . . . .	Number	 0000000Ch   
sfEvtMouseLeft . . . . . . . . .	Number	 0000000Dh   
sfEvtMouseMoved  . . . . . . . .	Number	 0000000Bh   
sfEvtMouseWheelMoved . . . . . .	Number	 00000007h   
sfEvtMouseWheelScrolled  . . . .	Number	 00000008h   
sfEvtResized . . . . . . . . . .	Number	 00000001h   
sfEvtTextEntered . . . . . . . .	Number	 00000004h   
sfFalse  . . . . . . . . . . . .	Number	 00000000h   
sfFont_createFromFile  . . . . .	L Near	 00000000 FLAT	External C
sfFont_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfFullscreen . . . . . . . . . .	Number	 00000008h   
sfKeyA . . . . . . . . . . . . .	Number	 00000000h   
sfKeyD . . . . . . . . . . . . .	Number	 00000003h   
sfKeyEnter . . . . . . . . . . .	Number	 0000003Ah   
sfKeyEscape  . . . . . . . . . .	Number	 00000024h   
sfKeyF . . . . . . . . . . . . .	Number	 00000005h   
sfKeyJ . . . . . . . . . . . . .	Number	 00000009h   
sfKeyK . . . . . . . . . . . . .	Number	 0000000Ah   
sfKeyS . . . . . . . . . . . . .	Number	 00000012h   
sfMouseLeft  . . . . . . . . . .	Number	 00000000h   
sfMouseMiddle  . . . . . . . . .	Number	 00000002h   
sfMouseRight . . . . . . . . . .	Number	 00000001h   
sfMusic_createFromFile . . . . .	L Near	 00000000 FLAT	External C
sfMusic_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_getStatus  . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_play . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_setLoop  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_stop . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfNone . . . . . . . . . . . . .	Number	 00000000h   
sfPaused . . . . . . . . . . . .	Number	 00000001h   
sfPlaying  . . . . . . . . . . .	Number	 00000002h   
sfRectangleShape_create  . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_destroy . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setFillColor  .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineColor .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineThickness .	L Near	 00000000 FLAT	External C
sfRectangleShape_setPosition . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setSize . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_clear . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_close . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_create  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_destroy . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_display . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawCircleShape .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawRectangleShape 	L Near	 00000000 FLAT	External C
sfRenderWindow_drawSprite  . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawText  . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_isOpen  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_pollEvent . . . .	L Near	 00000000 FLAT	External C
sfResize . . . . . . . . . . . .	Number	 00000002h   
sfSleep  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_create  . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_destroy . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_getPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setTexture  . . . . . .	L Near	 00000000 FLAT	External C
sfStopped  . . . . . . . . . . .	Number	 00000000h   
sfText_create  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_getGlobalBounds . . . . .	L Near	 00000000 FLAT	External C
sfText_getLocalBounds  . . . . .	L Near	 00000000 FLAT	External C
sfText_setCharacterSize  . . . .	L Near	 00000000 FLAT	External C
sfText_setFillColor  . . . . . .	L Near	 00000000 FLAT	External C
sfText_setFont . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineColor . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineThickness . . .	L Near	 00000000 FLAT	External C
sfText_setPosition . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setString . . . . . . . .	L Near	 00000000 FLAT	External C
sfTexture_createFromFile . . . .	L Near	 00000000 FLAT	External C
sfTexture_destroy  . . . . . . .	L Near	 00000000 FLAT	External C
sfTitlebar . . . . . . . . . . .	Number	 00000001h   
sfTrue . . . . . . . . . . . . .	Number	 00000001h   
sfWindow_setFramerateLimit . . .	L Near	 00000000 FLAT	External C
spawnClock . . . . . . . . . . .	DWord	 00000299 _DATA	
stats  . . . . . . . . . . . . .	GameStats  0000009A _DATA	
str_bpm  . . . . . . . . . . . .	Byte	 0000037B _DATA	
str_end  . . . . . . . . . . . .	Byte	 0000038F _DATA	
str_offset . . . . . . . . . . .	Byte	 00000380 _DATA	
str_start  . . . . . . . . . . .	Byte	 00000388 _DATA	
strcspn  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strlen . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strncmp  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strtok_s . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
ten  . . . . . . . . . . . . . .	QWord	 000003BE _DATA	
totalNotes . . . . . . . . . . .	DWord	 00000309 _DATA	
transparentColor . . . . . . . .	sfColor	 00000375 _DATA	

	   0 Warnings
	   0 Errors
