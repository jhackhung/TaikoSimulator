Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/26/24 19:51:02
main_game_page.asm					     Page 1 - 1


				.686P
				.XMM
				.model flat, c
				include csfml.inc
			      C ; CSFML.INC - SFML Definitions for x86 Assembly
			      C ; 使用 MASM 語法
			      C 
			      C includelib csfml-audio.lib
			      C includelib csfml-graphics.lib
			      C includelib csfml-system.lib
			      C includelib csfml-window.lib
			      C 
			      C ; sfBool 定義
 = 00000000		      C sfFalse     equ 0
 = 00000001		      C sfTrue      equ 1
			      C 
			      C ; sfMusic status
 = 00000000		      C sfStopped   equ 0
 = 00000001		      C sfPaused    equ 1
 = 00000002		      C sfPlaying   equ 2
			      C 
			      C 
			      C ; sfEventType 定義
 = 00000000		      C sfEvtClosed               equ 0
 = 00000001		      C sfEvtResized              equ 1
 = 00000002		      C sfEvtLostFocus            equ 2
 = 00000003		      C sfEvtGainedFocus          equ 3
 = 00000004		      C sfEvtTextEntered          equ 4
 = 00000005		      C sfEvtKeyPressed           equ 5
 = 00000006		      C sfEvtKeyReleased          equ 6
 = 00000007		      C sfEvtMouseWheelMoved      equ 7
 = 00000008		      C sfEvtMouseWheelScrolled   equ 8
 = 00000009		      C sfEvtMouseButtonPressed   equ 9
 = 0000000A		      C sfEvtMouseButtonReleased  equ 10
 = 0000000B		      C sfEvtMouseMoved           equ 11
 = 0000000C		      C sfEvtMouseEntered         equ 12
 = 0000000D		      C sfEvtMouseLeft            equ 13
			      C 
			      C ; sfMouseButton 定義
 = 00000000		      C sfMouseLeft   equ 0
 = 00000001		      C sfMouseRight  equ 1
 = 00000002		      C sfMouseMiddle equ 2
			      C 
			      C ; sfKey 定義
 = 0000003A		      C sfKeyEnter    equ 58
 = 00000000		      C sfKeyA        equ 0
 = 00000012		      C sfKeyS        equ 18
 = 00000003		      C sfKeyD        equ 3
 = 00000024		      C sfKeyEscape   equ 36
 = 00000005		      C sfKeyF        equ 5
 = 00000009		      C sfKeyJ        equ 9
 = 0000000A		      C sfKeyK        equ 10
			      C 
			      C ; 視窗風格定義
 = 00000000		      C sfNone       equ 0
 = 00000001		      C sfTitlebar   equ 1
 = 00000002		      C sfResize     equ 2
 = 00000004		      C sfClose      equ 4
 = 00000008		      C sfFullscreen equ 8
			      C 
			      C ; 結構體定義
 00000008		      C sfVector2f STRUCT
 00000000  00000000	      C     x REAL4 ?
 00000004  00000000	      C     y REAL4 ?
			      C sfVector2f ENDS
			      C 
 00000008		      C sfVector2i STRUCT
 00000000  00000000	      C     x SDWORD ?
 00000004  00000000	      C     y SDWORD ?
			      C sfVector2i ENDS
			      C 
 0000000C		      C sfVideoMode STRUCT
 00000000  00000000	      C     _width  DWORD ?
 00000004  00000000	      C     height DWORD ?
 00000008  00000000	      C     bpp    DWORD ?
			      C sfVideoMode ENDS
			      C 
 00000004		      C sfColor STRUCT
 00000000  00		      C     r BYTE ?
 00000001  00		      C     g BYTE ?
 00000002  00		      C     b BYTE ?
 00000003  00		      C     a BYTE ?
			      C sfColor ENDS
			      C 
 00000010		      C sfFloatRect STRUCT
 00000000  00000000	      C     left   REAL4 ?
 00000004  00000000	      C     top    REAL4 ?
 00000008  00000000	      C     _width  REAL4 ?
 0000000C  00000000	      C     height REAL4 ?
			      C sfFloatRect ENDS
			      C 
 0000000C		      C mouseButton STRUCT
 00000000  00000000	      C     button DWORD ?
 00000004  00000000	      C     x DWORD ?
 00000008  00000000	      C     y DWORD ?
			      C mouseButton ENDS
			      C 
 00000014		      C key STRUCT
 00000000  00000000	      C     code DWORD ?
 00000004  00000000	      C     alt DWORD ?
 00000008  00000000	      C     control DWORD ?
 0000000C  00000000	      C     shift DWORD ?
 00000010  00000000	      C     system DWORD ?
			      C key ENDS
			      C 
 00000030		      C sfEvent STRUCT
 00000000  00000000	      C     _type DWORD ?                
 00000004  00000000	      C     _size DWORD ?                
 00000008  00000000	      C     mouse mouseButton <>       
	   00000000
	   00000000
 00000014  00000000	      C     _key key <>                 
	   00000000
	   00000000
	   00000000
	   00000000
 00000028  00000000	      C     mouseMove sfVector2i <>     
	   00000000
			      C sfEvent ENDS
			      C 
			      C ; 函數原型 - 視窗相關
			      C EXTERN sfRenderWindow_create:PROC
			      C EXTERN sfRenderWindow_destroy:PROC
			      C EXTERN sfRenderWindow_close:PROC
			      C EXTERN sfRenderWindow_isOpen:PROC
			      C EXTERN sfRenderWindow_clear:PROC
			      C EXTERN sfRenderWindow_display:PROC
			      C EXTERN sfRenderWindow_pollEvent:PROC
			      C EXTERN sfRenderWindow_drawSprite:PROC
			      C EXTERN sfRenderWindow_drawText:PROC
			      C 
			      C EXTERN sfWindow_setFramerateLimit:PROC
			      C 
			      C ; 函數原型 - 紋理相關
			      C EXTERN sfTexture_createFromFile:PROC
			      C EXTERN sfTexture_destroy:PROC
			      C 
			      C ; 函數原型 - 精靈相關
			      C EXTERN sfSprite_create:PROC
			      C EXTERN sfSprite_destroy:PROC
			      C EXTERN sfSprite_setTexture:PROC
			      C EXTERN sfSprite_setPosition:PROC
			      C EXTERN sfSprite_getPosition:PROC
			      C 
			      C ; 函數原型 - 音樂相關
			      C EXTERN sfMusic_createFromFile:PROC
			      C EXTERN sfMusic_destroy:PROC
			      C EXTERN sfMusic_play:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C EXTERN sfMusic_stop: PROC
			      C EXTERN sfMusic_getStatus: PROC
			      C 
			      C ; 函數原型 - 文字相關
			      C EXTERN sfFont_createFromFile:PROC
			      C EXTERN sfFont_destroy:PROC
			      C EXTERN sfText_create:PROC
			      C EXTERN sfText_destroy:PROC
			      C EXTERN sfText_setFont:PROC
			      C EXTERN sfText_setString:PROC
			      C EXTERN sfText_setCharacterSize:PROC
			      C EXTERN sfText_setFillColor:PROC
			      C EXTERN sfText_setOutlineColor:PROC
			      C EXTERN sfText_setOutlineThickness:PROC
			      C EXTERN sfText_getLocalBounds:PROC
			      C EXTERN sfText_getGlobalBounds:PROC
			      C EXTERN sfText_setPosition:PROC
			      C 
			      C ; 函數原型 - 顏色相關
			      C EXTERN sfColor_fromRGB:PROC
			      C EXTERN sfColor_fromRGBA:PROC
			      C 
			      C ; 函數原型 - 圓形相關
			      C EXTERN sfCircleShape_create: PROC
			      C EXTERN sfCircleShape_setPosition: PROC
			      C EXTERN sfCircleShape_setRadius: PROC
			      C EXTERN sfCircleShape_setFillColor: PROC
			      C EXTERN sfRenderWindow_drawCircleShape: PROC
			      C EXTERN sfCircleShape_destroy: PROC
			      C EXTERN sfCircleShape_setOutlineThickness: PROC
			      C EXTERN sfCircleShape_setOutlineColor: PROC
			      C 
			      C ; 函數原型 - 矩形相關
			      C EXTERN sfRectangleShape_create: PROC
			      C EXTERN sfRectangleShape_setPosition: PROC
			      C EXTERN sfRectangleShape_setSize: PROC
			      C EXTERN sfRectangleShape_setFillColor: PROC
			      C EXTERN sfRectangleShape_setOutlineThickness: PROC
			      C EXTERN sfRenderWindow_drawRectangleShape: PROC
			      C EXTERN sfRectangleShape_destroy: PROC
			      C EXTERN sfRectangleShape_setOutlineColor: PROC
			      C 
			      C EXTERN sfSleep: PROC
			      C EXTERN sfClock_create: PROC
			      C EXTERN sfClock_getElapsedTime: PROC
			      C EXTERN sfClock_restart: PROC
			      C 
				include file.inc
			      C includelib ucrt.lib
			      C includelib kernel32.lib
			      C 
			      C 
 0000000C		      C Drum struct
 00000000  00000000	      C 	sprite dword ?
 00000004  00000000	      C 	_type dword ?
 00000008  00000000	      C 	targetTime real4 ?
			      C Drum ends
			      C 
 00000018		      C GameStats struct
 00000000  00000000	      C 	great_count DWORD ? 
 00000004  00000000	      C 	good_count DWORD ? 
 00000008  00000000	      C 	miss_count DWORD ? 
 0000000C  00000000	      C 	current_combo DWORD ? 
 00000010  00000000	      C 	max_combo DWORD ? 
 00000014  00000000	      C 	total_score DWORD ? 
			      C GameStats ends
			      C 
 00000014		      C MusicInfo struct
 00000000  00000000	      C 	bpm real4 ?
 00000004  00000000	      C 	_offset real4 ?
 00000008  00000000	      C 	spawnTime real4 ?
 0000000C  00000000	      C 	currentBar dword ?
 00000010  00000000	      C 	notesInBar dword ?
			      C MusicInfo ends
			      C 
			      C extern malloc:proc
			      C extern fopen:proc
			      C extern fclose:proc
			      C extern fgets:proc
			      C 
			      C 
			      C ; string
			      C 
			      C extern strcspn:proc
			      C extern strncmp:proc
			      C ;extern __imp____stdio_common_vsscanf:proc
			      C extern strtok_s:proc
			      C extern strlen:proc
			      C 
				includelib kernel32.lib

				extern GetStdHandle@4: PROC
				extern WriteConsoleA@20:PROC
 =-0000000B			STD_OUTPUT_HANDLE EQU -11

				extern end_game_page: PROC
				extern currentPage: DWORD

				; Constants
 = 00002710			MAX_NOTES = 10000
 = 000003E8			MAX_LINE_LENGTH = 1000
 = 00000500			SCREEN_WIDTH = 1280
 = 000002D0			SCREEN_HEIGHT = 720
 = 00000064			MAX_DRUMS = 100
 = 000001C2			HIT_POSITION_X = 450 
 = 00000004			GREAT_THRESHOLD = 4
 = 0000001E			GOOD_THRESHOLD = 30
 = 00000003			INITIAL_DELAY = 3

 00000000			.data
				    ALIGN 4
 00000000 7FFFFFFF		    abs_mask DD 7fffffffh, 0, 0, 0
	   00000000
	   00000000
	   00000000

				    ; 新增延遲相關變數
 00000010 40000000		    initial_delay_1 real4 2.0    ; 設定 2 秒延遲
 00000014 00000000		    delay_started dword 0      ; 追蹤延遲是否開始
 00000018 00000000		    delay_clock dword 0        ; 用於計時的時鐘

 0000001C 00000000			consoleHandle dd ?
 00000020 00000000			event sfEvent <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000

 00000050 00000000		    redNoteSound dd 0    ; 紅色音符音效
 00000054 00000000		    blueNoteSound dd 0   ; 藍色音符音效

 00000058 61 73 73 65 74		chart db "assets/game/yoasobi.txt", 0
	   73 2F 67 61 6D
	   65 2F 79 6F 61
	   73 6F 62 69 2E
	   74 78 74 00
 00000070 61 73 73 65 74		bgPath db "assets/game/bg_genre_2.jpg", 0
	   73 2F 67 61 6D
	   65 2F 62 67 5F
	   67 65 6E 72 65
	   5F 32 2E 6A 70
	   67 00
 0000008B 61 73 73 65 74		redNotePath db "assets/game/red_note.png", 0
	   73 2F 67 61 6D
	   65 2F 72 65 64
	   5F 6E 6F 74 65
	   2E 70 6E 67 00
 000000A4 61 73 73 65 74		blueNotePath db "assets/game/blue_note.png", 0
	   73 2F 67 61 6D
	   65 2F 62 6C 75
	   65 5F 6E 6F 74
	   65 2E 70 6E 67
	   00
 000000BE 61 73 73 65 74	    red_note_sound_path db "assets/main/rednote.wav", 0
	   73 2F 6D 61 69
	   6E 2F 72 65 64
	   6E 6F 74 65 2E
	   77 61 76 00
 000000D6 61 73 73 65 74	    blue_note_sound_path db "assets/main/bluenote.wav", 0
	   73 2F 6D 61 69
	   6E 2F 62 6C 75
	   65 6E 6F 74 65
	   2E 77 61 76 00

 000000EF 00000000			stats GameStats <0, 0, 0, 0, 0, 0>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000107 43020000			msInfo MusicInfo <130.000000, -1.962000, 115.384613>
	   BFFB22D1
	   42E6C4EC
	   00000000
	   00000000

					; queue for drums
 0000011B				drumQueue dword MAX_DRUMS dup(?) ; 存放Drum結構指針
 000002AB 00000000			front dword 0
 000002AF 00000000			rear dword 0
 000002B3 00000000			_size dword 0

					; texture
 000002B7 00000000			redDrumTexture dword ?
 000002BB 00000000			blueDrumTexture dword ?

 000002BF 61 73 73 65 74		font_path db "assets/fonts/arial.ttf", 0
	   73 2F 66 6F 6E
	   74 73 2F 61 72
	   69 61 6C 2E 74
	   74 66 00
 000002D6 00000000			font dd 0

					; text
 000002DA 00000000			countDownText dword ?

					; background
 000002DE 00000000			bgTexture dword ?
 000002E2 00000000			bgSprite dword ?

					; judgement circle
 000002E6 00000000			judgementCircle dword ?
					
					; music
 000002EA 00000000			music dword ?

					; clock
 000002EE 00000000			spawnClock dword 0

 000002F2 00000000			currentTime real4 0.0

 000002F6 00000000			currentNoteIndex dd 0
 000002FA 40400000			gameStartTime real4 3.0
 000002FE 00000000			gameStarted dword 0

					; note chart
 00000302 00000001			notes dword 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000002
	   00000001
	   00000002
	   00000001
	   00000001
 0000037A 0000001E			totalNotes dword 30
 0000037E 00000000			noteSpawnInterval real4 0.0
 00000382 00000000			noteTimings real4 0.000000, 0.923077, 1.846154, 2.769229, 3.653842, 7.384611, 8.307688, 9.230764, 10.153841, 11.076918, 12.884617, 14.769233, 15.692309, 16.615387, 17.538464, 18.461540, 19.384617, 20.307693, 22.153847, 23.076923, 24.000000, 24.923077, 25.846153, 26.769230, 27.692307, 28.615384, 29.538461, 30.461538, 31.384615, 32.307692
	   3F6C4EC6
	   3FEC4EC6
	   40313B0C
	   4069D88C
	   40EC4EBC
	   4104EC4A
	   4113B136
	   41227622
	   41313B0E
	   414E2764
	   416C4EC7
	   417B13B3
	   4184EC50
	   418C4EC6
	   4193B13C
	   419B13B2
	   41A27628
	   41B13B14
	   41B89D8A
	   41C00000
	   41C76276
	   41CEC4EC
	   41D62762
	   41DD89D8
	   41E4EC4E
	   41EC4EC5
	   41F3B13B
	   41FB13B1
	   42013B14
 000003FA 40EFC71D			drumStep real4 7.493056

					; color
 000003FE 00 00 00 FF			blackColor sfColor <0, 0, 0, 255>
 00000402 E6 E6 E6 C8		    white_color sfColor <230, 230, 230, 200>
 00000406 FF FF FF 32			transparentColor sfColor <255, 255, 255, 50>

					; file
 0000040A 72 00				readA byte "r", 0

					; 字串常量
 0000040C 42 50 4D 3A 00		str_bpm db "BPM:", 0
 00000411 4F 46 46 53 45		str_offset db "OFFSET:", 0
	   54 3A 00
 00000419 23 53 54 41 52		str_start db "#START", 0
	   54 00
 00000420 23 45 4E 44 00		str_end db "#END", 0
 00000425 2C 00				comma db ",", 0
 00000427 5C 6E 00			breakline db "\n", 0
					;format db "%", 0

 0000042A 42 50 4D 3A 25		getBpm db "BPM:%f", 0
	   66 00
 00000431 4F 46 46 53 45		getOffset db "OFFSET:%f", 0
	   54 3A 25 66 00

 0000043B 42700000			real_60 real4 60.0
 0000043F 40800000			real_4 real4 4.0
 00000443 476A6000			real_60000 real4 60000.0
 00000447				decimal_mult  dq 0.1                  ; 小數位數乘數
	   3FB999999999999A
 0000044F			    ten           dq 10.0                 ; 用於乘法運算
	   4024000000000000
 00000457 40000000			real_2 real4 2.0
 0000045B 41F00000		    real_30 real4 30.0
 0000045F 42000000			real_32 real4 32.0
 00000463 43480000		    real_200 real4 200.0
 00000467 43610000		    real_225 real4 225.0
 0000046B 43E10000		    real_450 real4 450.0
 0000046F 44340000			real_720 real4 720.0
 00000473 44A00000			real_1280 real4 1280.0
 00000477 49742400			real_1000000 real4 1000000.0
 0000047B 41F00000		    real_good_threshold real4 30.0
 0000047F 40800000		    real_great_threshold real4 4.0
 00000483 43B68000		    real_365 real4 365.0
 00000487 00000000		    real_0 real4 0.0
 0000048B 00000000		    loop_index dword 0
 00000000			.code

 00000000			readNoteChart PROC


 00000000			readNoteChart ENDP

 00000000			isQueueFull PROC
 00000000  A1 000002B3 R	    mov eax, _size
 00000005  83 F8 64		    cmp eax, MAX_DRUMS
 00000008  0F 94 C0		    sete al                ; 如果滿了，設置返回值為1
 0000000B  C3			    ret
 0000000C			isQueueFull ENDP

 0000000C			isQueueEmpty PROC
 0000000C  A1 000002B3 R	    mov eax, _size
 00000011  85 C0		    test eax, eax
 00000013  0F 94 C0		    sete al                ; 如果空，設置返回值為1
 00000016  C3			    ret
 00000017			isQueueEmpty ENDP

 00000017			enqueue PROC USES edi esi ebx @drum:DWORD 
				    ; 檢查是否滿了
 0000001D  E8 FFFFFFDE		    call isQueueFull
 00000022  84 C0		    test al, al
 00000024  75 2F		    jnz @end_enqueue

				    ; 加入隊列
 00000026  8B 75 08		    mov esi, @drum          ; drum參數
 00000029  8B 3D 000002AF R	    mov edi, rear          ; rear索引
 0000002F  89 34 BD		    mov drumQueue[edi*4], esi ; 將drum加入隊列
	   0000011B R

				    ; 更新rear和size
 00000036  FF 05 000002AF R	    inc rear
 0000003C  83 3D 000002AF R	    cmp rear, MAX_DRUMS
	   64
 00000043  72 0A		    jb SkipRearWrap
 00000045  C7 05 000002AF R	    mov rear, 0
	   00000000
 0000004F				SkipRearWrap:
 0000004F  FF 05 000002B3 R			inc _size
 00000055				@end_enqueue:
						ret
 0000005A			enqueue ENDP

 0000005A			dequeue PROC
				    ; 檢查是否空了
 0000005A  E8 FFFFFFAD		    call isQueueEmpty
 0000005F  84 C0		    test al, al
 00000061  75 36		    jnz QueueEmpty

				    ; 刪除隊列頭
 00000063  8B 3D 000002AB R	    mov edi, front          ; front索引
 00000069  8B 34 BD		    mov esi, drumQueue[edi*4] ; 獲取隊列頭的drum指針
	   0000011B R
 00000070  56			    push esi
 00000071  E8 00000000 E	    call sfSprite_destroy   ; 釋放sprite
 00000076  83 C4 04		    add esp, 4

				    ; 更新front和size
 00000079  FF 05 000002AB R	    inc front
 0000007F  83 3D 000002AB R	    cmp front, MAX_DRUMS
	   64
 00000086  72 0A		    jb SkipFrontWrap
 00000088  C7 05 000002AB R	    mov front, 0
	   00000000
 00000092			SkipFrontWrap:
 00000092  FF 0D 000002B3 R	    dec _size
 00000098  C3			    ret

 00000099			QueueEmpty:
 00000099  C3			    ret
 0000009A			dequeue ENDP

 0000009A			spawnDrum PROC USES esi edi _type:DWORD, targetTime:REAL4
				    ; 檢查是否滿了
 0000009F  E8 FFFFFF5C		    call isQueueFull
 000000A4  84 C0		    test al, al
 000000A6  0F 85 00000089	    jnz QueueFullSpawn

				    ; 創建新的Drum結構
 000000AC  6A 0C		    push 12                ; 分配空間
 000000AE  E8 00000000 E	    call malloc
 000000B3  83 C4 04		    add esp, 4
 000000B6  8B F0		    mov esi, eax           ; 保存新結構指針

				    ; 初始化Drum結構
 000000B8  6A 00			push 0
 000000BA  E8 00000000 E	    call sfSprite_create
 000000BF  83 C4 04		    add esp, 4
 000000C2  89 06		    mov [esi], eax       ; sprite指針

 000000C4  8B 45 08			mov eax, _type
 000000C7  89 46 04		    mov dword ptr [esi+4], eax
 000000CA  F3/ 0F 10 45		    movss xmm0, targetTime
	   0C
 000000CF  F3/ 0F 11 46		    movss dword ptr [esi+8], xmm0
	   08
				    

				    ; 設置音符的紋理
 000000D4  83 7D 08 01		    cmp _type, 1
 000000D8  75 14		    jne SetBlueTexture
 000000DA  6A 01		    push sfTrue
 000000DC  FF 35 000002B7 R	    push dword ptr redDrumTexture
 000000E2  FF 36		    push [esi]
 000000E4  E8 00000000 E	    call sfSprite_setTexture
 000000E9  83 C4 0C		    add esp, 12
 000000EC  EB 12		    jmp DoneTexture
 000000EE			SetBlueTexture:
 000000EE  6A 01		    push sfTrue
 000000F0  FF 35 000002BB R	    push dword ptr blueDrumTexture
 000000F6  FF 36		    push [esi]
 000000F8  E8 00000000 E	    call sfSprite_setTexture
 000000FD  83 C4 0C		    add esp, 12
 00000100			DoneTexture:

				    ; 設置初始位置

 00000100  83 EC 08		    sub esp, 8
 00000103  F3/ 0F 10 05		    movss xmm0, real_1280
	   00000473 R
 0000010B  F3/ 0F 11 04 24	    movss dword ptr [esp], xmm0
 00000110  F3/ 0F 10 05		    movss xmm0, real_200
	   00000463 R
 00000118  F3/ 0F 11 44 24	    movss dword ptr [esp+4], xmm0
	   04
 0000011E  FF 36		    push [esi]
 00000120  E8 00000000 E	    call sfSprite_setPosition
 00000125  83 C4 0C		    add esp, 12

				    ; 將Drum加入隊列
 00000128  56			    push esi
 00000129  E8 FFFFFEE9		    call enqueue
 0000012E  83 C4 04		    add esp, 4
				    ret

 00000135			QueueFullSpawn:
				    ret
 00000139			spawnDrum ENDP

 00000139			updateDrums PROC USES esi edi ebx
				    local i:DWORD
				    ; 檢查並移除過時的音符
 00000142  A1 000002B3 R	    mov eax, _size
 00000147  85 C0		    test eax, eax
 00000149  0F 84 000000B3	    jz SkipUpdate

 0000014F  8B 3D 000002AB R	    mov edi, front
 00000155  8B 34 BD		    mov esi, drumQueue[edi*4]
	   0000011B R
 0000015C  FF 36		    push [esi]            ; drum.sprite
 0000015E  E8 00000000 E	    call sfSprite_getPosition
 00000163  83 C4 04		    add esp, 4

				    ; 檢查音符是否完全超出判定圓圈
				    ; 判定圓圈左邊緣 = 450 - 30 = 420
 00000166  F3/ 0F 58 05		    addss xmm0, real_32   ; 加上音符寬度(約32像素)
	   0000045F R
 0000016E  F3/ 0F 10 0D		    movss xmm1, real_450  ; 載入判定圈x座標
	   0000046B R
 00000176  F3/ 0F 5C 0D		    subss xmm1, real_30   ; 減去半徑，獲得左邊緣
	   0000045B R
 0000017E  0F 2F C1		    comiss xmm0, xmm1     ; 比較 (note.x + width) < (circle.x - radius)
 00000181  73 29		    jae SkipFrontRemoval

				    ; 移除過時音符
 00000183  FF 36		    push [esi]
 00000185  E8 00000000 E	    call sfSprite_destroy
 0000018A  83 C4 04		    add esp, 4
 0000018D  FF 05 000002AB R	    inc front
 00000193  83 3D 000002AB R	    cmp front, MAX_DRUMS
	   64
 0000019A  72 0A		    jb SkipFrontWrap2
 0000019C  C7 05 000002AB R	    mov front, 0
	   00000000
 000001A6			SkipFrontWrap2:
 000001A6  FF 0D 000002B3 R	    dec _size
 000001AC			SkipFrontRemoval:

				    ; 更新音符位置
 000001AC  A1 000002B3 R	    mov eax, _size
 000001B1  89 45 FC		    mov i, eax
 000001B4  8B 3D 000002AB R	    mov edi, front
 000001BA			UpdateLoop:
 000001BA  8B 45 FC		    mov eax, i
 000001BD  83 F8 00		    cmp eax, 0
 000001C0  74 40		    jz EndUpdateLoop

 000001C2  8B 34 BD		    mov esi, drumQueue[edi*4]
	   0000011B R
 000001C9  FF 36		    push dword ptr [esi]
 000001CB  E8 00000000 E	    call sfSprite_getPosition
 000001D0  83 C4 04		    add esp, 4

 000001D3  F3/ 0F 5C 05		    subss xmm0, drumStep
	   000003FA R
				    
 000001DB  52			    push edx
 000001DC  83 EC 04		    sub esp, 4
 000001DF  F3/ 0F 11 04 24	    movss dword ptr [esp], xmm0
 000001E4  FF 36		    push [esi]
 000001E6  E8 00000000 E	    call sfSprite_setPosition
 000001EB  83 C4 08		    add esp, 8

 000001EE  47			    inc edi
 000001EF  83 FF 64		    cmp edi, MAX_DRUMS
 000001F2  72 05		    jb NoWrap
 000001F4  BF 00000000		    mov edi, 0
 000001F9			NoWrap:
 000001F9  8B 45 FC		    mov eax, i
 000001FC  48			    dec eax
 000001FD  89 45 FC		    mov i, eax
 00000200  EB B8		    jmp UpdateLoop
 00000202			EndUpdateLoop:
 00000202			SkipUpdate:
				    ret
 00000207			updateDrums ENDP

 00000207			createJudgementCircle PROC USES esi edi
				    ; 創建圓形形狀
 00000209  6A 00		    push 0
 0000020B  E8 00000000 E	    call sfCircleShape_create
 00000210  83 C4 04		    add esp, 4
 00000213  A3 000002E6 R	    mov judgementCircle, eax

				    ; 設置圓形半徑
 00000218  FF 35 0000045B R	    push real_30
 0000021E  FF 35 000002E6 R	    push dword ptr [judgementCircle]
 00000224  E8 00000000 E	    call sfCircleShape_setRadius
 00000229  83 C4 08		    add esp, 8

				    ; 設置圓形位置
 0000022C  FF 35 00000467 R	    push real_225               ; HIT_POSITION_X, 200+25
 00000232  FF 35 0000046B R	    push real_450
 00000238  FF 35 000002E6 R	    push dword ptr [judgementCircle]
 0000023E  E8 00000000 E	    call sfCircleShape_setPosition
 00000243  83 C4 0C		    add esp, 12

				    ; 設置填充顏色
 00000246  FF 35 00000406 R	    push transparentColor
 0000024C  FF 35 000002E6 R	    push dword ptr [judgementCircle]
 00000252  E8 00000000 E	    call sfCircleShape_setFillColor
 00000257  83 C4 08		    add esp, 8

				    ; 設置邊框厚度
 0000025A  FF 35 00000457 R	    push real_2
 00000260  FF 35 000002E6 R	    push dword ptr [judgementCircle]
 00000266  E8 00000000 E	    call sfCircleShape_setOutlineThickness
 0000026B  83 C4 08		    add esp, 8

				    ; 設置邊框顏色
 0000026E  FF 35 00000402 R	    push white_color
 00000274  FF 35 000002E6 R	    push dword ptr [judgementCircle]
 0000027A  E8 00000000 E	    call sfCircleShape_setOutlineColor
 0000027F  83 C4 08		    add esp, 8

				    ret
 00000285			createJudgementCircle ENDP

 00000285			@ld_background PROC
				    ; 創建背景紋理
 00000285  6A 00		    push 0
 00000287  68 00000070 R	    push offset bgPath
 0000028C  E8 00000000 E	    call sfTexture_createFromFile
 00000291  83 C4 08		    add esp, 8
 00000294  A3 000002DE R	    mov bgTexture, eax
				    
				    ; 創建背景精靈
 00000299  E8 00000000 E	    call sfSprite_create
 0000029E  A3 000002E2 R	    mov DWORD PTR [bgSprite], eax
				    
				    ; 設定紋理
 000002A3  6A 01		    push 1
 000002A5  A1 000002DE R	    mov eax, DWORD PTR [bgTexture]
 000002AA  50			    push eax
 000002AB  8B 0D 000002E2 R	    mov ecx, DWORD PTR [bgSprite]
 000002B1  51			    push ecx
 000002B2  E8 00000000 E	    call sfSprite_setTexture
 000002B7  83 C4 0C		    add esp, 12
 000002BA  C3			    ret
 000002BB			@ld_background ENDP

 000002BB			@countDown_text proc
 000002BB  6A 00			push 0
 000002BD  68 000002BF R		push offset font_path
 000002C2  E8 00000000 E		call sfFont_createFromFile
 000002C7  83 C4 08			add esp, 8
 000002CA  A3 000002D6 R		mov font, eax

 000002CF  E8 00000000 E		call sfText_create
 000002D4  A3 000002DA R		mov countDownText, eax

 000002D9  FF 35 000002D6 R		push font
 000002DF  FF 35 000002DA R		push dword ptr [countDownText]
 000002E5  E8 00000000 E		call sfText_setFont
 000002EA  83 C4 08			add esp, 8

 000002ED  6A 48			push 72
 000002EF  FF 35 000002DA R		push dword ptr [countDownText]
 000002F5  E8 00000000 E		call sfText_setCharacterSize
 000002FA  83 C4 08			add esp, 8

 000002FD  F3/ 0F 10 05			movss xmm0, [real_720]
	   0000046F R
 00000305  F3/ 0F 5E 05			divss xmm0, [real_2]
	   00000457 R
 0000030D  F3/ 0F 5C 05			subss xmm0, [real_32]
	   0000045F R
 00000315  F3/ 0F 11 44 24		movss dword ptr [esp-4], xmm0
	   FC

 0000031B  F3/ 0F 10 05			movss xmm0, [real_1280]
	   00000473 R
 00000323  F3/ 0F 5E 05			divss xmm0, [real_2]
	   00000457 R
 0000032B  F3/ 0F 5C 05			subss xmm0, [real_32]
	   0000045F R
 00000333  F3/ 0F 11 44 24		movss dword ptr [esp-8], xmm0
	   F8

 00000339  8B F4			mov esi, esp
 0000033B  FF 76 FC			push dword ptr [esi-4]
 0000033E  FF 76 F8			push dword ptr [esi-8]
 00000341  FF 35 000002DA R		push dword ptr [countDownText]
 00000347  E8 00000000 E		call sfText_setPosition
 0000034C  83 C4 0C			add esp, 12

 0000034F  C3				ret
 00000350			@countDown_text ENDP

 00000350			processHit proc uses ebx esi edi hitType:DWORD
				    local delta:DWORD
				    
				    ; 檢查佇列是否為空
 00000359  E8 FFFFFCAE		    call isQueueEmpty
 0000035E  84 C0		    test al, al
 00000360  0F 85 000000E6	    jnz @done_processing
				    
				    ; 獲取最前面的音符
 00000366  8B 3D 000002AB R	    mov edi, front
 0000036C  8B 34 BD		    mov esi, drumQueue[edi*4]
	   0000011B R
				    
				    ; 獲取音符位置
 00000373  FF 36		    push dword ptr [esi]
 00000375  E8 00000000 E	    call sfSprite_getPosition
 0000037A  83 C4 04		    add esp, 4
				    
				    ; 計算與判定線的距離 (450是判定線位置)
 0000037D  F3/ 0F 5C 05		    subss xmm0, real_450
	   0000046B R
 00000385  F3/ 0F 58 05		    addss xmm0, real_30
	   0000045B R
				    
				    ; 取絕對值
 0000038D  0F 54 05		    andps xmm0, [abs_mask]
	   00000000 R
				    
				    ; 首先檢查音符類型是否匹配
 00000394  8B 56 04		    mov edx, dword ptr [esi+4]
 00000397  3B 55 08		    cmp edx, [hitType]
 0000039A  0F 85 00000096	    jne @miss_hit         ; 如果類型不匹配，直接判定為MISS
				    
				    ; GREAT判定 (誤差 <= 25)
 000003A0  F3/ 0F 10 0D		    movss xmm1, real_30       ; 載入判定圈半徑
	   0000045B R
 000003A8  F3/ 0F 5C 0D		    subss xmm1, real_4        ; 25單位
	   0000043F R
 000003B0  0F 2F C1		    comiss xmm0, xmm1         ; 比較音符中心點距離是否 <= 25
 000003B3  76 37		    jbe @great_hit
				    
				    ; MISS判定 (誤差 > 40)
 000003B5  F3/ 0F 10 15		    movss xmm2, real_30       ; 載入判定圈半徑
	   0000045B R
 000003BD  F3/ 0F 58 15		    addss xmm2, real_2        ; 加上10個單位
	   00000457 R
 000003C5  F3/ 0F 58 15		    addss xmm2, real_2
	   00000457 R
 000003CD  F3/ 0F 58 15		    addss xmm2, real_2
	   00000457 R
 000003D5  F3/ 0F 58 15		    addss xmm2, real_2
	   00000457 R
 000003DD  F3/ 0F 58 15		    addss xmm2, real_2
	   00000457 R
 000003E5  0F 2F C2		    comiss xmm0, xmm2         ; 比較是否 > 40
 000003E8  77 4C		    ja @miss_hit
				    
				    ; 其餘情況 -> GOOD
 000003EA  EB 26		    jmp @good_hit
				    
 000003EC			@great_hit:
 000003EC  B8 000000EF R	    mov eax, offset stats
 000003F1  FF 00		    inc dword ptr [eax]              ; great_count
 000003F3  FF 40 0C		    inc dword ptr [eax+12]           ; current_combo
				    
				    ; 計算分數 (combo * 10 + 300)
 000003F6  8B 48 0C		    mov ecx, dword ptr [eax+12]      ; 取得current_combo
 000003F9  6B C9 0A		    imul ecx, 10
 000003FC  81 C1 0000012C	    add ecx, 300
 00000402  01 48 14		    add dword ptr [eax+20], ecx      ; 加到total_score
				    
				    ; 更新max_combo
 00000405  8B 48 0C		    mov ecx, dword ptr [eax+12]      ; current_combo
 00000408  3B 48 10		    cmp ecx, dword ptr [eax+16]      ; 比較max_combo
 0000040B  7E 3A		    jle @remove_note
 0000040D  89 48 10		    mov dword ptr [eax+16], ecx      ; 更新max_combo
 00000410  EB 35		    jmp @remove_note
				    
 00000412			@good_hit:
 00000412  B8 000000EF R	    mov eax, offset stats
 00000417  FF 40 04		    inc dword ptr [eax+4]            ; good_count
 0000041A  FF 40 0C		    inc dword ptr [eax+12]           ; current_combo
				    
				    ; 計算分數 (combo * 5 + 100)
 0000041D  8B 48 0C		    mov ecx, dword ptr [eax+12]      ; 取得current_combo
 00000420  6B C9 05		    imul ecx, 5
 00000423  83 C1 64		    add ecx, 100
 00000426  01 48 14		    add dword ptr [eax+20], ecx      ; 加到total_score
				    
				    ; 更新max_combo
 00000429  8B 48 0C		    mov ecx, dword ptr [eax+12]      ; current_combo
 0000042C  3B 48 10		    cmp ecx, dword ptr [eax+16]      ; 比較max_combo
 0000042F  7E 16		    jle @remove_note
 00000431  89 48 10		    mov dword ptr [eax+16], ecx      ; 更新max_combo
 00000434  EB 11		    jmp @remove_note
				    
 00000436			@miss_hit:
 00000436  B8 000000EF R	    mov eax, offset stats
 0000043B  FF 40 08		    inc dword ptr [eax+8]            ; miss_count
 0000043E  C7 40 0C		    mov dword ptr [eax+12], 0        ; current_combo = 0
	   00000000
 00000445  EB 05		    jmp @done_processing
				    
 00000447			@remove_note:
 00000447  E8 FFFFFC0E		    call dequeue
				    
 0000044C			@done_processing:
 00000450  C2 0004		    ret 4

 00000453			processHit endp
main_game_page.asm(533) : warning A6004:procedure argument or local not referenced : delta

				;播放音效
 00000453			initializeSounds PROC
				    ; 創建紅色音符音效
 00000453  68 000000BE R	    push offset red_note_sound_path
 00000458  E8 00000000 E	    call sfMusic_createFromFile
 0000045D  83 C4 04		    add esp, 4
 00000460  A3 00000050 R	    mov redNoteSound, eax

				    ; 創建藍色音符音效
 00000465  68 000000D6 R	    push offset blue_note_sound_path
 0000046A  E8 00000000 E	    call sfMusic_createFromFile
 0000046F  83 C4 04		    add esp, 4
 00000472  A3 00000054 R	    mov blueNoteSound, eax

 00000477  C3			    ret
 00000478			initializeSounds ENDP

				; 修改紅色音符音效函數
 00000478			rednote_sound PROC
 00000478  FF 35 00000050 R	    push redNoteSound
 0000047E  E8 00000000 E	    call sfMusic_stop    ; 先停止之前的播放
 00000483  83 C4 04		    add esp, 4

 00000486  FF 35 00000050 R	    push redNoteSound
 0000048C  E8 00000000 E	    call sfMusic_play    ; 播放音效
 00000491  83 C4 04		    add esp, 4
 00000494  C3			    ret
 00000495			rednote_sound ENDP

				; 修改藍色音符音效函數
 00000495			bluenote_sound PROC
 00000495  FF 35 00000054 R	    push blueNoteSound
 0000049B  E8 00000000 E	    call sfMusic_stop    ; 先停止之前的播放
 000004A0  83 C4 04		    add esp, 4

 000004A3  FF 35 00000054 R	    push blueNoteSound
 000004A9  E8 00000000 E	    call sfMusic_play    ; 播放音效
 000004AE  83 C4 04		    add esp, 4
 000004B1  C3			    ret
 000004B2			bluenote_sound ENDP

 000004B2			main_game_page PROC window:dword,musicPath:dword,noteChart:dword
 000004B5  B8 000000EF R	    mov eax, offset stats
 000004BA  C7 00 00000000	    mov dword ptr [eax], 0      ; great_count
 000004C0  C7 40 04		    mov dword ptr [eax+4], 0    ; good_count
	   00000000
 000004C7  C7 40 08		    mov dword ptr [eax+8], 0    ; miss_count
	   00000000
 000004CE  C7 40 0C		    mov dword ptr [eax+12], 0   ; current_combo
	   00000000
 000004D5  C7 40 10		    mov dword ptr [eax+16], 0   ; max_combo
	   00000000
 000004DC  C7 40 14		    mov dword ptr [eax+20], 0   ; total_score
	   00000000

				    ; load background
 000004E3  E8 FFFFFD9D		    call @ld_background
 000004E8  E8 FFFFFF66		    call initializeSounds    ; 初始化音效

				    ; load red note texture
 000004ED  6A 00		    push 0
 000004EF  68 0000008B R	    push offset redNotePath
 000004F4  E8 00000000 E	    call sfTexture_createFromFile
 000004F9  83 C4 08		    add esp, 8
 000004FC  A3 000002B7 R	    mov redDrumTexture, eax

				    ; load blue note texture
 00000501  6A 00		    push 0
 00000503  68 000000A4 R	    push offset blueNotePath
 00000508  E8 00000000 E	    call sfTexture_createFromFile
 0000050D  83 C4 08		    add esp, 8
 00000510  A3 000002BB R	    mov blueDrumTexture, eax

				    ; create judgement circle
 00000515  E8 FFFFFCED		    call createJudgementCircle

				    ; create music
 0000051A  6A 00		    push 0
 0000051C  FF 75 0C		    push dword ptr [musicPath]
 0000051F  E8 00000000 E	    call sfMusic_createFromFile
 00000524  83 C4 08		    add esp, 8
 00000527  A3 000002EA R	    mov music, eax

 0000052C  6A 00		    push 0
 0000052E  FF 35 000002EA R	    push music
 00000534  E8 00000000 E	    call sfMusic_setLoop
 00000539  83 C4 08		    add esp, 8

 0000053C  E8 00000000 E	    call sfClock_create
 00000541  A3 000002EE R	    mov spawnClock, eax

				    ; 創建延遲計時器
 00000546  E8 00000000 E	    call sfClock_create
 0000054B  A3 00000018 R	    mov delay_clock, eax

 00000550			@main_loop:
 00000550  8B 45 08		    mov eax, DWORD PTR [window]
 00000553  50			    push eax
 00000554  E8 00000000 E	    call sfRenderWindow_isOpen
 00000559  83 C4 04		    add esp, 4
 0000055C  85 C0		    test eax, eax
 0000055E  0F 84 0000034E	    je exit_program

				    ; 檢查延遲狀態
 00000564  A1 00000014 R	    mov eax, delay_started
 00000569  83 F8 00		    cmp eax, 0
 0000056C  75 1D		    jne check_game_start    ; 如果延遲已經開始，檢查遊戲開始

				    ; 開始延遲計時
 0000056E  C7 05 00000014 R	    mov delay_started, 1
	   00000001
 00000578  FF 35 00000018 R	    push delay_clock
 0000057E  E8 00000000 E	    call sfClock_restart
 00000583  83 C4 04		    add esp, 4
 00000586  E9 000000B1		    jmp @event_loop

 0000058B			check_game_start:
				    ; 檢查是否已經過了延遲時間
 0000058B  FF 35 00000018 R	    push delay_clock
 00000591  E8 00000000 E	    call sfClock_getElapsedTime
 00000596  F3/ 0F 2A C8		    cvtsi2ss xmm1, eax
				    
 0000059A  F3/ 0F 10 05		    movss xmm0, [real_1000000]
	   00000477 R
 000005A2  F3/ 0F 5E C8		    divss xmm1, xmm0        ; 轉換為秒
				    
 000005A6  F3/ 0F 10 05		    movss xmm0, dword ptr [initial_delay_1]
	   00000010 R
 000005AE  0F 2F C8		    comiss xmm1, xmm0       ; 比較是否超過延遲時間
 000005B1  0F 82 00000085	    jb @event_loop          ; 如果還沒超過延遲時間，繼續等待

				    ; 如果超過延遲時間且遊戲還沒開始，開始遊戲
 000005B7  A1 000002FE R	    mov eax, gameStarted
 000005BC  83 F8 00		    cmp eax, 0
 000005BF  75 2E		    jne deter_offset

				    ; 開始播放音樂
 000005C1  FF 35 000002EA R	    push music
 000005C7  E8 00000000 E	    call sfMusic_play
 000005CC  83 C4 04		    add esp, 4

 000005CF  FF 35 000002EE R	    push spawnClock
 000005D5  E8 00000000 E	    call sfClock_restart
 000005DA  83 C4 04		    add esp, 4

 000005DD  D9 EE		    fldz
 000005DF  D9 1D 000002FA R	    fstp gameStartTime
 000005E5  C7 05 000002FE R	    mov gameStarted, 1
	   00000001

 000005EF			deter_offset:
 000005EF  A1 000002FE R	    mov eax, gameStarted
 000005F4  83 F8 01		    cmp eax, 1
 000005F7  75 43		    jne @event_loop

 000005F9  D9 EE		    fldz
 000005FB  D9 05 0000010B R	    fld msInfo._offset
 00000601  DF F1		    fcomip st(0), st(1)
 00000603  73 37		    jae @event_loop
 00000605  DD D8		    fstp st(0)

 00000607  FF 35 000002EA R	    push music
 0000060D  E8 00000000 E	    call sfMusic_getStatus
 00000612  83 C4 04		    add esp, 4
 00000615  83 F8 02		    cmp eax, sfPlaying
 00000618  74 22		    je @event_loop

 0000061A  D9 05 0000010B R	    fld msInfo._offset
 00000620  D9 E0		    fchs
 00000622  D9 05 000002F2 R	    fld currentTime
 00000628  DF F1		    fcomip st(0), st(1)
 0000062A  72 10		    jb @event_loop
 0000062C  DD D8		    fstp st(0)

 0000062E  FF 35 000002EA R	    push music
 00000634  E8 00000000 E	    call sfMusic_play
 00000639  83 C4 04		    add esp, 4

 0000063C			    @event_loop:
 0000063C  8D 35 00000020 R	        lea esi, event
 00000642  56			        push esi
 00000643  8B 45 08		        mov eax, DWORD PTR [window]
 00000646  50			        push eax
 00000647  E8 00000000 E	        call sfRenderWindow_pollEvent
 0000064C  83 C4 08		        add esp, 8
 0000064F  85 C0		        test eax, eax
 00000651  74 46		        je @controll_drum

 00000653  83 3E 00		        cmp dword ptr [esi].sfEvent._type, sfEvtClosed
 00000656  0F 84 000001A1	        je @end

 0000065C  83 3E 05		        cmp dword ptr [esi].sfEvent._type, sfEvtKeyPressed
 0000065F  74 02		        je @check_key_press

				    ; check_gameStarted:
				        ; cmp gameStarted, 1
				        ; je @check_key_press

 00000661  EB D9		        jmp @event_loop

				        ; 修改按鍵處理部分
 00000663			        @check_key_press:
				   
				            ; 檢查是否是F鍵或J鍵
 00000663  83 7E 04 05		            cmp dword ptr [esi+4], sfKeyF
 00000667  74 14		            je @handle_red
 00000669  83 7E 04 09		            cmp dword ptr [esi+4], sfKeyJ
 0000066D  74 0E		            je @handle_red
				    
				            ; 檢查是否是D鍵或K鍵
 0000066F  83 7E 04 03		            cmp dword ptr [esi+4], sfKeyD
 00000673  74 16		            je @handle_blue
 00000675  83 7E 04 0A		            cmp dword ptr [esi+4], sfKeyK
 00000679  74 10		            je @handle_blue
				    
 0000067B  EB BF		            jmp @event_loop

 0000067D			            @handle_red:
 0000067D  E8 FFFFFDF6		                call rednote_sound
 00000682  6A 01		                push 1                   ; 紅色音符類型
 00000684  E8 FFFFFCC7		                call processHit
 00000689  EB 0E		                jmp @controll_drum

 0000068B			            @handle_blue:
 0000068B  E8 FFFFFE05		                call bluenote_sound
 00000690  6A 02		                push 2                   ; 藍色音符類型
 00000692  E8 FFFFFCB9		                call processHit
 00000697  EB 00		                jmp @controll_drum

 00000699			            @controll_drum:
 00000699  A1 000002FE R	                mov eax, gameStarted
 0000069E  83 F8 00		                cmp eax, 0
 000006A1  0F 84 000000C1	                je @render_window

 000006A7  FF 35 000002EE R	                push spawnClock
 000006AD  E8 00000000 E	                call sfClock_getElapsedTime
 000006B2  F3/ 0F 2A C8		                cvtsi2ss xmm1, eax

 000006B6  F3/ 0F 10 05		                movss xmm0, [real_1000000]
	   00000477 R
 000006BE  F3/ 0F 5E C8		                divss xmm1, xmm0

 000006C2  F3/ 0F 11 0D		                movss dword ptr [currentTime], xmm1
	   000002F2 R

 000006CA			spawn_loop:
 000006CA  A1 000002F6 R	    mov eax, currentNoteIndex
 000006CF  8B 1D 0000037A R	    mov ebx, totalNotes
 000006D5  3B C3		    cmp eax, ebx
 000006D7  73 48		    jae check_last_note    ; 如果所有音符都已生成，檢查最後一個音符

 000006D9  F3/ 0F 10 05		    movss xmm0, [currentTime]
	   000002F2 R
 000006E1  8B 1D 000002F6 R	    mov ebx, currentNoteIndex
 000006E7  C1 E3 02		    shl ebx, 2
 000006EA  F3/ 0F 10 8B		    movss xmm1, noteTimings[ebx]
	   00000382 R
 000006F2  0F 2E C1		    ucomiss xmm0, xmm1
 000006F5  72 6C		    jb loop_end

 000006F7  A1 000002F6 R	    mov eax, currentNoteIndex
 000006FC  8B 1C 85		    mov ebx, notes[eax*4]
	   00000302 R
 00000703  83 FB 00		    cmp ebx, 0
 00000706  74 11		    je skip_spawn

 00000708  83 EC 04		    sub esp, 4
 0000070B  F3/ 0F 11 0C 24	    movss dword ptr [esp], xmm1
 00000710  53			    push ebx
 00000711  E8 FFFFF984		    call spawnDrum
 00000716  83 C4 08		    add esp, 8

 00000719			skip_spawn:
 00000719  FF 05 000002F6 R	    inc currentNoteIndex
 0000071F  EB A9		    jmp spawn_loop

 00000721			check_last_note:
				    ; 檢查是否有音符在隊列中
 00000721  A1 000002B3 R	    mov eax, _size
 00000726  85 C0		    test eax, eax
 00000728  0F 84 0000014D	    jz @end_game         ; 如果沒有音符且都已生成，結束遊戲

				    ; 檢查最後一個音符的位置
 0000072E  8B 3D 000002AB R	    mov edi, front
 00000734  8B 0D 000002B3 R	    mov ecx, _size
 0000073A  49			    dec ecx              ; 獲取最後一個音符的索引
 0000073B  03 F9		    add edi, ecx
 0000073D  83 FF 64		    cmp edi, MAX_DRUMS
 00000740  72 03		    jb no_wrap
 00000742  83 EF 64		    sub edi, MAX_DRUMS
 00000745			no_wrap:
 00000745  8B 34 BD		    mov esi, drumQueue[edi*4]
	   0000011B R
 0000074C  FF 36		    push [esi]
 0000074E  E8 00000000 E	    call sfSprite_getPosition
 00000753  83 C4 04		    add esp, 4
				    
				    ; 檢查音符是否已離開畫面
 00000756  0F 2F 05		    comiss xmm0, real_0   ; 比較 x 位置是否小於 0
	   00000487 R
 0000075D  0F 82 00000118	    jb @end_game         ; 如果最後一個音符已離開畫面，結束遊戲

 00000763			loop_end:
 00000763  E8 FFFFF9D1		    call updateDrums

 00000768			@render_window:
 00000768  FF 35 000003FE R	    push blackColor
 0000076E  FF 75 08		    push window
 00000771  E8 00000000 E	    call sfRenderWindow_clear
 00000776  83 C4 08		    add esp, 8

 00000779  6A 00		    push 0
 0000077B  A1 000002E2 R	    mov eax, DWORD PTR [bgSprite]
 00000780  50			    push eax
 00000781  8B 4D 08		    mov ecx, DWORD PTR [window]
 00000784  51			    push ecx
 00000785  E8 00000000 E	    call sfRenderWindow_drawSprite
 0000078A  83 C4 0C		    add esp, 12

 0000078D  A1 000002B3 R	    mov eax, _size
 00000792  85 C0		    test eax, eax
 00000794  74 44		    jz @display
 00000796  A3 0000048B R	    mov loop_index, eax
 0000079B  8B 3D 000002AB R	    mov edi, front

 000007A1			draw_notes:
 000007A1  A1 0000048B R	    mov eax, loop_index
 000007A6  83 F8 00		    cmp eax, 0
 000007A9  74 2F		    jz @display

 000007AB  6A 00		    push 0
 000007AD  8B 04 BD		    mov eax, [drumQueue + edi*4]
	   0000011B R
 000007B4  FF 30		    push dword ptr [eax]
 000007B6  8B 4D 08		    mov ecx, DWORD PTR [window]
 000007B9  51			    push ecx
 000007BA  E8 00000000 E	    call sfRenderWindow_drawSprite
 000007BF  83 C4 0C		    add esp, 12

 000007C2  47			    inc edi
 000007C3  83 FF 64		    cmp edi, MAX_DRUMS
 000007C6  75 05		    jne @next_note
 000007C8  BF 00000000		    mov edi, 0

 000007CD			@next_note:
 000007CD  A1 0000048B R	    mov eax, loop_index
 000007D2  48			    dec eax
 000007D3  A3 0000048B R	    mov loop_index, eax
 000007D8  EB C7		    jmp draw_notes

 000007DA			@display:
 000007DA  6A 00		    push 0
 000007DC  FF 35 000002E6 R	    push dword ptr [judgementCircle]
 000007E2  FF 75 08		    push DWORD PTR [window]
 000007E5  E8 00000000 E	    call sfRenderWindow_drawCircleShape
 000007EA  83 C4 0C		    add esp, 12

 000007ED  FF 75 08		    push window
 000007F0  E8 00000000 E	    call sfRenderWindow_display
 000007F5  83 C4 04		    add esp, 4

 000007F8  E9 FFFFFD53		    jmp @main_loop

 000007FD			@end:
 000007FD  FF 35 000002EA R	    push music
 00000803  E8 00000000 E	    call sfMusic_destroy
 00000808  83 C4 04		    add esp, 4

 0000080B  FF 35 000002DE R	    push bgTexture
 00000811  E8 00000000 E	    call sfTexture_destroy
 00000816  83 C4 04		    add esp, 4

 00000819  FF 35 000002E2 R	    push bgSprite
 0000081F  E8 00000000 E	    call sfSprite_destroy
 00000824  83 C4 04		    add esp, 4

 00000827  FF 35 000002E6 R	    push judgementCircle
 0000082D  E8 00000000 E	    call sfCircleShape_destroy
 00000832  83 C4 04		    add esp, 4

 00000835  FF 35 000002D6 R	    push font
 0000083B  E8 00000000 E	    call sfFont_destroy
 00000840  83 C4 04		    add esp, 4

 00000843  FF 35 000002DA R	    push countDownText
 00000849  E8 00000000 E	    call sfText_destroy
 0000084E  83 C4 04		    add esp, 4

				    ; 釋放紅色音符音效
 00000851  FF 35 00000050 R	    push redNoteSound
 00000857  E8 00000000 E	    call sfMusic_destroy
 0000085C  83 C4 04		    add esp, 4

				    ; 釋放藍色音符音效
 0000085F  FF 35 00000054 R	    push blueNoteSound
 00000865  E8 00000000 E	    call sfMusic_destroy
 0000086A  83 C4 04		    add esp, 4

 0000086D  FF 35 000002EA R	    push music
 00000873  E8 00000000 E	    call sfMusic_destroy
 00000878  83 C4 04		    add esp, 4

 0000087B			@end_game:
 0000087B  FF 35 000002EA R	    push music
 00000881  E8 00000000 E	    call sfMusic_stop    ; 停止音樂
 00000886  83 C4 04		    add esp, 4

 00000889  FF 35 000000FF R	    push dword ptr [stats+16]    ; max_combo
 0000088F  FF 35 00000103 R	    push dword ptr [stats+20]    ; total_score
 00000895  FF 35 000000F7 R	    push dword ptr [stats+8]       ; miss_count
 0000089B  FF 35 000000F3 R	    push dword ptr [stats+4]     ; good_count
 000008A1  FF 35 000000EF R	    push dword ptr [stats]     ; great_count
 000008A7  FF 75 08		    push window
 000008AA  E8 00000000 E	    call end_game_page
 000008AF  83 C4 18		    add esp, 24

 000008B2			exit_program:
				    ret

 000008B4			main_game_page ENDP
main_game_page.asm(937) : warning A6004:procedure argument or local not referenced : noteChart

				END main_game_page
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/26/24 19:51:02
main_game_page.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Drum . . . . . . . . . . . . . .	 0000000C
  sprite . . . . . . . . . . . .	 00000000	 DWord
  _type  . . . . . . . . . . . .	 00000004	 DWord
  targetTime . . . . . . . . . .	 00000008	 DWord
GameStats  . . . . . . . . . . .	 00000018
  great_count  . . . . . . . . .	 00000000	 DWord
  good_count . . . . . . . . . .	 00000004	 DWord
  miss_count . . . . . . . . . .	 00000008	 DWord
  current_combo  . . . . . . . .	 0000000C	 DWord
  max_combo  . . . . . . . . . .	 00000010	 DWord
  total_score  . . . . . . . . .	 00000014	 DWord
MusicInfo  . . . . . . . . . . .	 00000014
  bpm  . . . . . . . . . . . . .	 00000000	 DWord
  _offset  . . . . . . . . . . .	 00000004	 DWord
  spawnTime  . . . . . . . . . .	 00000008	 DWord
  currentBar . . . . . . . . . .	 0000000C	 DWord
  notesInBar . . . . . . . . . .	 00000010	 DWord
key  . . . . . . . . . . . . . .	 00000014
  code . . . . . . . . . . . . .	 00000000	 DWord
  alt  . . . . . . . . . . . . .	 00000004	 DWord
  control  . . . . . . . . . . .	 00000008	 DWord
  shift  . . . . . . . . . . . .	 0000000C	 DWord
  system . . . . . . . . . . . .	 00000010	 DWord
mouseButton  . . . . . . . . . .	 0000000C
  button . . . . . . . . . . . .	 00000000	 DWord
  x  . . . . . . . . . . . . . .	 00000004	 DWord
  y  . . . . . . . . . . . . . .	 00000008	 DWord
sfColor  . . . . . . . . . . . .	 00000004
  r  . . . . . . . . . . . . . .	 00000000	 Byte
  g  . . . . . . . . . . . . . .	 00000001	 Byte
  b  . . . . . . . . . . . . . .	 00000002	 Byte
  a  . . . . . . . . . . . . . .	 00000003	 Byte
sfEvent  . . . . . . . . . . . .	 00000030
  _type  . . . . . . . . . . . .	 00000000	 DWord
  _size  . . . . . . . . . . . .	 00000004	 DWord
  mouse  . . . . . . . . . . . .	 00000008	 
  _key . . . . . . . . . . . . .	 00000014	 
  mouseMove  . . . . . . . . . .	 00000028	 QWord
sfFloatRect  . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  _width . . . . . . . . . . . .	 00000008	 DWord
  height . . . . . . . . . . . .	 0000000C	 DWord
sfVector2f . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVector2i . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVideoMode  . . . . . . . . . .	 0000000C
  _width . . . . . . . . . . . .	 00000000	 DWord
  height . . . . . . . . . . . .	 00000004	 DWord
  bpp  . . . . . . . . . . . . .	 00000008	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 0000048F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008B4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@countDown_text  . . . . . . . .	P Near	 000002BB _TEXT	Length= 00000095 Public C
@ld_background . . . . . . . . .	P Near	 00000285 _TEXT	Length= 00000036 Public C
bluenote_sound . . . . . . . . .	P Near	 00000495 _TEXT	Length= 0000001D Public C
createJudgementCircle  . . . . .	P Near	 00000207 _TEXT	Length= 0000007E Public C
dequeue  . . . . . . . . . . . .	P Near	 0000005A _TEXT	Length= 00000040 Public C
  SkipFrontWrap  . . . . . . . .	L Near	 00000092 _TEXT	
  QueueEmpty . . . . . . . . . .	L Near	 00000099 _TEXT	
enqueue  . . . . . . . . . . . .	P Near	 00000017 _TEXT	Length= 00000043 Public C
  @drum  . . . . . . . . . . . .	DWord	 bp + 00000008
  SkipRearWrap . . . . . . . . .	L Near	 0000004F _TEXT	
  @end_enqueue . . . . . . . . .	L Near	 00000055 _TEXT	
initializeSounds . . . . . . . .	P Near	 00000453 _TEXT	Length= 00000025 Public C
isQueueEmpty . . . . . . . . . .	P Near	 0000000C _TEXT	Length= 0000000B Public C
isQueueFull  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000C Public C
main_game_page . . . . . . . . .	P Near	 000004B2 _TEXT	Length= 00000402 Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
  musicPath  . . . . . . . . . .	DWord	 bp + 0000000C
  noteChart  . . . . . . . . . .	DWord	 bp + 00000010
  @main_loop . . . . . . . . . .	L Near	 00000550 _TEXT	
  check_game_start . . . . . . .	L Near	 0000058B _TEXT	
  deter_offset . . . . . . . . .	L Near	 000005EF _TEXT	
  @event_loop  . . . . . . . . .	L Near	 0000063C _TEXT	
  @check_key_press . . . . . . .	L Near	 00000663 _TEXT	
  @handle_red  . . . . . . . . .	L Near	 0000067D _TEXT	
  @handle_blue . . . . . . . . .	L Near	 0000068B _TEXT	
  @controll_drum . . . . . . . .	L Near	 00000699 _TEXT	
  spawn_loop . . . . . . . . . .	L Near	 000006CA _TEXT	
  skip_spawn . . . . . . . . . .	L Near	 00000719 _TEXT	
  check_last_note  . . . . . . .	L Near	 00000721 _TEXT	
  no_wrap  . . . . . . . . . . .	L Near	 00000745 _TEXT	
  loop_end . . . . . . . . . . .	L Near	 00000763 _TEXT	
  @render_window . . . . . . . .	L Near	 00000768 _TEXT	
  draw_notes . . . . . . . . . .	L Near	 000007A1 _TEXT	
  @next_note . . . . . . . . . .	L Near	 000007CD _TEXT	
  @display . . . . . . . . . . .	L Near	 000007DA _TEXT	
  @end . . . . . . . . . . . . .	L Near	 000007FD _TEXT	
  @end_game  . . . . . . . . . .	L Near	 0000087B _TEXT	
  exit_program . . . . . . . . .	L Near	 000008B2 _TEXT	
processHit . . . . . . . . . . .	P Near	 00000350 _TEXT	Length= 00000103 Public C
  hitType  . . . . . . . . . . .	DWord	 bp + 00000008
  delta  . . . . . . . . . . . .	DWord	 bp - 00000004
  @great_hit . . . . . . . . . .	L Near	 000003EC _TEXT	
  @good_hit  . . . . . . . . . .	L Near	 00000412 _TEXT	
  @miss_hit  . . . . . . . . . .	L Near	 00000436 _TEXT	
  @remove_note . . . . . . . . .	L Near	 00000447 _TEXT	
  @done_processing . . . . . . .	L Near	 0000044C _TEXT	
readNoteChart  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000000 Public C
rednote_sound  . . . . . . . . .	P Near	 00000478 _TEXT	Length= 0000001D Public C
spawnDrum  . . . . . . . . . . .	P Near	 0000009A _TEXT	Length= 0000009F Public C
  _type  . . . . . . . . . . . .	DWord	 bp + 00000008
  targetTime . . . . . . . . . .	DWord	 bp + 0000000C
  SetBlueTexture . . . . . . . .	L Near	 000000EE _TEXT	
  DoneTexture  . . . . . . . . .	L Near	 00000100 _TEXT	
  QueueFullSpawn . . . . . . . .	L Near	 00000135 _TEXT	
updateDrums  . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 000000CE Public C
  i  . . . . . . . . . . . . . .	DWord	 bp - 00000004
  SkipFrontWrap2 . . . . . . . .	L Near	 000001A6 _TEXT	
  SkipFrontRemoval . . . . . . .	L Near	 000001AC _TEXT	
  UpdateLoop . . . . . . . . . .	L Near	 000001BA _TEXT	
  NoWrap . . . . . . . . . . . .	L Near	 000001F9 _TEXT	
  EndUpdateLoop  . . . . . . . .	L Near	 00000202 _TEXT	
  SkipUpdate . . . . . . . . . .	L Near	 00000202 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
GOOD_THRESHOLD . . . . . . . . .	Number	 0000001Eh   
GREAT_THRESHOLD  . . . . . . . .	Number	 00000004h   
GetStdHandle@4 . . . . . . . . .	L Near	 00000000 FLAT	External C
HIT_POSITION_X . . . . . . . . .	Number	 000001C2h   
INITIAL_DELAY  . . . . . . . . .	Number	 00000003h   
MAX_DRUMS  . . . . . . . . . . .	Number	 00000064h   
MAX_LINE_LENGTH  . . . . . . . .	Number	 000003E8h   
MAX_NOTES  . . . . . . . . . . .	Number	 00002710h   
SCREEN_HEIGHT  . . . . . . . . .	Number	 000002D0h   
SCREEN_WIDTH . . . . . . . . . .	Number	 00000500h   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
WriteConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External C
_size  . . . . . . . . . . . . .	DWord	 000002B3 _DATA	
abs_mask . . . . . . . . . . . .	DWord	 00000000 _DATA	
bgPath . . . . . . . . . . . . .	Byte	 00000070 _DATA	
bgSprite . . . . . . . . . . . .	DWord	 000002E2 _DATA	
bgTexture  . . . . . . . . . . .	DWord	 000002DE _DATA	
blackColor . . . . . . . . . . .	sfColor	 000003FE _DATA	
blueDrumTexture  . . . . . . . .	DWord	 000002BB _DATA	
blueNotePath . . . . . . . . . .	Byte	 000000A4 _DATA	
blueNoteSound  . . . . . . . . .	DWord	 00000054 _DATA	
blue_note_sound_path . . . . . .	Byte	 000000D6 _DATA	
breakline  . . . . . . . . . . .	Byte	 00000427 _DATA	
chart  . . . . . . . . . . . . .	Byte	 00000058 _DATA	
comma  . . . . . . . . . . . . .	Byte	 00000425 _DATA	
consoleHandle  . . . . . . . . .	DWord	 0000001C _DATA	
countDownText  . . . . . . . . .	DWord	 000002DA _DATA	
currentNoteIndex . . . . . . . .	DWord	 000002F6 _DATA	
currentPage  . . . . . . . . . .	DWord	 00000000 FLAT	External C
currentTime  . . . . . . . . . .	DWord	 000002F2 _DATA	
decimal_mult . . . . . . . . . .	QWord	 00000447 _DATA	
delay_clock  . . . . . . . . . .	DWord	 00000018 _DATA	
delay_started  . . . . . . . . .	DWord	 00000014 _DATA	
drumQueue  . . . . . . . . . . .	DWord	 0000011B _DATA	
drumStep . . . . . . . . . . . .	DWord	 000003FA _DATA	
end_game_page  . . . . . . . . .	L Near	 00000000 FLAT	External C
event  . . . . . . . . . . . . .	sfEvent	 00000020 _DATA	
fclose . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fgets  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
font_path  . . . . . . . . . . .	Byte	 000002BF _DATA	
font . . . . . . . . . . . . . .	DWord	 000002D6 _DATA	
fopen  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
front  . . . . . . . . . . . . .	DWord	 000002AB _DATA	
gameStartTime  . . . . . . . . .	DWord	 000002FA _DATA	
gameStarted  . . . . . . . . . .	DWord	 000002FE _DATA	
getBpm . . . . . . . . . . . . .	Byte	 0000042A _DATA	
getOffset  . . . . . . . . . . .	Byte	 00000431 _DATA	
initial_delay_1  . . . . . . . .	DWord	 00000010 _DATA	
judgementCircle  . . . . . . . .	DWord	 000002E6 _DATA	
loop_index . . . . . . . . . . .	DWord	 0000048B _DATA	
malloc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
msInfo . . . . . . . . . . . . .	MusicInfo  00000107 _DATA	
music  . . . . . . . . . . . . .	DWord	 000002EA _DATA	
noteSpawnInterval  . . . . . . .	DWord	 0000037E _DATA	
noteTimings  . . . . . . . . . .	DWord	 00000382 _DATA	
notes  . . . . . . . . . . . . .	DWord	 00000302 _DATA	
readA  . . . . . . . . . . . . .	Byte	 0000040A _DATA	
real_0 . . . . . . . . . . . . .	DWord	 00000487 _DATA	
real_1000000 . . . . . . . . . .	DWord	 00000477 _DATA	
real_1280  . . . . . . . . . . .	DWord	 00000473 _DATA	
real_200 . . . . . . . . . . . .	DWord	 00000463 _DATA	
real_225 . . . . . . . . . . . .	DWord	 00000467 _DATA	
real_2 . . . . . . . . . . . . .	DWord	 00000457 _DATA	
real_30  . . . . . . . . . . . .	DWord	 0000045B _DATA	
real_32  . . . . . . . . . . . .	DWord	 0000045F _DATA	
real_365 . . . . . . . . . . . .	DWord	 00000483 _DATA	
real_450 . . . . . . . . . . . .	DWord	 0000046B _DATA	
real_4 . . . . . . . . . . . . .	DWord	 0000043F _DATA	
real_60000 . . . . . . . . . . .	DWord	 00000443 _DATA	
real_60  . . . . . . . . . . . .	DWord	 0000043B _DATA	
real_720 . . . . . . . . . . . .	DWord	 0000046F _DATA	
real_good_threshold  . . . . . .	DWord	 0000047B _DATA	
real_great_threshold . . . . . .	DWord	 0000047F _DATA	
rear . . . . . . . . . . . . . .	DWord	 000002AF _DATA	
redDrumTexture . . . . . . . . .	DWord	 000002B7 _DATA	
redNotePath  . . . . . . . . . .	Byte	 0000008B _DATA	
redNoteSound . . . . . . . . . .	DWord	 00000050 _DATA	
red_note_sound_path  . . . . . .	Byte	 000000BE _DATA	
sfCircleShape_create . . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_destroy  . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setFillColor . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineColor  .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineThickness 	L Near	 00000000 FLAT	External C
sfCircleShape_setPosition  . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setRadius  . . . .	L Near	 00000000 FLAT	External C
sfClock_create . . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_getElapsedTime . . . . .	L Near	 00000000 FLAT	External C
sfClock_restart  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClose  . . . . . . . . . . . .	Number	 00000004h   
sfColor_fromRGBA . . . . . . . .	L Near	 00000000 FLAT	External C
sfColor_fromRGB  . . . . . . . .	L Near	 00000000 FLAT	External C
sfEvtClosed  . . . . . . . . . .	Number	 00000000h   
sfEvtGainedFocus . . . . . . . .	Number	 00000003h   
sfEvtKeyPressed  . . . . . . . .	Number	 00000005h   
sfEvtKeyReleased . . . . . . . .	Number	 00000006h   
sfEvtLostFocus . . . . . . . . .	Number	 00000002h   
sfEvtMouseButtonPressed  . . . .	Number	 00000009h   
sfEvtMouseButtonReleased . . . .	Number	 0000000Ah   
sfEvtMouseEntered  . . . . . . .	Number	 0000000Ch   
sfEvtMouseLeft . . . . . . . . .	Number	 0000000Dh   
sfEvtMouseMoved  . . . . . . . .	Number	 0000000Bh   
sfEvtMouseWheelMoved . . . . . .	Number	 00000007h   
sfEvtMouseWheelScrolled  . . . .	Number	 00000008h   
sfEvtResized . . . . . . . . . .	Number	 00000001h   
sfEvtTextEntered . . . . . . . .	Number	 00000004h   
sfFalse  . . . . . . . . . . . .	Number	 00000000h   
sfFont_createFromFile  . . . . .	L Near	 00000000 FLAT	External C
sfFont_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfFullscreen . . . . . . . . . .	Number	 00000008h   
sfKeyA . . . . . . . . . . . . .	Number	 00000000h   
sfKeyD . . . . . . . . . . . . .	Number	 00000003h   
sfKeyEnter . . . . . . . . . . .	Number	 0000003Ah   
sfKeyEscape  . . . . . . . . . .	Number	 00000024h   
sfKeyF . . . . . . . . . . . . .	Number	 00000005h   
sfKeyJ . . . . . . . . . . . . .	Number	 00000009h   
sfKeyK . . . . . . . . . . . . .	Number	 0000000Ah   
sfKeyS . . . . . . . . . . . . .	Number	 00000012h   
sfMouseLeft  . . . . . . . . . .	Number	 00000000h   
sfMouseMiddle  . . . . . . . . .	Number	 00000002h   
sfMouseRight . . . . . . . . . .	Number	 00000001h   
sfMusic_createFromFile . . . . .	L Near	 00000000 FLAT	External C
sfMusic_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_getStatus  . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_play . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_setLoop  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_stop . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfNone . . . . . . . . . . . . .	Number	 00000000h   
sfPaused . . . . . . . . . . . .	Number	 00000001h   
sfPlaying  . . . . . . . . . . .	Number	 00000002h   
sfRectangleShape_create  . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_destroy . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setFillColor  .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineColor .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineThickness .	L Near	 00000000 FLAT	External C
sfRectangleShape_setPosition . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setSize . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_clear . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_close . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_create  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_destroy . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_display . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawCircleShape .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawRectangleShape 	L Near	 00000000 FLAT	External C
sfRenderWindow_drawSprite  . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawText  . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_isOpen  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_pollEvent . . . .	L Near	 00000000 FLAT	External C
sfResize . . . . . . . . . . . .	Number	 00000002h   
sfSleep  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_create  . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_destroy . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_getPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setTexture  . . . . . .	L Near	 00000000 FLAT	External C
sfStopped  . . . . . . . . . . .	Number	 00000000h   
sfText_create  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_getGlobalBounds . . . . .	L Near	 00000000 FLAT	External C
sfText_getLocalBounds  . . . . .	L Near	 00000000 FLAT	External C
sfText_setCharacterSize  . . . .	L Near	 00000000 FLAT	External C
sfText_setFillColor  . . . . . .	L Near	 00000000 FLAT	External C
sfText_setFont . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineColor . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineThickness . . .	L Near	 00000000 FLAT	External C
sfText_setPosition . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setString . . . . . . . .	L Near	 00000000 FLAT	External C
sfTexture_createFromFile . . . .	L Near	 00000000 FLAT	External C
sfTexture_destroy  . . . . . . .	L Near	 00000000 FLAT	External C
sfTitlebar . . . . . . . . . . .	Number	 00000001h   
sfTrue . . . . . . . . . . . . .	Number	 00000001h   
sfWindow_setFramerateLimit . . .	L Near	 00000000 FLAT	External C
spawnClock . . . . . . . . . . .	DWord	 000002EE _DATA	
stats  . . . . . . . . . . . . .	GameStats  000000EF _DATA	
str_bpm  . . . . . . . . . . . .	Byte	 0000040C _DATA	
str_end  . . . . . . . . . . . .	Byte	 00000420 _DATA	
str_offset . . . . . . . . . . .	Byte	 00000411 _DATA	
str_start  . . . . . . . . . . .	Byte	 00000419 _DATA	
strcspn  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strlen . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strncmp  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strtok_s . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
ten  . . . . . . . . . . . . . .	QWord	 0000044F _DATA	
totalNotes . . . . . . . . . . .	DWord	 0000037A _DATA	
transparentColor . . . . . . . .	sfColor	 00000406 _DATA	
white_color  . . . . . . . . . .	sfColor	 00000402 _DATA	

	   2 Warnings
	   0 Errors
