Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/23/24 03:06:44
main_game_page.asm					     Page 1 - 1


				.686P
				.XMM
				.model flat, c
				include csfml.inc
			      C ; CSFML.INC - SFML Definitions for x86 Assembly
			      C ; 使用 MASM 語法
			      C 
			      C includelib csfml-audio.lib
			      C includelib csfml-graphics.lib
			      C includelib csfml-system.lib
			      C includelib csfml-window.lib
			      C 
			      C ; sfBool 定義
 = 00000000		      C sfFalse     equ 0
 = 00000001		      C sfTrue      equ 1
			      C 
			      C ; sfMusic status
 = 00000000		      C sfStopped   equ 0
 = 00000001		      C sfPaused    equ 1
 = 00000002		      C sfPlaying   equ 2
			      C 
			      C 
			      C ; sfEventType 定義
 = 00000000		      C sfEvtClosed               equ 0
 = 00000001		      C sfEvtResized              equ 1
 = 00000002		      C sfEvtLostFocus            equ 2
 = 00000003		      C sfEvtGainedFocus          equ 3
 = 00000004		      C sfEvtTextEntered          equ 4
 = 00000005		      C sfEvtKeyPressed           equ 5
 = 00000006		      C sfEvtKeyReleased          equ 6
 = 00000007		      C sfEvtMouseWheelMoved      equ 7
 = 00000008		      C sfEvtMouseWheelScrolled   equ 8
 = 00000009		      C sfEvtMouseButtonPressed   equ 9
 = 0000000A		      C sfEvtMouseButtonReleased  equ 10
 = 0000000B		      C sfEvtMouseMoved           equ 11
 = 0000000C		      C sfEvtMouseEntered         equ 12
 = 0000000D		      C sfEvtMouseLeft            equ 13
			      C 
			      C ; sfMouseButton 定義
 = 00000000		      C sfMouseLeft   equ 0
 = 00000001		      C sfMouseRight  equ 1
 = 00000002		      C sfMouseMiddle equ 2
			      C 
			      C ; sfKey 定義
 = 0000003A		      C sfKeyEnter    equ 58
 = 00000000		      C sfKeyA        equ 0
 = 00000012		      C sfKeyS        equ 18
 = 00000003		      C sfKeyD        equ 3
 = 00000024		      C sfKeyEscape   equ 36
 = 00000005		      C sfKeyF        equ 5
 = 00000009		      C sfKeyJ        equ 9
 = 0000000A		      C sfKeyK        equ 10
			      C 
			      C ; 視窗風格定義
 = 00000000		      C sfNone       equ 0
 = 00000001		      C sfTitlebar   equ 1
 = 00000002		      C sfResize     equ 2
 = 00000004		      C sfClose      equ 4
 = 00000008		      C sfFullscreen equ 8
			      C 
			      C ; 結構體定義
 00000008		      C sfVector2f STRUCT
 00000000  00000000	      C     x REAL4 ?
 00000004  00000000	      C     y REAL4 ?
			      C sfVector2f ENDS
			      C 
 00000008		      C sfVector2i STRUCT
 00000000  00000000	      C     x SDWORD ?
 00000004  00000000	      C     y SDWORD ?
			      C sfVector2i ENDS
			      C 
 0000000C		      C sfVideoMode STRUCT
 00000000  00000000	      C     _width  DWORD ?
 00000004  00000000	      C     height DWORD ?
 00000008  00000000	      C     bpp    DWORD ?
			      C sfVideoMode ENDS
			      C 
 00000004		      C sfColor STRUCT
 00000000  00		      C     r BYTE ?
 00000001  00		      C     g BYTE ?
 00000002  00		      C     b BYTE ?
 00000003  00		      C     a BYTE ?
			      C sfColor ENDS
			      C 
 00000010		      C sfFloatRect STRUCT
 00000000  00000000	      C     left   REAL4 ?
 00000004  00000000	      C     top    REAL4 ?
 00000008  00000000	      C     _width  REAL4 ?
 0000000C  00000000	      C     height REAL4 ?
			      C sfFloatRect ENDS
			      C 
 0000000C		      C mouseButton STRUCT
 00000000  00000000	      C     button DWORD ?
 00000004  00000000	      C     x DWORD ?
 00000008  00000000	      C     y DWORD ?
			      C mouseButton ENDS
			      C 
 00000014		      C key STRUCT
 00000000  00000000	      C     code DWORD ?
 00000004  00000000	      C     alt DWORD ?
 00000008  00000000	      C     control DWORD ?
 0000000C  00000000	      C     shift DWORD ?
 00000010  00000000	      C     system DWORD ?
			      C key ENDS
			      C 
 00000030		      C sfEvent STRUCT
 00000000  00000000	      C     _type DWORD ?                
 00000004  00000000	      C     _size DWORD ?                
 00000008  00000000	      C     mouse mouseButton <>       
	   00000000
	   00000000
 00000014  00000000	      C     _key key <>                 
	   00000000
	   00000000
	   00000000
	   00000000
 00000028  00000000	      C     mouseMove sfVector2i <>     
	   00000000
			      C sfEvent ENDS
			      C 
			      C ; 函數原型 - 視窗相關
			      C EXTERN sfRenderWindow_create:PROC
			      C EXTERN sfRenderWindow_destroy:PROC
			      C EXTERN sfRenderWindow_close:PROC
			      C EXTERN sfRenderWindow_isOpen:PROC
			      C EXTERN sfRenderWindow_clear:PROC
			      C EXTERN sfRenderWindow_display:PROC
			      C EXTERN sfRenderWindow_pollEvent:PROC
			      C EXTERN sfRenderWindow_drawSprite:PROC
			      C EXTERN sfRenderWindow_drawText:PROC
			      C 
			      C EXTERN sfWindow_setFramerateLimit:PROC
			      C 
			      C ; 函數原型 - 紋理相關
			      C EXTERN sfTexture_createFromFile:PROC
			      C EXTERN sfTexture_destroy:PROC
			      C 
			      C ; 函數原型 - 精靈相關
			      C EXTERN sfSprite_create:PROC
			      C EXTERN sfSprite_destroy:PROC
			      C EXTERN sfSprite_setTexture:PROC
			      C EXTERN sfSprite_setPosition:PROC
			      C EXTERN sfSprite_getPosition:PROC
			      C 
			      C ; 函數原型 - 音樂相關
			      C EXTERN sfMusic_createFromFile:PROC
			      C EXTERN sfMusic_destroy:PROC
			      C EXTERN sfMusic_play:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C EXTERN sfMusic_stop: PROC
			      C EXTERN sfMusic_getStatus: PROC
			      C 
			      C ; 函數原型 - 文字相關
			      C EXTERN sfFont_createFromFile:PROC
			      C EXTERN sfFont_destroy:PROC
			      C EXTERN sfText_create:PROC
			      C EXTERN sfText_destroy:PROC
			      C EXTERN sfText_setFont:PROC
			      C EXTERN sfText_setString:PROC
			      C EXTERN sfText_setCharacterSize:PROC
			      C EXTERN sfText_setFillColor:PROC
			      C EXTERN sfText_setOutlineColor:PROC
			      C EXTERN sfText_setOutlineThickness:PROC
			      C EXTERN sfText_getLocalBounds:PROC
			      C EXTERN sfText_getGlobalBounds:PROC
			      C EXTERN sfText_setPosition:PROC
			      C 
			      C ; 函數原型 - 顏色相關
			      C EXTERN sfColor_fromRGB:PROC
			      C EXTERN sfColor_fromRGBA:PROC
			      C 
			      C ; 函數原型 - 圓形相關
			      C EXTERN sfCircleShape_create: PROC
			      C EXTERN sfCircleShape_setPosition: PROC
			      C EXTERN sfCircleShape_setRadius: PROC
			      C EXTERN sfCircleShape_setFillColor: PROC
			      C EXTERN sfRenderWindow_drawCircleShape: PROC
			      C EXTERN sfCircleShape_destroy: PROC
			      C EXTERN sfCircleShape_setOutlineThickness: PROC
			      C EXTERN sfCircleShape_setOutlineColor: PROC
			      C 
			      C ; 函數原型 - 矩形相關
			      C EXTERN sfRectangleShape_create: PROC
			      C EXTERN sfRectangleShape_setPosition: PROC
			      C EXTERN sfRectangleShape_setSize: PROC
			      C EXTERN sfRectangleShape_setFillColor: PROC
			      C EXTERN sfRectangleShape_setOutlineThickness: PROC
			      C EXTERN sfRenderWindow_drawRectangleShape: PROC
			      C EXTERN sfRectangleShape_destroy: PROC
			      C EXTERN sfRectangleShape_setOutlineColor: PROC
			      C 
			      C EXTERN sfSleep: PROC
			      C EXTERN sfClock_create: PROC
			      C EXTERN sfClock_getElapsedTime: PROC
			      C EXTERN sfClock_restart: PROC
			      C 
				include file.inc
			      C includelib ucrt.lib
			      C includelib kernel32.lib
			      C 
			      C 
 0000000C		      C Drum struct
 00000000  00000000	      C 	sprite dword ?
 00000004  00000000	      C 	_type dword ?
 00000008  00000000	      C 	targetTime real4 ?
			      C Drum ends
			      C 
 00000018		      C GameStats struct
 00000000  00000000	      C 	great_count dword ?
 00000004  00000000	      C 	good_count dword ?
 00000008  00000000	      C 	miss_count dword ?
 0000000C  00000000	      C 	current_combo dword ?
 00000010  00000000	      C 	max_combo dword ?
 00000014  00000000	      C 	total_score dword ?
			      C GameStats ends
			      C 
 00000014		      C MusicInfo struct
 00000000  00000000	      C 	bpm real4 ?
 00000004  00000000	      C 	_offset real4 ?
 00000008  00000000	      C 	spawnTime real4 ?
 0000000C  00000000	      C 	currentBar dword ?
 00000010  00000000	      C 	notesInBar dword ?
			      C MusicInfo ends
			      C 
			      C extern malloc:proc
			      C extern fopen:proc
			      C extern fclose:proc
			      C extern fgets:proc
			      C 
			      C 
			      C ; string
			      C 
			      C extern strcspn:proc
			      C extern strncmp:proc
			      C ;extern __imp____stdio_common_vsscanf:proc
			      C extern strtok_s:proc
			      C extern strlen:proc
			      C 
				includelib kernel32.lib

				extern GetStdHandle@4: PROC
				extern WriteConsoleA@20:PROC
 =-0000000B			STD_OUTPUT_HANDLE EQU -11

				extern end_game_page: PROC
				extern currentPage: DWORD

				; Constants
 = 00002710			MAX_NOTES = 10000
 = 000003E8			MAX_LINE_LENGTH = 1000
 = 00000500			SCREEN_WIDTH = 1280
 = 000002D0			SCREEN_HEIGHT = 720
 = 00000064			MAX_DRUMS = 100
 = 000001C2			HIT_POSITION_X = 450
 = 00000004			GREAT_THRESHOLD = 4
 = 0000001E			GOOD_THRESHOLD = 30
 = 00000003			INITIAL_DELAY = 3

 00000000			.data
 00000000 00000000			consoleHandle dd ?
 00000004 00000000			event sfEvent <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000

 00000034 61 73 73 65 74		chart db "assets/game/yoasobi.txt", 0
	   73 2F 67 61 6D
	   65 2F 79 6F 61
	   73 6F 62 69 2E
	   74 78 74 00
 0000004C 61 73 73 65 74		bgPath db "assets/game/bg_genre_2.png", 0
	   73 2F 67 61 6D
	   65 2F 62 67 5F
	   67 65 6E 72 65
	   5F 32 2E 70 6E
	   67 00
 00000067 61 73 73 65 74		redNotePath db "assets/game/red_note.png", 0
	   73 2F 67 61 6D
	   65 2F 72 65 64
	   5F 6E 6F 74 65
	   2E 70 6E 67 00
 00000080 61 73 73 65 74		blueNotePath db "assets/game/blue_note.png", 0
	   73 2F 67 61 6D
	   65 2F 62 6C 75
	   65 5F 6E 6F 74
	   65 2E 70 6E 67
	   00
 0000009A 61 73 73 65 74	    red_note_sound_path db "assets/game/redmote.wav", 0
	   73 2F 67 61 6D
	   65 2F 72 65 64
	   6D 6F 74 65 2E
	   77 61 76 00
 000000B2 61 73 73 65 74	    blue_note_sound_path db "assets/main/bluemote.wav", 0
	   73 2F 6D 61 69
	   6E 2F 62 6C 75
	   65 6D 6F 74 65
	   2E 77 61 76 00

 000000CB 00000000			stats GameStats <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 000000E3 43020000			msInfo MusicInfo <130.000000, -1.962000, 115.384613>
	   BFFB22D1
	   42E6C4EC
	   00000000
	   00000000

					; queue for drums
 000000F7				drumQueue dword MAX_DRUMS dup(?) ; 存放Drum結構指針
 00000287 00000000			front dword 0
 0000028B 00000000			rear dword 0
 0000028F 00000000			_size dword 0

					; texture
 00000293 00000000			redDrumTexture dword ?
 00000297 00000000			blueDrumTexture dword ?

 0000029B 61 73 73 65 74		font_path db "assets/fonts/arial.ttf", 0
	   73 2F 66 6F 6E
	   74 73 2F 61 72
	   69 61 6C 2E 74
	   74 66 00
 000002B2 00000000			font dd 0

					; text
 000002B6 00000000			countDownText dword ?

					; background
 000002BA 00000000			bgTexture dword ?
 000002BE 00000000			bgSprite dword ?

					; judgement circle
 000002C2 00000000			judgementCircle dword ?
					
					; music
 000002C6 00000000			music dword ?

					; clock
 000002CA 00000000			spawnClock dword 0

 000002CE 00000000			currentTime real4 0.0

 000002D2 00000000			currentNoteIndex dd 0
 000002D6 40400000			gameStartTime real4 3.0
 000002DA 00000000			gameStarted dword 0

					; note chart
 000002DE 00000001			notes dword 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000002
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
 0000033A 00000017			totalNotes dword 23
 0000033E 00000000			noteSpawnInterval real4 0.0
 00000342 00000000			noteTimings real4 0.000000, 0.923077, 1.846154, 2.769229, 3.653842, 7.384611, 8.307688, 9.230764, 10.153841, 11.076918, 12.884617, 14.769233, 15.692309, 16.615387, 17.538464, 18.461540, 19.384617, 20.307693, 22.153847, 23.076923, 24.000000, 24.923077, 25.846153
	   3F6C4EC6
	   3FEC4EC6
	   40313B0C
	   4069D88C
	   40EC4EBC
	   4104EC4A
	   4113B136
	   41227622
	   41313B0E
	   414E2764
	   416C4EC7
	   417B13B3
	   4184EC50
	   418C4EC6
	   4193B13C
	   419B13B2
	   41A27628
	   41B13B14
	   41B89D8A
	   41C00000
	   41C76276
	   41CEC4EC
 0000039E 40EFC71D			drumStep real4 7.493056

					; color
 000003A2 00 00 00 FF			blackColor sfColor <0, 0, 0, 255>
 000003A6 00 00 00 32			transparentColor sfColor <0, 0, 0, 50>

					; file
 000003AA 72 00				readA byte "r", 0

					; 字串常量
 000003AC 42 50 4D 3A 00		str_bpm db "BPM:", 0
 000003B1 4F 46 46 53 45		str_offset db "OFFSET:", 0
	   54 3A 00
 000003B9 23 53 54 41 52		str_start db "#START", 0
	   54 00
 000003C0 23 45 4E 44 00		str_end db "#END", 0
 000003C5 2C 00				comma db ",", 0
 000003C7 5C 6E 00			breakline db "\n", 0
					;format db "%", 0

 000003CA 42 50 4D 3A 25		getBpm db "BPM:%f", 0
	   66 00
 000003D1 4F 46 46 53 45		getOffset db "OFFSET:%f", 0
	   54 3A 25 66 00

 000003DB 42700000			real_60 real4 60.0
 000003DF 40800000			real_4 real4 4.0
 000003E3 476A6000			real_60000 real4 60000.0
 000003E7				decimal_mult  dq 0.1                  ; 小數位數乘數
	   3FB999999999999A
 000003EF			    ten           dq 10.0                 ; 用於乘法運算
	   4024000000000000
 000003F7 40000000			real_2 real4 2.0
 000003FB 41F00000		    real_30 real4 30.0
 000003FF 42000000			real_32 real4 32.0
 00000403 43480000		    real_200 real4 200.0
 00000407 43610000		    real_225 real4 225.0
 0000040B 43E10000		    real_450 real4 450.0
 0000040F 44340000			real_720 real4 720.0
 00000413 44A00000			real_1280 real4 1280.0
 00000417 49742400			real_1000000 real4 1000000.0
 0000041B 41F00000		    real_good_threshold real4 30.0
 0000041F 40800000		    real_great_threshold real4 4.0
 00000423 43B68000		    real_365 real4 365.0
 00000427 00000000		    real_0 real4 0.0
 0000042B 00000000		    loop_index dword 0
 00000000			.code

 00000000			readNoteChart PROC


 00000000			readNoteChart ENDP

 00000000			isQueueFull PROC
 00000000  A1 0000028F R	    mov eax, _size
 00000005  83 F8 64		    cmp eax, MAX_DRUMS
 00000008  0F 94 C0		    sete al                ; 如果滿了，設置返回值為1
 0000000B  C3			    ret
 0000000C			isQueueFull ENDP

 0000000C			isQueueEmpty PROC
 0000000C  A1 0000028F R	    mov eax, _size
 00000011  85 C0		    test eax, eax
 00000013  0F 94 C0		    sete al                ; 如果空，設置返回值為1
 00000016  C3			    ret
 00000017			isQueueEmpty ENDP

 00000017			enqueue PROC USES edi esi ebx @drum:DWORD 
				    ; 檢查是否滿了
 0000001D  E8 FFFFFFDE		    call isQueueFull
 00000022  84 C0		    test al, al
 00000024  75 2F		    jnz @end_enqueue

				    ; 加入隊列
 00000026  8B 75 08		    mov esi, @drum          ; drum參數
 00000029  8B 3D 0000028B R	    mov edi, rear          ; rear索引
 0000002F  89 34 BD		    mov drumQueue[edi*4], esi ; 將drum加入隊列
	   000000F7 R

				    ; 更新rear和size
 00000036  FF 05 0000028B R	    inc rear
 0000003C  83 3D 0000028B R	    cmp rear, MAX_DRUMS
	   64
 00000043  72 0A		    jb SkipRearWrap
 00000045  C7 05 0000028B R	    mov rear, 0
	   00000000
 0000004F				SkipRearWrap:
 0000004F  FF 05 0000028F R			inc _size
 00000055				@end_enqueue:
						ret
 0000005A			enqueue ENDP

 0000005A			dequeue PROC
				    ; 檢查是否空了
 0000005A  E8 FFFFFFAD		    call isQueueEmpty
 0000005F  84 C0		    test al, al
 00000061  75 36		    jnz QueueEmpty

				    ; 刪除隊列頭
 00000063  8B 3D 00000287 R	    mov edi, front          ; front索引
 00000069  8B 34 BD		    mov esi, drumQueue[edi*4] ; 獲取隊列頭的drum指針
	   000000F7 R
 00000070  56			    push esi
 00000071  E8 00000000 E	    call sfSprite_destroy   ; 釋放sprite
 00000076  83 C4 04		    add esp, 4

				    ; 更新front和size
 00000079  FF 05 00000287 R	    inc front
 0000007F  83 3D 00000287 R	    cmp front, MAX_DRUMS
	   64
 00000086  72 0A		    jb SkipFrontWrap
 00000088  C7 05 00000287 R	    mov front, 0
	   00000000
 00000092			SkipFrontWrap:
 00000092  FF 0D 0000028F R	    dec _size
 00000098  C3			    ret

 00000099			QueueEmpty:
 00000099  C3			    ret
 0000009A			dequeue ENDP

 0000009A			spawnDrum PROC USES esi edi _type:DWORD, targetTime:REAL4
				    ; 檢查是否滿了
 0000009F  E8 FFFFFF5C		    call isQueueFull
 000000A4  84 C0		    test al, al
 000000A6  0F 85 00000089	    jnz QueueFullSpawn

				    ; 創建新的Drum結構
 000000AC  6A 0C		    push 12                ; 分配空間
 000000AE  E8 00000000 E	    call malloc
 000000B3  83 C4 04		    add esp, 4
 000000B6  8B F0		    mov esi, eax           ; 保存新結構指針

				    ; 初始化Drum結構
 000000B8  6A 00			push 0
 000000BA  E8 00000000 E	    call sfSprite_create
 000000BF  83 C4 04		    add esp, 4
 000000C2  89 06		    mov [esi], eax       ; sprite指針

 000000C4  8B 45 08			mov eax, _type
 000000C7  89 46 04		    mov dword ptr [esi+4], eax
 000000CA  F3/ 0F 10 45		    movss xmm0, targetTime
	   0C
 000000CF  F3/ 0F 11 46		    movss dword ptr [esi+8], xmm0
	   08
				    

				    ; 設置音符的紋理
 000000D4  83 7D 08 01		    cmp _type, 1
 000000D8  75 14		    jne SetBlueTexture
 000000DA  6A 01		    push sfTrue
 000000DC  FF 35 00000293 R	    push dword ptr redDrumTexture
 000000E2  FF 36		    push [esi]
 000000E4  E8 00000000 E	    call sfSprite_setTexture
 000000E9  83 C4 0C		    add esp, 12
 000000EC  EB 12		    jmp DoneTexture
 000000EE			SetBlueTexture:
 000000EE  6A 01		    push sfTrue
 000000F0  FF 35 00000297 R	    push dword ptr blueDrumTexture
 000000F6  FF 36		    push [esi]
 000000F8  E8 00000000 E	    call sfSprite_setTexture
 000000FD  83 C4 0C		    add esp, 12
 00000100			DoneTexture:

				    ; 設置初始位置

 00000100  83 EC 08		    sub esp, 8
 00000103  F3/ 0F 10 05		    movss xmm0, real_1280
	   00000413 R
 0000010B  F3/ 0F 11 04 24	    movss dword ptr [esp], xmm0
 00000110  F3/ 0F 10 05		    movss xmm0, real_200
	   00000403 R
 00000118  F3/ 0F 11 44 24	    movss dword ptr [esp+4], xmm0
	   04
 0000011E  FF 36		    push [esi]
 00000120  E8 00000000 E	    call sfSprite_setPosition
 00000125  83 C4 0C		    add esp, 12

				    ; 將Drum加入隊列
 00000128  56			    push esi
 00000129  E8 FFFFFEE9		    call enqueue
 0000012E  83 C4 04		    add esp, 4
				    ret

 00000135			QueueFullSpawn:
				    ret
 00000139			spawnDrum ENDP

 00000139			updateDrums PROC USES esi edi ebx
				    local i:DWORD
				    ; 檢查並移除過時的音符
 00000142  A1 0000028F R	    mov eax, _size
 00000147  85 C0		    test eax, eax
 00000149  0F 84 000000A7	    jz SkipUpdate

 0000014F  8B 3D 00000287 R	    mov edi, front
 00000155  8B 34 BD		    mov esi, drumQueue[edi*4]
	   000000F7 R
 0000015C  FF 36		    push [esi]            ; drum.sprite
 0000015E  E8 00000000 E	    call sfSprite_getPosition
 00000163  83 C4 04		    add esp, 4
 00000166  F3/ 0F 5C 05		    subss xmm0, real_365
	   00000423 R
 0000016E  0F 2F 05		    comiss xmm0, real_0
	   00000427 R
 00000175  7D 29		    jnl SkipFrontRemoval

				    ; 移除過時音符
 00000177  FF 36		    push [esi]
 00000179  E8 00000000 E	    call sfSprite_destroy
 0000017E  83 C4 04		    add esp, 4
 00000181  FF 05 00000287 R	    inc front
 00000187  83 3D 00000287 R	    cmp front, MAX_DRUMS
	   64
 0000018E  72 0A		    jb SkipFrontWrap2
 00000190  C7 05 00000287 R	    mov front, 0
	   00000000
 0000019A			SkipFrontWrap2:
 0000019A  FF 0D 0000028F R	    dec _size
 000001A0			SkipFrontRemoval:

				    ; 更新音符位置
 000001A0  A1 0000028F R	    mov eax, _size
 000001A5  89 45 FC		    mov i, eax
 000001A8  8B 3D 00000287 R	    mov edi, front
 000001AE			UpdateLoop:
 000001AE  8B 45 FC		    mov eax, i
 000001B1  83 F8 00		    cmp eax, 0
 000001B4  74 40		    jz EndUpdateLoop

 000001B6  8B 34 BD		    mov esi, drumQueue[edi*4]
	   000000F7 R
 000001BD  FF 36		    push dword ptr [esi]
 000001BF  E8 00000000 E	    call sfSprite_getPosition
 000001C4  83 C4 04		    add esp, 4


 000001C7  F3/ 0F 5C 05		    subss xmm0, drumStep
	   0000039E R
				    
 000001CF  52			    push edx
 000001D0  83 EC 04		    sub esp, 4
 000001D3  F3/ 0F 11 04 24	    movss dword ptr [esp], xmm0
 000001D8  FF 36		    push [esi]
 000001DA  E8 00000000 E	    call sfSprite_setPosition
 000001DF  83 C4 08		    add esp, 8

 000001E2  47			    inc edi
 000001E3  83 FF 64		    cmp edi, MAX_DRUMS
 000001E6  72 05		    jb NoWrap
 000001E8  BF 00000000		    mov edi, 0
 000001ED			NoWrap:
 000001ED  8B 45 FC		    mov eax, i
 000001F0  48			    dec eax
 000001F1  89 45 FC		    mov i, eax
 000001F4  EB B8		    jmp UpdateLoop
 000001F6			EndUpdateLoop:
 000001F6			SkipUpdate:
				    ret
 000001FB			updateDrums ENDP

 000001FB			createJudgementCircle PROC USES esi edi
				    ; 創建圓形形狀
 000001FD  6A 00		    push 0
 000001FF  E8 00000000 E	    call sfCircleShape_create
 00000204  83 C4 04		    add esp, 4
 00000207  A3 000002C2 R	    mov judgementCircle, eax

				    ; 設置圓形半徑
 0000020C  FF 35 000003FB R	    push real_30
 00000212  FF 35 000002C2 R	    push dword ptr [judgementCircle]
 00000218  E8 00000000 E	    call sfCircleShape_setRadius
 0000021D  83 C4 08		    add esp, 8

				    ; 設置圓形位置
 00000220  FF 35 00000407 R	    push real_225               ; HIT_POSITION_X, 200+25
 00000226  FF 35 0000040B R	    push real_450
 0000022C  FF 35 000002C2 R	    push dword ptr [judgementCircle]
 00000232  E8 00000000 E	    call sfCircleShape_setPosition
 00000237  83 C4 0C		    add esp, 12

				    ; 設置填充顏色
 0000023A  FF 35 000003A6 R	    push transparentColor
 00000240  FF 35 000002C2 R	    push dword ptr [judgementCircle]
 00000246  E8 00000000 E	    call sfCircleShape_setFillColor
 0000024B  83 C4 08		    add esp, 8

				    ; 設置邊框厚度
 0000024E  FF 35 000003F7 R	    push real_2
 00000254  FF 35 000002C2 R	    push dword ptr [judgementCircle]
 0000025A  E8 00000000 E	    call sfCircleShape_setOutlineThickness
 0000025F  83 C4 08		    add esp, 8

				    ; 設置邊框顏色
 00000262  FF 35 000003A2 R	    push blackColor
 00000268  FF 35 000002C2 R	    push dword ptr [judgementCircle]
 0000026E  E8 00000000 E	    call sfCircleShape_setOutlineColor
 00000273  83 C4 08		    add esp, 8

				    ret
 00000279			createJudgementCircle ENDP

 00000279			@ld_background PROC
				    ; 創建背景紋理
 00000279  6A 00		    push 0
 0000027B  68 0000004C R	    push offset bgPath
 00000280  E8 00000000 E	    call sfTexture_createFromFile
 00000285  83 C4 08		    add esp, 8
 00000288  A3 000002BA R	    mov bgTexture, eax
				    
				    ; 創建背景精靈
 0000028D  E8 00000000 E	    call sfSprite_create
 00000292  A3 000002BE R	    mov DWORD PTR [bgSprite], eax
				    
				    ; 設定紋理
 00000297  6A 01		    push 1
 00000299  A1 000002BA R	    mov eax, DWORD PTR [bgTexture]
 0000029E  50			    push eax
 0000029F  8B 0D 000002BE R	    mov ecx, DWORD PTR [bgSprite]
 000002A5  51			    push ecx
 000002A6  E8 00000000 E	    call sfSprite_setTexture
 000002AB  83 C4 0C		    add esp, 12
 000002AE  C3			    ret
 000002AF			@ld_background ENDP

 000002AF			@countDown_text proc
 000002AF  6A 00			push 0
 000002B1  68 0000029B R		push offset font_path
 000002B6  E8 00000000 E		call sfFont_createFromFile
 000002BB  83 C4 08			add esp, 8
 000002BE  A3 000002B2 R		mov font, eax

 000002C3  E8 00000000 E		call sfText_create
 000002C8  A3 000002B6 R		mov countDownText, eax

 000002CD  FF 35 000002B2 R		push font
 000002D3  FF 35 000002B6 R		push dword ptr [countDownText]
 000002D9  E8 00000000 E		call sfText_setFont
 000002DE  83 C4 08			add esp, 8

 000002E1  6A 48			push 72
 000002E3  FF 35 000002B6 R		push dword ptr [countDownText]
 000002E9  E8 00000000 E		call sfText_setCharacterSize
 000002EE  83 C4 08			add esp, 8

 000002F1  F3/ 0F 10 05			movss xmm0, [real_720]
	   0000040F R
 000002F9  F3/ 0F 5E 05			divss xmm0, [real_2]
	   000003F7 R
 00000301  F3/ 0F 5C 05			subss xmm0, [real_32]
	   000003FF R
 00000309  F3/ 0F 11 44 24		movss dword ptr [esp-4], xmm0
	   FC

 0000030F  F3/ 0F 10 05			movss xmm0, [real_1280]
	   00000413 R
 00000317  F3/ 0F 5E 05			divss xmm0, [real_2]
	   000003F7 R
 0000031F  F3/ 0F 5C 05			subss xmm0, [real_32]
	   000003FF R
 00000327  F3/ 0F 11 44 24		movss dword ptr [esp-8], xmm0
	   F8

 0000032D  8B F4			mov esi, esp
 0000032F  FF 76 FC			push dword ptr [esi-4]
 00000332  FF 76 F8			push dword ptr [esi-8]
 00000335  FF 35 000002B6 R		push dword ptr [countDownText]
 0000033B  E8 00000000 E		call sfText_setPosition
 00000340  83 C4 0C			add esp, 12

 00000343  C3				ret
 00000344			@countDown_text ENDP

 00000344			processHit proc
 00000344  55			    push ebp
 00000345  8B EC		    mov ebp, esp
 00000347  83 EC 20		    sub esp, 32                          ; Local stack space
				    
				    ; Save registers
 0000034A  53			    push ebx
 0000034B  56			    push esi
 0000034C  57			    push edi
				    
				    ; Get parameters (cdecl)
 0000034D  8B 5D 08		    mov ebx, [ebp + 8]                   ; hitType in ebx
				    
				    ; Check if size == 0
 00000350  A1 0000028F R	    mov eax, dword ptr [_size]
 00000355  85 C0		    test eax, eax
 00000357  0F 84 000000D1	    jz done_processing
				    
				    ; Get drum position
 0000035D  A1 00000287 R	    mov eax, dword ptr [front]           ; Load front index
 00000362  B9 00000018		    mov ecx, 24                          ; sizeof(DrumNote)
 00000367  F7 E1		    mul ecx                              ; eax = front * 24
 00000369  03 05 000000F7 R	    add eax, dword ptr [drumQueue]       ; Base address of current drum
 0000036F  50			    push eax                             ; Push sprite pointer
 00000370  E8 00000000 E	    call sfSprite_getPosition            ; Call function (cdecl)
 00000375  83 C4 04		    add esp, 4                           ; Clean stack
				    
				    ; Calculate distance
 00000378  8B 0D 0000040B R	    mov ecx, dword ptr [real_450]        ; HIT_POSITION_X
 0000037E  83 E9 2E		    sub ecx, 46                          ; HIT_POSITION_X - 46
 00000381  D9 00		    fld dword ptr [eax]                  ; Load x position
 00000383  D8 21		    fsub dword ptr [ecx]                 ; Calculate distance
 00000385  D9 5D FC		    fstp dword ptr [ebp-4]              ; Store distance
				    
				    ; Check distance thresholds
 00000388  D9 45 FC		    fld dword ptr [ebp-4]               ; Load distance
 0000038B  D9 E1		    fabs                                ; Get absolute value
 0000038D  D9 05 0000041B R	    fld dword ptr [real_good_threshold]      ; Load GOOD_THRESHOLD
 00000393  DE D9		    fcompp                              ; Compare and pop both
 00000395  9B DF E0		    fstsw ax                           ; Store FPU status
 00000398  9E			    sahf                               ; Transfer to CPU flags
 00000399  0F 87 0000008F	    ja done_processing                 ; If abs(distance) > GOOD_THRESHOLD
				    
				    ; Check note type match
 0000039F  A1 00000287 R	    mov eax, dword ptr [front]
 000003A4  B9 00000018		    mov ecx, 24
 000003A9  F7 E1		    mul ecx
 000003AB  03 05 000000F7 R	    add eax, dword ptr [drumQueue]
 000003B1  8B 50 04		    mov edx, dword ptr [eax+4]           ; Load drum type
 000003B4  3B D3		    cmp edx, ebx                       ; Compare with hitType
 000003B6  75 5F		    jne miss_hit
				    
				    ; Check for GREAT hit
 000003B8  D9 45 FC		    fld dword ptr [ebp-4]              ; Reload distance
 000003BB  D9 E1		    fabs
 000003BD  D9 05 0000041F R	    fld dword ptr [real_great_threshold]
 000003C3  DE D9		    fcompp
 000003C5  9B DF E0		    fstsw ax
 000003C8  9E			    sahf
 000003C9  77 27		    ja good_hit
				    
 000003CB			great_hit:
 000003CB  8B 35 000000CB R	    mov esi, dword ptr [stats]         ; Get stats pointer
 000003D1  FF 06		    inc dword ptr [esi + GameStats.great_count]      ; Increment great_count
 000003D3  FF 46 0C		    inc dword ptr [esi + GameStats.current_combo]    ; Increment current_combo
				    
				    ; Calculate score
 000003D6  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 000003D9  6B D2 0A		    imul edx, 10                       ; combo * 10
 000003DC  81 C2 0000012C	    add edx, 300                       ; Add base score
 000003E2  01 56 14		    add dword ptr [esi + GameStats.total_score], edx  ; Add to total_score
				    
				    ; Update max combo
 000003E5  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 000003E8  3B 56 10		    cmp edx, dword ptr [esi + GameStats.max_combo]      ; Compare with max_combo
 000003EB  7E 3C		    jle do_dequeue
 000003ED  89 56 10		    mov dword ptr [esi + GameStats.max_combo], edx      ; Update max_combo
 000003F0  EB 37		    jmp do_dequeue
				    
 000003F2			good_hit:
 000003F2  8B 35 000000CB R	    mov esi, dword ptr [stats]         ; Get stats pointer
 000003F8  FF 46 04		    inc dword ptr [esi + GameStats.good_count]       ; Increment good_count
 000003FB  FF 46 0C		    inc dword ptr [esi + GameStats.current_combo]    ; Increment current_combo
				    
				    ; Calculate score
 000003FE  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 00000401  6B D2 05		    imul edx, 5                        ; combo * 5
 00000404  83 C2 64		    add edx, 100                       ; Add base score
 00000407  01 56 14		    add dword ptr [esi + GameStats.total_score], edx  ; Add to total_score
				    
				    ; Update max combo
 0000040A  8B 56 0C		    mov edx, dword ptr [esi + GameStats.current_combo]  ; Get current_combo
 0000040D  3B 56 10		    cmp edx, dword ptr [esi + GameStats.max_combo]      ; Compare with max_combo
 00000410  7E 17		    jle do_dequeue
 00000412  89 56 10		    mov dword ptr [esi + GameStats.max_combo], edx      ; Update max_combo
 00000415  EB 12    jmp do_dequeue
				    
 00000417			miss_hit:
 00000417  8B 35 000000CB R	    mov esi, dword ptr [stats]         ; Get stats pointer
 0000041D  FF 46 08		    inc dword ptr [esi + GameStats.miss_count]       ; Increment miss_count
 00000420  C7 46 0C		    mov dword ptr [esi + GameStats.current_combo], 0  ; Reset current_combo
	   00000000
 00000427  EB 05		    jmp done_processing
				    
 00000429			do_dequeue:
 00000429  E8 FFFFFC2C		    call dequeue                       ; Remove the hit note (cdecl)
				    
 0000042E			done_processing:
				    ; Restore registers
 0000042E  5F			    pop edi
 0000042F  5E			    pop esi
 00000430  5B			    pop ebx
				    
 00000431  8B E5		    mov esp, ebp
 00000433  5D			    pop ebp
 00000434  C3			    ret

 00000435			processHit endp

				;播放音效
 00000435			rednote_sound PROC
 00000435  68 0000009A R	    push offset red_note_sound_path
 0000043A  E8 00000000 E	    call sfMusic_createFromFile
 0000043F  83 C4 04		    add esp, 4 
 00000442  A3 000002C6 R	    mov music, eax

 00000447  50			    push eax
 00000448  E8 00000000 E	    call sfMusic_play
 0000044D  83 C4 04		    add esp, 4
 00000450  C3			    ret
 00000451			rednote_sound ENDP

 00000451			bluenote_sound PROC
 00000451  68 000000B2 R	    push offset blue_note_sound_path
 00000456  E8 00000000 E	    call sfMusic_createFromFile
 0000045B  83 C4 04		    add esp, 4 
 0000045E  A3 000002C6 R	    mov music, eax

 00000463  50			    push eax
 00000464  E8 00000000 E	    call sfMusic_play
 00000469  83 C4 04		    add esp, 4
 0000046C  C3			    ret
 0000046D			bluenote_sound ENDP

 0000046D			main_game_page PROC window:dword,musicPath:dword,noteChart:dword
					
 00000470  C7 45 10			mov dword ptr [noteChart], offset chart
	   00000034 R
 00000477  FF 75 10			push dword ptr [noteChart]
 0000047A  E8 FFFFFB81			call readNoteChart
 0000047F  83 C4 04			add esp, 4

					; load background
 00000482  E8 FFFFFDF2			call @ld_background

					; load red note texture
 00000487  6A 00			push 0
 00000489  68 00000067 R		push offset redNotePath
 0000048E  E8 00000000 E		call sfTexture_createFromFile
 00000493  83 C4 08			add esp, 8
 00000496  A3 00000293 R		mov redDrumTexture, eax

					; load blue note texture
 0000049B  6A 00			push 0
 0000049D  68 00000080 R		push offset blueNotePath
 000004A2  E8 00000000 E		call sfTexture_createFromFile
 000004A7  83 C4 08			add esp, 8
 000004AA  A3 00000297 R		mov blueDrumTexture, eax

					; create judgement circle
 000004AF  E8 FFFFFD47			call createJudgementCircle

					; create music
 000004B4  6A 00			push 0
 000004B6  FF 75 0C			push dword ptr [musicPath]
 000004B9  E8 00000000 E		call sfMusic_createFromFile
 000004BE  83 C4 08			add esp, 8
 000004C1  A3 000002C6 R		mov music, eax

 000004C6  6A 00			push 0
 000004C8  FF 35 000002C6 R		push music
 000004CE  E8 00000000 E		call sfMusic_setLoop
 000004D3  83 C4 08			add esp, 8

 000004D6  E8 00000000 E		call sfClock_create
 000004DB  A3 000002CA R		mov spawnClock, eax

 000004E0			@main_loop:
 000004E0  8B 45 08			mov eax, DWORD PTR [window]
 000004E3  50			    push eax
 000004E4  E8 00000000 E	    call sfRenderWindow_isOpen
 000004E9  83 C4 04		    add esp, 4
 000004EC  85 C0		    test eax, eax
 000004EE  0F 84 000002FF	    je exit_program

 000004F4  FF 35 000002CA R	    push spawnClock  ; 呼叫sfClock_getElapsedTime並獲取microseconds
 000004FA  E8 00000000 E	    call sfClock_getElapsedTime
 000004FF  F3/ 0F 2A C8		    cvtsi2ss xmm1, eax

 00000503  F3/ 0F 10 05		    movss xmm0, [real_1000000]
	   00000417 R
 0000050B  F3/ 0F 5E C8		    divss xmm1, xmm0

				    ; 除以1000000.0以轉換為秒
 0000050F  F3/ 0F 11 0D		    movss dword ptr [currentTime], xmm1
	   000002CE R

 00000517  A1 000002DA R		mov eax, gameStarted
 0000051C  83 F8 00			cmp eax, 0
 0000051F  75 59			jne deter_offset

					; check game start
 00000521  FF 35 000002C6 R		push music 
 00000527  E8 00000000 E		call sfMusic_getStatus
 0000052C  83 C4 04			add esp, 4
 0000052F  83 F8 02			cmp eax, sfPlaying
 00000532  74 29			je skip_music_play

					; 比較 currentTime >= msInfo_offset
 00000534  F3/ 0F 10 05		    movss xmm0, [msInfo._offset]     ; 加載 musicInfo.offset
	   000000E7 R
 0000053C  0F 2E C8		    ucomiss xmm1, xmm0               ; 比較 currentTime 和 musicInfo.offset
 0000053F  72 1C		    jb skip_music_play               ; 如果 currentTime < musicInfo.offset 跳過

				    ; 比較 msInfo_offset > 0
 00000541  D9 EE		    fldz                             ; st(0) = 0.0
 00000543  D9 05 000000E7 R	    fld msInfo._offset               ; st(1) = 0.0, st(0) = musicInfo.offset
 00000549  DF F1		    fcomip st(0), st(1)              ; 比較 st(0) 與 0.0
 0000054B  77 10		    ja skip_music_play              ; 如果 musicInfo.offset < 0 跳過
 0000054D  DD D8		    fstp st(0)                       ; 清除浮點堆疊

				    ; 播放音樂
 0000054F  FF 35 000002C6 R	    push music
 00000555  E8 00000000 E	    call sfMusic_play
 0000055A  83 C4 04			add esp, 4

 0000055D			skip_music_play:
				    ; 重置時鐘
 0000055D  FF 35 000002CA R	    push spawnClock
 00000563  E8 00000000 E	    call sfClock_restart

				    ; 設定 gameStartTime = 0.0f
 00000568  D9 EE		    fldz                             ; 加載 0.0
 0000056A  D9 1D 000002D6 R	    fstp gameStartTime

				    ; 設定 gameStarted = 1
 00000570  C7 05 000002DA R	    mov gameStarted, 1
	   00000001

 0000057A			deter_offset:
 0000057A  A1 000002DA R		mov eax, gameStarted
 0000057F  83 F8 01			cmp eax, 1
 00000582  75 5B			jne @event_loop

					; 比較 musicInfo.offset < 0
 00000584  D9 EE		    fldz                             ; st(0) = 0.0
 00000586  D9 05 000000E7 R	    fld msInfo._offset               ; st(1) = 0.0, st(0) = musicInfo.offset
 0000058C  DF F1		    fcomip st(0), st(1)              ; 比較 musicInfo.offset 和 0.0
 0000058E  77 4F		    ja @event_loop                  ;如果 offset >= 0，跳過 play music

 00000590  DF F1		    fcomip st(0), st(1)              ; 比較 musicInfo.offset 和 0.0
 00000592  76 37		    jbe @late_beatmap                  ;如果 offset >= 0，跳過 play music
 00000594  DD D8		    fstp st(0)                       ; 清除浮點堆疊

					; 呼叫 sfMusic_getStatus 並檢查是否為 sfPlaying
 00000596  FF 35 000002C6 R	    push music
 0000059C  E8 00000000 E	    call sfMusic_getStatus
 000005A1  83 C4 04			add esp, 4
 000005A4  83 F8 02		    cmp eax, sfPlaying               ; 比較返回值與 sfPlaying
 000005A7  74 36		    je @event_loop                  ; 如果音樂正在播放，跳過

				    ; 計算 currentTime >= -musicInfo.offset
 000005A9  D9 05 000000E7 R	    fld msInfo._offset              ; st(0) = musicInfo.offset
 000005AF  D9 E0		    fchs                             ; st(0) = -musicInfo.offset
 000005B1  D9 05 000002CE R	    fld currentTime                  ; st(1) = currentTime, st(0) = -musicInfo.offset
 000005B7  DF F1		    fcomip st(0), st(1)              ; 比較 currentTime 和 -musicInfo.offset
 000005B9  72 24		    jb @event_loop                  ; 如果 currentTime < -musicInfo.offset，跳過
 000005BB  DD D8		    fstp st(0)                       ; 清除浮點堆疊

				    ; 播放音樂
 000005BD  FF 35 000002C6 R	    push music
 000005C3  E8 00000000 E	    call sfMusic_play
 000005C8  83 C4 04			add esp, 4

 000005CB			    @late_beatmap: ; 如果 musicInfo.offset <０　&&　currentTime >= -musicInfo.offset，開始播放譜面
 000005CB  D9 05 000000E7 R	    fld msInfo._offset              ; st(0) = musicInfo.offset
 000005D1  D9 E0		    fchs                             ; st(0) = -musicInfo.offset
 000005D3  D9 05 000002CE R	    fld currentTime                  ; st(1) = currentTime, st(0) = -musicInfo.offset
 000005D9  DF F1		    fcomip st(0), st(1)              ; 比較 currentTime 和 -musicInfo.offset
 000005DB  73 9D		    jae deter_offset                  ; 如果 currentTime >= -musicInfo.offset，跳過鼓面
 000005DD  DD D8		    fstp st(0)                       ; 清除浮點堆疊

 000005DF				@event_loop:
						; 事件處理
 000005DF  8D 35 00000004 R	        lea esi, event
 000005E5  56			        push esi
 000005E6  8B 45 08		        mov eax, DWORD PTR [window]
 000005E9  50			        push eax
 000005EA  E8 00000000 E	        call sfRenderWindow_pollEvent
 000005EF  83 C4 08		        add esp, 8
 000005F2  85 C0		        test eax, eax
 000005F4  74 54		        je @controll_drum
				    
				        ; 檢查關閉事件
 000005F6  83 3E 00		        cmp dword ptr [esi].sfEvent._type, sfEvtClosed
 000005F9  0F 84 0000018B	        je @end

 000005FF  83 3E 05				cmp dword ptr [esi].sfEvent._type, sfEvtKeyPressed
 00000602  74 00		        je check_gameStarted

 00000604			check_gameStarted:
 00000604  83 3D 000002DA R	        cmp gameStarted, 1
	   01
 0000060B  74 02		        je @check_key_press

 0000060D  EB D0		        jmp @event_loop

 0000060F					@check_key_press:
 0000060F  83 7E 04 05					cmp dword ptr [esi+4], sfKeyF
 00000613  74 14		            je @red_pressed

 00000615  83 7E 04 09		            cmp dword ptr [esi+4], sfKeyJ
 00000619  74 0E		            je @red_pressed

 0000061B  83 7E 04 03		            cmp dword ptr [esi+4], sfKeyD
 0000061F  74 14		            je @blue_pressed

 00000621  83 7E 04 0A		            cmp dword ptr [esi+4], sfKeyK
 00000625  74 0E		            je @blue_pressed     
				            
 00000627  EB B6		            jmp @event_loop
 00000629				@red_pressed:
				        ;call rednote_sound
				        ;push eax
				        ;add esp, 4
 00000629  6A 01				push 1
 0000062B  E8 FFFFFD14				call processHit
 00000630  83 C4 08				add esp, 8
 00000633  EB 15				jmp @controll_drum

 00000635				@blue_pressed:
 00000635  E8 FFFFFE17		        call bluenote_sound
 0000063A  50			        push eax
 0000063B  83 C4 04		        add esp, 4
 0000063E  6A 02				push 2
 00000640  E8 FFFFFCFF				call processHit
 00000645  83 C4 08				add esp, 8
 00000648  EB 00				jmp @controll_drum

 0000064A				@controll_drum:
 0000064A  A1 000002DA R			mov eax, gameStarted
 0000064F  83 F8 00				cmp eax, 0
 00000652  74 7F				je @render_window

 00000654  FF 35 000002CA R	        push spawnClock  ; 呼叫sfClock_getElapsedTime並獲取microseconds
 0000065A  E8 00000000 E	        call sfClock_getElapsedTime
 0000065F  F3/ 0F 2A C8		        cvtsi2ss xmm1, eax

 00000663  F3/ 0F 10 05		        movss xmm0, [real_1000000]
	   00000417 R
 0000066B  F3/ 0F 5E C8		        divss xmm1, xmm0

				        ; 除以1000000.0以轉換為秒
 0000066F  F3/ 0F 11 0D		        movss dword ptr [currentTime], xmm1
	   000002CE R

 00000677			spawn_loop:
				        ;比較currentNoteIndex < totalNotes
 00000677  A1 000002D2 R	        mov eax, currentNoteIndex
 0000067C  8B 1D 0000033A R	        mov ebx, totalNotes
 00000682  3B C3		        cmp eax, ebx
 00000684  73 40		        jae skip_spawn

				        ; 比較 currentTime >= noteTimings[currentNoteIndex]
 00000686  F3/ 0F 10 05		        movss xmm0, [currentTime]              ; 加載 currentTime
	   000002CE R
 0000068E  8B 1D 000002D2 R	        mov ebx, currentNoteIndex               ; ebx = currentNoteIndex
 00000694  C1 E3 02		        shl ebx, 2                              ; 計算索引的位移 (4字節對齊)
 00000697  F3/ 0F 10 8B		        movss xmm1, noteTimings[ebx]            ; 加載 noteTimings[currentNoteIndex]
	   00000342 R
 0000069F  0F 2E C1		        ucomiss xmm0, xmm1                      ; 比較 currentTime 與 noteTimings
 000006A2  72 2A		        jb loop_end                             ; 如果 currentTime < noteTimings, 跳過迴圈

				        ; 檢查 notes[currentNoteIndex] != 0
 000006A4  A1 000002D2 R	        mov eax, currentNoteIndex               ; eax = currentNoteIndex
 000006A9  8B 1C 85		        mov ebx, notes[eax*4]                   ; ebx = notes[currentNoteIndex]
	   000002DE R
 000006B0  83 FB 00		        cmp ebx, 0                              ; 比較 notes[currentNoteIndex] == 0
 000006B3  74 11		        je skip_spawn                           ; 如果等於0，跳過 spawnDrum

				        ; 呼叫 spawnDrum(notes[currentNoteIndex], noteTimings[currentNoteIndex])

 000006B5  83 EC 04		        sub esp, 4
 000006B8  F3/ 0F 11 0C 24	        movss dword ptr [esp], xmm1               ; 將noteTimings[currentNoteIndex]壓入堆疊
 000006BD  53			        push ebx                                ; 將notes[currentNoteIndex]壓入堆疊
 000006BE  E8 FFFFF9D7		        call spawnDrum
 000006C3  83 C4 08		        add esp, 8                              ; 清理堆疊

 000006C6			    skip_spawn:
				        ; 更新 currentNoteIndex++
 000006C6  FF 05 000002D2 R	        inc currentNoteIndex
 000006CC  EB A9		        jmp spawn_loop                          ; 返回迴圈起點

 000006CE			    loop_end:
				        ; 呼叫 updateDrums 函式
 000006CE  E8 FFFFFA66		        call updateDrums

 000006D3				@render_window:
				        ; 清除視窗
 000006D3  FF 35 000003A2 R	        push blackColor
 000006D9  FF 75 08		        push window
 000006DC  E8 00000000 E	        call sfRenderWindow_clear
 000006E1  83 C4 08		        add esp, 8

				        ; 繪製背景
 000006E4  6A 00		        push 0
 000006E6  A1 000002BE R	        mov eax, DWORD PTR [bgSprite]
 000006EB  50			        push eax
 000006EC  8B 4D 08		        mov ecx, DWORD PTR [window]
 000006EF  51			        push ecx
 000006F0  E8 00000000 E	        call sfRenderWindow_drawSprite
 000006F5  83 C4 0C		        add esp, 12

				        ; 繪製音符
 000006F8  A1 0000028F R	        mov eax, _size
 000006FD  85 C0		        test eax, eax
 000006FF  74 44		        jz @deter_music_stop
 00000701  A3 0000042B R	        mov loop_index, eax
 00000706  8B 3D 00000287 R	        mov edi, front
 0000070C			    draw_notes:
 0000070C  A1 0000042B R	        mov eax, loop_index
 00000711  83 F8 00		        cmp eax, 0
 00000714  74 2F		        jz @deter_music_stop

 00000716  6A 00		        push 0
 00000718  8B 04 BD		        mov eax, [drumQueue + edi*4]
	   000000F7 R
 0000071F  FF 30				push dword ptr [eax]
 00000721  8B 4D 08		        mov ecx, DWORD PTR [window]
 00000724  51			        push ecx
 00000725  E8 00000000 E	        call sfRenderWindow_drawSprite
 0000072A  83 C4 08		        add esp, 8

 0000072D  83 FF 64		        cmp edi, MAX_DRUMS
 00000730  75 05		        jne @next_note
 00000732  BF 00000000		        mov edi, 0

 00000737			    @next_note:
 00000737  47			        inc edi
 00000738  A1 0000042B R	        mov eax, loop_index
 0000073D  48			        dec eax
 0000073E  A3 0000042B R	        mov loop_index, eax
 00000743  EB C7		        jmp draw_notes
				        

 00000745			    @deter_music_stop:
 00000745  FF 35 000002C6 R	        push music
 0000074B  E8 00000000 E	        call sfMusic_getStatus
 00000750  83 C4 04		        add esp, 4
 00000753  83 F8 00		        cmp eax, sfStopped
 00000756  75 0F		        jne @display
 00000758  A1 000002D2 R	        mov eax, currentNoteIndex
 0000075D  3B 05 0000033A R	        cmp eax, totalNotes
 00000763  75 02		        jne @display

 00000765  EB 63		        jmp @end_game

 00000767			    @display:
				        ; 繪製判定圓
 00000767  6A 00		        push 0
 00000769  FF 35 000002C2 R	        push dword ptr [judgementCircle]
 0000076F  FF 75 08		        push DWORD PTR [window]
 00000772  E8 00000000 E	        call sfRenderWindow_drawCircleShape
 00000777  83 C4 0C		        add esp, 12

 0000077A  FF 75 08		        push window
 0000077D  E8 00000000 E	        call sfRenderWindow_display
 00000782  83 C4 04		        add esp, 4

 00000785  E9 FFFFFD56		        jmp @main_loop

 0000078A			@end:

				    ; 釋放資源
 0000078A  FF 35 000002C6 R		push music
 00000790  E8 00000000 E		call sfMusic_destroy
 00000795  83 C4 04			add esp, 4

 00000798  6A 00			push 0
 0000079A  E8 00000000 E		call sfTexture_destroy
 0000079F  83 C4 04			add esp, 4

 000007A2  6A 00			push 0
 000007A4  E8 00000000 E		call sfSprite_destroy
 000007A9  83 C4 04			add esp, 4

 000007AC  6A 00			push 0
 000007AE  E8 00000000 E		call sfCircleShape_destroy
 000007B3  83 C4 04			add esp, 4

 000007B6  6A 00			push 0
 000007B8  E8 00000000 E		call sfFont_destroy
 000007BD  83 C4 04			add esp, 4

 000007C0  6A 00			push 0
 000007C2  E8 00000000 E		call sfText_destroy
 000007C7  83 C4 04			add esp, 4

 000007CA			@end_game:
 000007CA  FF 35 000000DB R	    push stats.max_combo
 000007D0  FF 35 000000DF R	    push stats.total_score
 000007D6  FF 35 000000D3 R	    push stats.miss_count
 000007DC  FF 35 000000CF R	    push stats.good_count
 000007E2  FF 35 000000CB R	    push stats.great_count
 000007E8  FF 75 08		    push window
 000007EB  E8 00000000 E	    call end_game_page
 000007F0  83 C4 18		    add esp, 24

 000007F3			exit_program:

					ret
 000007F5			main_game_page ENDP

				END main_game_page
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/23/24 03:06:44
main_game_page.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Drum . . . . . . . . . . . . . .	 0000000C
  sprite . . . . . . . . . . . .	 00000000	 DWord
  _type  . . . . . . . . . . . .	 00000004	 DWord
  targetTime . . . . . . . . . .	 00000008	 DWord
GameStats  . . . . . . . . . . .	 00000018
  great_count  . . . . . . . . .	 00000000	 DWord
  good_count . . . . . . . . . .	 00000004	 DWord
  miss_count . . . . . . . . . .	 00000008	 DWord
  current_combo  . . . . . . . .	 0000000C	 DWord
  max_combo  . . . . . . . . . .	 00000010	 DWord
  total_score  . . . . . . . . .	 00000014	 DWord
MusicInfo  . . . . . . . . . . .	 00000014
  bpm  . . . . . . . . . . . . .	 00000000	 DWord
  _offset  . . . . . . . . . . .	 00000004	 DWord
  spawnTime  . . . . . . . . . .	 00000008	 DWord
  currentBar . . . . . . . . . .	 0000000C	 DWord
  notesInBar . . . . . . . . . .	 00000010	 DWord
key  . . . . . . . . . . . . . .	 00000014
  code . . . . . . . . . . . . .	 00000000	 DWord
  alt  . . . . . . . . . . . . .	 00000004	 DWord
  control  . . . . . . . . . . .	 00000008	 DWord
  shift  . . . . . . . . . . . .	 0000000C	 DWord
  system . . . . . . . . . . . .	 00000010	 DWord
mouseButton  . . . . . . . . . .	 0000000C
  button . . . . . . . . . . . .	 00000000	 DWord
  x  . . . . . . . . . . . . . .	 00000004	 DWord
  y  . . . . . . . . . . . . . .	 00000008	 DWord
sfColor  . . . . . . . . . . . .	 00000004
  r  . . . . . . . . . . . . . .	 00000000	 Byte
  g  . . . . . . . . . . . . . .	 00000001	 Byte
  b  . . . . . . . . . . . . . .	 00000002	 Byte
  a  . . . . . . . . . . . . . .	 00000003	 Byte
sfEvent  . . . . . . . . . . . .	 00000030
  _type  . . . . . . . . . . . .	 00000000	 DWord
  _size  . . . . . . . . . . . .	 00000004	 DWord
  mouse  . . . . . . . . . . . .	 00000008	 
  _key . . . . . . . . . . . . .	 00000014	 
  mouseMove  . . . . . . . . . .	 00000028	 QWord
sfFloatRect  . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  _width . . . . . . . . . . . .	 00000008	 DWord
  height . . . . . . . . . . . .	 0000000C	 DWord
sfVector2f . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVector2i . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVideoMode  . . . . . . . . . .	 0000000C
  _width . . . . . . . . . . . .	 00000000	 DWord
  height . . . . . . . . . . . .	 00000004	 DWord
  bpp  . . . . . . . . . . . . .	 00000008	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 0000042F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000007F5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@countDown_text  . . . . . . . .	P Near	 000002AF _TEXT	Length= 00000095 Public C
@ld_background . . . . . . . . .	P Near	 00000279 _TEXT	Length= 00000036 Public C
bluenote_sound . . . . . . . . .	P Near	 00000451 _TEXT	Length= 0000001C Public C
createJudgementCircle  . . . . .	P Near	 000001FB _TEXT	Length= 0000007E Public C
dequeue  . . . . . . . . . . . .	P Near	 0000005A _TEXT	Length= 00000040 Public C
  SkipFrontWrap  . . . . . . . .	L Near	 00000092 _TEXT	
  QueueEmpty . . . . . . . . . .	L Near	 00000099 _TEXT	
enqueue  . . . . . . . . . . . .	P Near	 00000017 _TEXT	Length= 00000043 Public C
  @drum  . . . . . . . . . . . .	DWord	 bp + 00000008
  SkipRearWrap . . . . . . . . .	L Near	 0000004F _TEXT	
  @end_enqueue . . . . . . . . .	L Near	 00000055 _TEXT	
isQueueEmpty . . . . . . . . . .	P Near	 0000000C _TEXT	Length= 0000000B Public C
isQueueFull  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000C Public C
main_game_page . . . . . . . . .	P Near	 0000046D _TEXT	Length= 00000388 Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
  musicPath  . . . . . . . . . .	DWord	 bp + 0000000C
  noteChart  . . . . . . . . . .	DWord	 bp + 00000010
  @main_loop . . . . . . . . . .	L Near	 000004E0 _TEXT	
  skip_music_play  . . . . . . .	L Near	 0000055D _TEXT	
  deter_offset . . . . . . . . .	L Near	 0000057A _TEXT	
  @late_beatmap  . . . . . . . .	L Near	 000005CB _TEXT	
  @event_loop  . . . . . . . . .	L Near	 000005DF _TEXT	
  check_gameStarted  . . . . . .	L Near	 00000604 _TEXT	
  @check_key_press . . . . . . .	L Near	 0000060F _TEXT	
  @red_pressed . . . . . . . . .	L Near	 00000629 _TEXT	
  @blue_pressed  . . . . . . . .	L Near	 00000635 _TEXT	
  @controll_drum . . . . . . . .	L Near	 0000064A _TEXT	
  spawn_loop . . . . . . . . . .	L Near	 00000677 _TEXT	
  skip_spawn . . . . . . . . . .	L Near	 000006C6 _TEXT	
  loop_end . . . . . . . . . . .	L Near	 000006CE _TEXT	
  @render_window . . . . . . . .	L Near	 000006D3 _TEXT	
  draw_notes . . . . . . . . . .	L Near	 0000070C _TEXT	
  @next_note . . . . . . . . . .	L Near	 00000737 _TEXT	
  @deter_music_stop  . . . . . .	L Near	 00000745 _TEXT	
  @display . . . . . . . . . . .	L Near	 00000767 _TEXT	
  @end . . . . . . . . . . . . .	L Near	 0000078A _TEXT	
  @end_game  . . . . . . . . . .	L Near	 000007CA _TEXT	
  exit_program . . . . . . . . .	L Near	 000007F3 _TEXT	
processHit . . . . . . . . . . .	P Near	 00000344 _TEXT	Length= 000000F1 Public C
  great_hit  . . . . . . . . . .	L Near	 000003CB _TEXT	
  good_hit . . . . . . . . . . .	L Near	 000003F2 _TEXT	
  miss_hit . . . . . . . . . . .	L Near	 00000417 _TEXT	
  do_dequeue . . . . . . . . . .	L Near	 00000429 _TEXT	
  done_processing  . . . . . . .	L Near	 0000042E _TEXT	
readNoteChart  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000000 Public C
rednote_sound  . . . . . . . . .	P Near	 00000435 _TEXT	Length= 0000001C Public C
spawnDrum  . . . . . . . . . . .	P Near	 0000009A _TEXT	Length= 0000009F Public C
  _type  . . . . . . . . . . . .	DWord	 bp + 00000008
  targetTime . . . . . . . . . .	DWord	 bp + 0000000C
  SetBlueTexture . . . . . . . .	L Near	 000000EE _TEXT	
  DoneTexture  . . . . . . . . .	L Near	 00000100 _TEXT	
  QueueFullSpawn . . . . . . . .	L Near	 00000135 _TEXT	
updateDrums  . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 000000C2 Public C
  i  . . . . . . . . . . . . . .	DWord	 bp - 00000004
  SkipFrontWrap2 . . . . . . . .	L Near	 0000019A _TEXT	
  SkipFrontRemoval . . . . . . .	L Near	 000001A0 _TEXT	
  UpdateLoop . . . . . . . . . .	L Near	 000001AE _TEXT	
  NoWrap . . . . . . . . . . . .	L Near	 000001ED _TEXT	
  EndUpdateLoop  . . . . . . . .	L Near	 000001F6 _TEXT	
  SkipUpdate . . . . . . . . . .	L Near	 000001F6 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
GOOD_THRESHOLD . . . . . . . . .	Number	 0000001Eh   
GREAT_THRESHOLD  . . . . . . . .	Number	 00000004h   
GetStdHandle@4 . . . . . . . . .	L Near	 00000000 FLAT	External C
HIT_POSITION_X . . . . . . . . .	Number	 000001C2h   
INITIAL_DELAY  . . . . . . . . .	Number	 00000003h   
MAX_DRUMS  . . . . . . . . . . .	Number	 00000064h   
MAX_LINE_LENGTH  . . . . . . . .	Number	 000003E8h   
MAX_NOTES  . . . . . . . . . . .	Number	 00002710h   
SCREEN_HEIGHT  . . . . . . . . .	Number	 000002D0h   
SCREEN_WIDTH . . . . . . . . . .	Number	 00000500h   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
WriteConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External C
_size  . . . . . . . . . . . . .	DWord	 0000028F _DATA	
bgPath . . . . . . . . . . . . .	Byte	 0000004C _DATA	
bgSprite . . . . . . . . . . . .	DWord	 000002BE _DATA	
bgTexture  . . . . . . . . . . .	DWord	 000002BA _DATA	
blackColor . . . . . . . . . . .	sfColor	 000003A2 _DATA	
blueDrumTexture  . . . . . . . .	DWord	 00000297 _DATA	
blueNotePath . . . . . . . . . .	Byte	 00000080 _DATA	
blue_note_sound_path . . . . . .	Byte	 000000B2 _DATA	
breakline  . . . . . . . . . . .	Byte	 000003C7 _DATA	
chart  . . . . . . . . . . . . .	Byte	 00000034 _DATA	
comma  . . . . . . . . . . . . .	Byte	 000003C5 _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000000 _DATA	
countDownText  . . . . . . . . .	DWord	 000002B6 _DATA	
currentNoteIndex . . . . . . . .	DWord	 000002D2 _DATA	
currentPage  . . . . . . . . . .	DWord	 00000000 FLAT	External C
currentTime  . . . . . . . . . .	DWord	 000002CE _DATA	
decimal_mult . . . . . . . . . .	QWord	 000003E7 _DATA	
drumQueue  . . . . . . . . . . .	DWord	 000000F7 _DATA	
drumStep . . . . . . . . . . . .	DWord	 0000039E _DATA	
end_game_page  . . . . . . . . .	L Near	 00000000 FLAT	External C
event  . . . . . . . . . . . . .	sfEvent	 00000004 _DATA	
fclose . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fgets  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
font_path  . . . . . . . . . . .	Byte	 0000029B _DATA	
font . . . . . . . . . . . . . .	DWord	 000002B2 _DATA	
fopen  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
front  . . . . . . . . . . . . .	DWord	 00000287 _DATA	
gameStartTime  . . . . . . . . .	DWord	 000002D6 _DATA	
gameStarted  . . . . . . . . . .	DWord	 000002DA _DATA	
getBpm . . . . . . . . . . . . .	Byte	 000003CA _DATA	
getOffset  . . . . . . . . . . .	Byte	 000003D1 _DATA	
judgementCircle  . . . . . . . .	DWord	 000002C2 _DATA	
loop_index . . . . . . . . . . .	DWord	 0000042B _DATA	
malloc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
msInfo . . . . . . . . . . . . .	MusicInfo  000000E3 _DATA	
music  . . . . . . . . . . . . .	DWord	 000002C6 _DATA	
noteSpawnInterval  . . . . . . .	DWord	 0000033E _DATA	
noteTimings  . . . . . . . . . .	DWord	 00000342 _DATA	
notes  . . . . . . . . . . . . .	DWord	 000002DE _DATA	
readA  . . . . . . . . . . . . .	Byte	 000003AA _DATA	
real_0 . . . . . . . . . . . . .	DWord	 00000427 _DATA	
real_1000000 . . . . . . . . . .	DWord	 00000417 _DATA	
real_1280  . . . . . . . . . . .	DWord	 00000413 _DATA	
real_200 . . . . . . . . . . . .	DWord	 00000403 _DATA	
real_225 . . . . . . . . . . . .	DWord	 00000407 _DATA	
real_2 . . . . . . . . . . . . .	DWord	 000003F7 _DATA	
real_30  . . . . . . . . . . . .	DWord	 000003FB _DATA	
real_32  . . . . . . . . . . . .	DWord	 000003FF _DATA	
real_365 . . . . . . . . . . . .	DWord	 00000423 _DATA	
real_450 . . . . . . . . . . . .	DWord	 0000040B _DATA	
real_4 . . . . . . . . . . . . .	DWord	 000003DF _DATA	
real_60000 . . . . . . . . . . .	DWord	 000003E3 _DATA	
real_60  . . . . . . . . . . . .	DWord	 000003DB _DATA	
real_720 . . . . . . . . . . . .	DWord	 0000040F _DATA	
real_good_threshold  . . . . . .	DWord	 0000041B _DATA	
real_great_threshold . . . . . .	DWord	 0000041F _DATA	
rear . . . . . . . . . . . . . .	DWord	 0000028B _DATA	
redDrumTexture . . . . . . . . .	DWord	 00000293 _DATA	
redNotePath  . . . . . . . . . .	Byte	 00000067 _DATA	
red_note_sound_path  . . . . . .	Byte	 0000009A _DATA	
sfCircleShape_create . . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_destroy  . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setFillColor . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineColor  .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineThickness 	L Near	 00000000 FLAT	External C
sfCircleShape_setPosition  . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setRadius  . . . .	L Near	 00000000 FLAT	External C
sfClock_create . . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_getElapsedTime . . . . .	L Near	 00000000 FLAT	External C
sfClock_restart  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClose  . . . . . . . . . . . .	Number	 00000004h   
sfColor_fromRGBA . . . . . . . .	L Near	 00000000 FLAT	External C
sfColor_fromRGB  . . . . . . . .	L Near	 00000000 FLAT	External C
sfEvtClosed  . . . . . . . . . .	Number	 00000000h   
sfEvtGainedFocus . . . . . . . .	Number	 00000003h   
sfEvtKeyPressed  . . . . . . . .	Number	 00000005h   
sfEvtKeyReleased . . . . . . . .	Number	 00000006h   
sfEvtLostFocus . . . . . . . . .	Number	 00000002h   
sfEvtMouseButtonPressed  . . . .	Number	 00000009h   
sfEvtMouseButtonReleased . . . .	Number	 0000000Ah   
sfEvtMouseEntered  . . . . . . .	Number	 0000000Ch   
sfEvtMouseLeft . . . . . . . . .	Number	 0000000Dh   
sfEvtMouseMoved  . . . . . . . .	Number	 0000000Bh   
sfEvtMouseWheelMoved . . . . . .	Number	 00000007h   
sfEvtMouseWheelScrolled  . . . .	Number	 00000008h   
sfEvtResized . . . . . . . . . .	Number	 00000001h   
sfEvtTextEntered . . . . . . . .	Number	 00000004h   
sfFalse  . . . . . . . . . . . .	Number	 00000000h   
sfFont_createFromFile  . . . . .	L Near	 00000000 FLAT	External C
sfFont_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfFullscreen . . . . . . . . . .	Number	 00000008h   
sfKeyA . . . . . . . . . . . . .	Number	 00000000h   
sfKeyD . . . . . . . . . . . . .	Number	 00000003h   
sfKeyEnter . . . . . . . . . . .	Number	 0000003Ah   
sfKeyEscape  . . . . . . . . . .	Number	 00000024h   
sfKeyF . . . . . . . . . . . . .	Number	 00000005h   
sfKeyJ . . . . . . . . . . . . .	Number	 00000009h   
sfKeyK . . . . . . . . . . . . .	Number	 0000000Ah   
sfKeyS . . . . . . . . . . . . .	Number	 00000012h   
sfMouseLeft  . . . . . . . . . .	Number	 00000000h   
sfMouseMiddle  . . . . . . . . .	Number	 00000002h   
sfMouseRight . . . . . . . . . .	Number	 00000001h   
sfMusic_createFromFile . . . . .	L Near	 00000000 FLAT	External C
sfMusic_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_getStatus  . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_play . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_setLoop  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_stop . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfNone . . . . . . . . . . . . .	Number	 00000000h   
sfPaused . . . . . . . . . . . .	Number	 00000001h   
sfPlaying  . . . . . . . . . . .	Number	 00000002h   
sfRectangleShape_create  . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_destroy . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setFillColor  .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineColor .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineThickness .	L Near	 00000000 FLAT	External C
sfRectangleShape_setPosition . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setSize . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_clear . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_close . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_create  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_destroy . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_display . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawCircleShape .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawRectangleShape 	L Near	 00000000 FLAT	External C
sfRenderWindow_drawSprite  . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawText  . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_isOpen  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_pollEvent . . . .	L Near	 00000000 FLAT	External C
sfResize . . . . . . . . . . . .	Number	 00000002h   
sfSleep  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_create  . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_destroy . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_getPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setTexture  . . . . . .	L Near	 00000000 FLAT	External C
sfStopped  . . . . . . . . . . .	Number	 00000000h   
sfText_create  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_getGlobalBounds . . . . .	L Near	 00000000 FLAT	External C
sfText_getLocalBounds  . . . . .	L Near	 00000000 FLAT	External C
sfText_setCharacterSize  . . . .	L Near	 00000000 FLAT	External C
sfText_setFillColor  . . . . . .	L Near	 00000000 FLAT	External C
sfText_setFont . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineColor . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineThickness . . .	L Near	 00000000 FLAT	External C
sfText_setPosition . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setString . . . . . . . .	L Near	 00000000 FLAT	External C
sfTexture_createFromFile . . . .	L Near	 00000000 FLAT	External C
sfTexture_destroy  . . . . . . .	L Near	 00000000 FLAT	External C
sfTitlebar . . . . . . . . . . .	Number	 00000001h   
sfTrue . . . . . . . . . . . . .	Number	 00000001h   
sfWindow_setFramerateLimit . . .	L Near	 00000000 FLAT	External C
spawnClock . . . . . . . . . . .	DWord	 000002CA _DATA	
stats  . . . . . . . . . . . . .	GameStats  000000CB _DATA	
str_bpm  . . . . . . . . . . . .	Byte	 000003AC _DATA	
str_end  . . . . . . . . . . . .	Byte	 000003C0 _DATA	
str_offset . . . . . . . . . . .	Byte	 000003B1 _DATA	
str_start  . . . . . . . . . . .	Byte	 000003B9 _DATA	
strcspn  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strlen . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strncmp  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strtok_s . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
ten  . . . . . . . . . . . . . .	QWord	 000003EF _DATA	
totalNotes . . . . . . . . . . .	DWord	 0000033A _DATA	
transparentColor . . . . . . . .	sfColor	 000003A6 _DATA	

	   0 Warnings
	   0 Errors
