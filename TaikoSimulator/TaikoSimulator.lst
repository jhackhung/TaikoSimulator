Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 18:25:11
main_game_page.asm					     Page 1 - 1


				.model flat, c
				include csfml.inc
			      C ; CSFML.INC - SFML Definitions for x86 Assembly
			      C ; 使用 MASM 語法
			      C 
			      C includelib csfml-audio.lib
			      C includelib csfml-graphics.lib
			      C includelib csfml-system.lib
			      C includelib csfml-window.lib
			      C 
			      C ; sfBool 定義
 = 00000000		      C sfFalse     equ 0
 = 00000001		      C sfTrue      equ 1
			      C 
			      C ; sfEventType 定義
 = 00000000		      C sfEvtClosed               equ 0
 = 00000001		      C sfEvtResized              equ 1
 = 00000002		      C sfEvtLostFocus            equ 2
 = 00000003		      C sfEvtGainedFocus          equ 3
 = 00000004		      C sfEvtTextEntered          equ 4
 = 00000005		      C sfEvtKeyPressed           equ 5
 = 00000006		      C sfEvtKeyReleased          equ 6
 = 00000007		      C sfEvtMouseWheelMoved      equ 7
 = 00000008		      C sfEvtMouseWheelScrolled   equ 8
 = 00000009		      C sfEvtMouseButtonPressed   equ 9
 = 0000000A		      C sfEvtMouseButtonReleased  equ 10
 = 0000000B		      C sfEvtMouseMoved           equ 11
 = 0000000C		      C sfEvtMouseEntered         equ 12
 = 0000000D		      C sfEvtMouseLeft            equ 13
			      C 
			      C ; sfMouseButton 定義
 = 00000000		      C sfMouseLeft   equ 0
 = 00000001		      C sfMouseRight  equ 1
 = 00000002		      C sfMouseMiddle equ 2
			      C 
			      C ; sfKey 定義
 = 0000003A		      C sfKeyEnter    equ 58
 = 00000000		      C sfKeyA        equ 0
 = 00000012		      C sfKeyS        equ 18
 = 00000003		      C sfKeyD        equ 3
 = 00000024		      C sfKeyEscape   equ 36
			      C 
			      C ; 視窗風格定義
 = 00000000		      C sfNone       equ 0
 = 00000001		      C sfTitlebar   equ 1
 = 00000002		      C sfResize     equ 2
 = 00000004		      C sfClose      equ 4
 = 00000008		      C sfFullscreen equ 8
			      C 
			      C ; 結構體定義
 00000008		      C sfVector2f STRUCT
 00000000  00000000	      C     x REAL4 ?
 00000004  00000000	      C     y REAL4 ?
			      C sfVector2f ENDS
			      C 
 00000008		      C sfVector2i STRUCT
 00000000  00000000	      C     x SDWORD ?
 00000004  00000000	      C     y SDWORD ?
			      C sfVector2i ENDS
			      C 
 0000000C		      C sfVideoMode STRUCT
 00000000  00000000	      C     _width  DWORD ?
 00000004  00000000	      C     height DWORD ?
 00000008  00000000	      C     bpp    DWORD ?
			      C sfVideoMode ENDS
			      C 
 00000004		      C sfColor STRUCT
 00000000  00		      C     r BYTE ?
 00000001  00		      C     g BYTE ?
 00000002  00		      C     b BYTE ?
 00000003  00		      C     a BYTE ?
			      C sfColor ENDS
			      C 
 00000010		      C sfFloatRect STRUCT
 00000000  00000000	      C     left   REAL4 ?
 00000004  00000000	      C     top    REAL4 ?
 00000008  00000000	      C     _width  REAL4 ?
 0000000C  00000000	      C     height REAL4 ?
			      C sfFloatRect ENDS
			      C 
 0000000C		      C mouseButton STRUCT
 00000000  00000000	      C     button DWORD ?
 00000004  00000000	      C     x DWORD ?
 00000008  00000000	      C     y DWORD ?
			      C mouseButton ENDS
			      C 
 00000014		      C key STRUCT
 00000000  00000000	      C     code DWORD ?
 00000004  00000000	      C     alt DWORD ?
 00000008  00000000	      C     control DWORD ?
 0000000C  00000000	      C     shift DWORD ?
 00000010  00000000	      C     system DWORD ?
			      C key ENDS
			      C 
 00000030		      C sfEvent STRUCT
 00000000  00000000	      C     _type DWORD ?                
 00000004  00000000	      C     _size DWORD ?                
 00000008  00000000	      C     mouse mouseButton <>       
	   00000000
	   00000000
 00000014  00000000	      C     _key key <>                 
	   00000000
	   00000000
	   00000000
	   00000000
 00000028  00000000	      C     mouseMove sfVector2i <>     
	   00000000
			      C sfEvent ENDS
			      C 
 00000004		      C sfTime STRUCT
 00000000  00000000	      C     microseconds DWORD ?    
			      C sfTime ENDS
			      C 
			      C ; 函數原型 - 視窗相關
			      C EXTERN sfRenderWindow_create:PROC
			      C EXTERN sfRenderWindow_destroy:PROC
			      C EXTERN sfRenderWindow_close:PROC
			      C EXTERN sfRenderWindow_isOpen:PROC
			      C EXTERN sfRenderWindow_clear:PROC
			      C EXTERN sfRenderWindow_display:PROC
			      C EXTERN sfRenderWindow_pollEvent:PROC
			      C EXTERN sfRenderWindow_drawSprite:PROC
			      C EXTERN sfRenderWindow_drawText:PROC
			      C 
			      C ; 函數原型 - 紋理相關
			      C EXTERN sfTexture_createFromFile:PROC
			      C EXTERN sfTexture_destroy:PROC
			      C 
			      C ; 函數原型 - 精靈相關
			      C EXTERN sfSprite_create:PROC
			      C EXTERN sfSprite_destroy:PROC
			      C EXTERN sfSprite_setTexture:PROC
			      C EXTERN sfSprite_setPosition:PROC
			      C EXTERN sfSprite_setOrigin:PROC
			      C EXTERN sfSprite_move:PROC
			      C EXTERN sfSprite_getPosition:PROC
			      C 
			      C ; 函數原型 - 音樂相關
			      C EXTERN sfMusic_createFromFile:PROC
			      C EXTERN sfMusic_destroy:PROC
			      C EXTERN sfMusic_play:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C EXTERN sfMusic_stop: PROC
			      C EXTERN sfMusic_getStatus: PROC
			      C 
			      C ; 函數原型 - 文字相關
			      C EXTERN sfFont_createFromFile:PROC
			      C EXTERN sfFont_destroy:PROC
			      C EXTERN sfText_create:PROC
			      C EXTERN sfText_destroy:PROC
			      C EXTERN sfText_setFont:PROC
			      C EXTERN sfText_setString:PROC
			      C EXTERN sfText_setCharacterSize:PROC
			      C EXTERN sfText_setFillColor:PROC
			      C EXTERN sfText_setOutlineColor:PROC
			      C EXTERN sfText_setOutlineThickness:PROC
			      C EXTERN sfText_getLocalBounds:PROC
			      C EXTERN sfText_getGlobalBounds:PROC
			      C EXTERN sfText_setPosition:PROC
			      C 
			      C ; 函數原型 - 顏色相關
			      C EXTERN sfColor_fromRGB:PROC
			      C EXTERN sfColor_fromRGBA:PROC
			      C 
			      C ; 函數原型 - 矩形相關
			      C EXTERN sfRectangleShape_create: PROC
			      C EXTERN sfRectangleShape_setPosition: PROC
			      C EXTERN sfRectangleShape_setSize: PROC
			      C EXTERN sfRectangleShape_setFillColor: PROC
			      C EXTERN sfRectangleShape_setOutlineThickness: PROC
			      C EXTERN sfRenderWindow_drawRectangleShape: PROC
			      C EXTERN sfRectangleShape_destroy: PROC
			      C EXTERN sfRectangleShape_setOutlineColor: PROC
			      C 
			      C EXTERN sfSleep: PROC
			      C 
			      C EXTERN sfClock_create:PROC
			      C EXTERN sfClock_getElapsedTime:PROC
			      C EXTERN sfClock_restart:PROC
			      C EXTERN sfClock_destroy:PROC
			      C 
				include windows.inc
			      C ; windows.inc - 包含 Windows API 函數的定義
			      C 
			      C includelib kernel32.lib
			      C 
			      C extern GetStdHandle@4:PROC
			      C extern CreateFileA@28:PROC
			      C extern WriteFile@20:PROC
			      C extern ReadFile@20:PROC
			      C extern ExitProcess@4:PROC
			      C extern CloseHandle@4:PROC
			      C extern WriteConsoleA@20:PROC
			      C extern GetLastError@0:PROC
			      C 
			      C ; 定義常量
 = 0x80000000		      C GENERIC_READ         EQU 0x80000000
 = 0x00000001		      C FILE_SHARE_READ      EQU 0x00000001
 =-0000000B		      C STD_OUTPUT_HANDLE equ -11
 = 00000003		      C OPEN_EXISTING        EQU 3
 = 0x00000080		      C FILE_ATTRIBUTE_NORMAL EQU 0x00000080
			      C 
			      C 
			      C 
				include file.inc
			      C includelib ucrt.lib
			      C includelib kernel32.lib
			      C 
			      C 
 0000000C		      C Drum struct
 00000000  00000000	      C 	sprite dword ?
 00000004  00000000	      C 	_type dword ?
 00000008  00000000	      C 	targetTime real4 ?
			      C Drum ends
			      C 
 00000018		      C GameStats struct
 00000000  00000000	      C 	great_count dword ?
 00000004  00000000	      C 	good_count dword ?
 00000008  00000000	      C 	miss_count dword ?
 0000000C  00000000	      C 	current_combo dword ?
 00000010  00000000	      C 	max_combo dword ?
 00000014  00000000	      C 	total_score dword ?
			      C GameStats ends
			      C 
 00000014		      C MusicInfo struct
 00000000  00000000	      C 	bpm real4 ?
 00000004  00000000	      C 	_offset real4 ?
 00000008  00000000	      C 	spawnTime real4 ?
 0000000C  00000000	      C 	currentBar dword ?
 00000010  00000000	      C 	notesInBar dword ?
			      C MusicInfo ends
			      C 
			      C extern fopen:proc
			      C extern fclose:proc
			      C extern fgets:proc
			      C 
			      C 
			      C ; string
			      C 
			      C extern strcspn:proc
			      C extern strncmp:proc
			      C ;extern __imp____stdio_common_vsscanf:proc
			      C extern strtok_s:proc
			      C extern strlen:proc
			      C 

				extern currentPage: DWORD
				EXTERN end_game_page:PROC

				; Constants
 = 00002710			MAX_NOTES = 10000
 = 000003E8			MAX_LINE_LENGTH = 1000
 = 00000500			SCREEN_WIDTH = 1280
 = 000002D0			SCREEN_HEIGHT = 720
 = 00000064			MAX_DRUMS = 100
 = 000001C2			HIT_POSITION_X = 450
 = 00000004			GREAT_THRESHOLD = 4
 = 0000001E			GOOD_THRESHOLD = 30
 = 00000003			INITIAL_DELAY = 3

 00000000			.data
				    ; 檔案路徑
 00000000 61 73 73 65 74	    bg_path db "assets/main/game_background.jpg", 0
	   73 2F 6D 61 69
	   6E 2F 67 61 6D
	   65 5F 62 61 63
	   6B 67 72 6F 75
	   6E 64 2E 6A 70
	   67 00
 00000020 61 73 73 65 74	    red_drum_path db "assets/main/red_note.png", 0
	   73 2F 6D 61 69
	   6E 2F 72 65 64
	   5F 6E 6F 74 65
	   2E 70 6E 67 00
 00000039 61 73 73 65 74	    blue_drum_path db "assets/main/blue_note.png", 0
	   73 2F 6D 61 69
	   6E 2F 62 6C 75
	   65 5F 6E 6F 74
	   65 2E 70 6E 67
	   00
 00000053 61 73 73 65 74	    selected_music_path db "assets/never-gonna-give-you-up-official-music-video.mp3", 0
	   73 2F 6E 65 76
	   65 72 2D 67 6F
	   6E 6E 61 2D 67
	   69 76 65 2D 79
	   6F 75 2D 75 70
	   2D 6F 66 66 69
	   63 69 61 6C 2D
	   6D 75 73 69 63
	   2D 76 69 64 65
	   6F 2E 6D 70 33
	   00
 0000008B 61 73 73 65 74	    selected_beatmap_path db "assets/music/song1_beatmap.tja", 0
	   73 2F 6D 75 73
	   69 63 2F 73 6F
	   6E 67 31 5F 62
	   65 61 74 6D 61
	   70 2E 74 6A 61
	   00

				    ;常數
 = 00000064			    MAX_DRUMS equ 100 
 = 00000008			    Drum_struct_size equ 8     ; Drum 結構大小
 = 00002710			    MAX_NOTES equ 10000
 = 000003E8			    MAX_LINE_LENGTH equ 1000
 = 000002D0			    SCREEN_HEIGHT equ 720
 000000AA 3F000000		    DRUM_SPEED dd 0.5
 000000AE 42C80000		    track_height REAL4 100.0
 000000B2 44A00000		    track_width REAL4 1280.0
 000000B6 44200000		    track_x REAL4 640.0
 000000BA 43480000		    track_y REAL4 200.0
 000000BE 00000000		    spritePosX    dd 0.0
 000000C2 00000000		    spritePosY    dd 0.0
 000000C6 476A6000		    const_60000 dd 60000.0
 000000CA 447A0000		    const_1000 dd 1000.0
 000000CE 40800000		    four dd 4.0

				    ;用來存great good miss 的次數和最後總分
 000000D2 00000000		    great_count DWORD 0
 000000D6 00000000		    good_count DWORD 0
 000000DA 00000000		    miss_count DWORD 0
 000000DE 00000000		    score DWORD 0

				    ; CSFML 物件
 000000E2 00000000		    bgTexture dd 0
 000000E6 00000000		    bgSprite dd 0
 000000EA 00000000		    bgmusic dd 0
 000000EE 00000000		    trackBounds sfFloatRect <>
	   00000000
	   00000000
	   00000000
 000000FE 00000000		    current_drum Drum <>
	   00000000
	   00000000

				    ;Queue 相關
 0000010A 00000000		    index dd 0

				    ; 時間相關
 0000010E 00000000		    clock dd 0
 00000112 00000000		    note_timer REAL4 0.0       ; 音符生成計時器

				    ;譜面相關
 00000116 42E34CCD		    bpm dd 113.65 ; 預設 BPM
 0000011A 00000000		    currentNoteIndex dd 0

				    ; 視窗設定
 0000011E 00000500		    window_videoMode sfVideoMode <1280, 720, 32>
	   000002D0
	   00000020
 0000012A 54 61 69 6B 6F	    windowTitle db "Taiko Simulator", 0
	   20 53 69 6D 75
	   6C 61 74 6F 72
	   00

				    ; 顏色常數
 0000013A FF FF FF FF		    whiteColor sfColor <255, 255, 255, 255> ; 白色
 0000013E 00 00 00 FF		    blackColor sfColor <0, 0, 0, 255>       ; 黑色

				    ;initialPosition sfVector2f <SCREEN_WIDTH, 200.0>  ; 音符的 X 和 Y 座標
				    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000142 00000000		    stats GameStats <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 0000015A 00000000			msInfo MusicInfo <>
	   00000000
	   00000000
	   00000000
	   00000000

					; queue for drums
 0000016E  00000064 [			drumQueue Drum MAX_DRUMS dup(<>)
	    00000000
	    00000000
	    00000000
	   ]
 0000061E 00000000			front dword 0
 00000622 00000000			rear dword 0
 00000626 00000000			_size dword 0

					; texture
 0000062A 00000000			redDrumTexture dword ?
 0000062E 00000000			blueDrumTexture dword ?

 00000632  00002710 [			notes dword MAX_NOTES dup(?)
	    00000000
	   ]
 0000A272 00000000			totalNotes dword 0
 0000A276 00000000			noteSpawnInterval real4 0.0
 0000A27A  00002710 [			noteTimings real4 MAX_NOTES dup(?)
	    00000000
	   ]
 00013EBA 3E800000			drumStep real4 0.25

					; file
 00013EBE 72 00				readA byte "r", 0

					;label
 00013EC0 42 50 4D 3A 00		str_bpm db "BPM:", 0
 00013EC5 4F 46 46 53 45		str_offset db "OFFSET:", 0
	   54 3A 00
 00013ECD 23 53 54 41 52		str_start db "#START", 0
	   54 00
 00013ED4 23 45 4E 44 00		str_end db "#END", 0
 00013ED9 2C 00				comma db ",", 0

 00013EDB 42 4D 50 3A 25		getBmp db "BMP:%f", 0
	   66 00
 00013EE2 4F 46 46 53 45		getOffset db "OFFSET:%f", 0
	   54 3A 25 66 00

 00013EEC 42700000			real_60 real4 60.0
 00013EF0 40800000			real_4 real4 4.0
 00013EF4 476A6000			real_60000 real4 60000.0


 00000000			.code

				;播放音樂
 00000000			game_play_music PROC
 00000000  68 00000053 R	    push offset selected_music_path
 00000005  E8 00000000 E	    call sfMusic_createFromFile
 0000000A  83 C4 04		    add esp, 4 
 0000000D  A3 000000EA R	    mov bgMusic, eax

 00000012  50			    push eax
 00000013  E8 00000000 E	    call sfMusic_play
 00000018  83 C4 04		    add esp, 4
 0000001B  C3			    ret
 0000001C			game_play_music ENDP

				; 載入背景
 0000001C			@load_bg PROC

				    ; 創建背景紋理
 0000001C  6A 00		    push 0
 0000001E  68 00000000 R	    push offset bg_path
 00000023  E8 00000000 E	    call sfTexture_createFromFile
 00000028  83 C4 08		    add esp, 8
 0000002B  A3 000000E2 R	    mov bgTexture, eax

				    ; 創建背景精靈
 00000030  E8 00000000 E	    call sfSprite_create
 00000035  A3 000000E6 R	    mov DWORD PTR [bgSprite], eax

				    ; 設定紋理
 0000003A  6A 01		    push 1
 0000003C  A1 000000E2 R	    mov eax, DWORD PTR [bgTexture]
 00000041  50			    push eax
 00000042  8B 0D 000000E6 R	    mov ecx, DWORD PTR [bgSprite]
 00000048  51			    push ecx
 00000049  E8 00000000 E	    call sfSprite_setTexture
 0000004E  83 C4 0C		    add esp, 12
 00000051  C3			    ret
 00000052			@load_bg ENDP

 00000052			ParseNoteChart PROC filename:PTR BYTE
					LOCAL filePtr:PTR FILE
					LOCAL line[256]:BYTE
					LOCAL inNoteSection:DWORD
					LOCAL bar:PTR BYTE
					LOCAL context:ptr byte
					local barlength:DWORD
					local validNotes:DWORD
					local i:DWORD
					local note:byte
					local currentTIme:real4
					local beatTime:real4
					local barTime:real4
					local noteInterval:real4

					; init variables
 0000005B  C7 85 FFFFFEF8		mov inNoteSection, 0
	   00000000
 00000065  D9 EE			fldz ; currentTime 0

					; open file
 00000067  68 00013EBE R		push offset readA
 0000006C  FF 75 08			push filename
 0000006F  E8 00000000 E		call fopen
 00000074  83 C4 08			add esp, 8

 00000077  85 C0			test eax, eax
 00000079  0F 84 00000288		jz FileOpenError
 0000007F  89 45 FC			mov filePtr, eax

 00000082			ParseLineLoop:
					; read first line
 00000082  FF 75 FC			push filePtr
 00000085  68 00000100			push 256
 0000008A  FF B5 FFFFFEFC		push dword ptr [line]
 00000090  E8 00000000 E		call fgets
 00000095  83 C4 0C			add esp, 12

 00000098  85 C0			test eax, eax
 0000009A  0F 84 0000021F		jz EndParse

					; remove \n
 000000A0  6A 0A			push 10
 000000A2  FF B5 FFFFFEFC		push dword ptr [line]
 000000A8  E8 00000000 E		call strcspn
 000000AD  83 C4 08			add esp, 8

 000000B0  0F B6 C8			movzx ecx, al
 000000B3  C6 84 0D			mov byte ptr [line + ecx], 0
	   FFFFFEFC
	   00032200

					; check bpm
 000000BB  6A 04			push 4
 000000BD  68 00013EC0 R		push offset str_bpm
 000000C2  FF B5 FFFFFEFC		push dword ptr [line]
 000000C8  E8 00000000 E		call strncmp
 000000CD  83 C4 0C			add esp, 12

 000000D0  85 C0			test eax, eax
 000000D2  75 15			jnz CheckOffset
					
 000000D4  68 0000015A R		push offset msInfo.bpm
 000000D9  68 00013EDB R		push offset getBmp
 000000DE  FF B5 FFFFFEFC		push dword ptr [line]
					;call dword ptr __imp____stdio_common_vsscanf
 000000E4  83 C4 0C			add esp, 12

 000000E7  EB 99			jmp ParseLineLoop

					; check offset
					
 000000E9			CheckOffset:
 000000E9  6A 07			push 7
 000000EB  68 00013EC5 R		push offset str_offset
 000000F0  FF B5 FFFFFEFC		push dword ptr [line]
 000000F6  E8 00000000 E		call strncmp
 000000FB  83 C4 0C			add esp, 12

 000000FE  85 C0			test eax, eax
 00000100  75 19			jnz CheckStart
 00000102  FF 35 0000015E R		push msInfo._offset
 00000108  68 00013EE2 R		push offset getOffset
 0000010D  FF B5 FFFFFEFC		push dword ptr [line]
					;call dword ptr __imp____stdio_common_vsscanf
 00000113  83 C4 0C			add esp, 12

 00000116  E9 FFFFFF67			jmp ParseLineLoop

 0000011B			CheckStart:
 0000011B  6A 06			push 6
 0000011D  68 00013ECD R		push offset str_start
 00000122  FF B5 FFFFFEFC		push dword ptr [line]
 00000128  E8 00000000 E		call strncmp
 0000012D  83 C4 0C			add esp, 12

 00000130  85 C0			test eax, eax
 00000132  75 0F			jnz CheckEnd
 00000134  C7 85 FFFFFEF8		mov inNoteSection, 1
	   00000001
 0000013E  E9 FFFFFF3F			jmp ParseLineLoop

 00000143			CheckEnd:
 00000143  6A 04			push 4
 00000145  68 00013ED4 R		push offset str_end
 0000014A  FF B5 FFFFFEFC		push dword ptr [line]
 00000150  E8 00000000 E		call strncmp
 00000155  83 C4 0C			add esp, 12

 00000158  85 C0			test eax, eax
 0000015A  0F 84 0000015F		jz EndParse
					
 00000160  83 BD FFFFFEF8		cmp inNoteSection, 1
	   01
 00000167  0F 85 FFFFFF15		jnz ParseLineLoop

					; allocate notes
 0000016D  FF B5 FFFFFEF0		push context
 00000173  FF 35 00013ED9 R		push dword ptr [comma]
 00000179  FF B5 FFFFFEFC		push dword ptr [line]
 0000017F  E8 00000000 E		call strtok_s
 00000184  83 C4 0C			add esp, 12

 00000187  85 C0			test eax, eax
 00000189  0F 84 FFFFFEF3		jz ParseLineLoop

 0000018F  89 85 FFFFFEF4		mov bar, eax

 00000195			ProcessBar:
					; get bar length
 00000195  FF B5 FFFFFEF4		push bar
 0000019B  E8 00000000 E		call strlen
 000001A0  83 C4 04			add esp, 4

 000001A3  89 85 FFFFFEEC		mov barlength, eax

					; get valid notes
 000001A9  C7 85 FFFFFEE8		mov validNotes, 0
	   00000000
 000001B3  8B 8D FFFFFEEC		mov ecx, barlength

 000001B9  8B 85 FFFFFEE4		mov eax, i
 000001BF  33 C0			xor eax, eax
 000001C1  89 85 FFFFFEE4		mov i, eax
 000001C7			CountValidNotes:
 000001C7  39 8D FFFFFEE4		cmp i, ecx
 000001CD  7D 1E			jge ComputeNoteTiming
 000001CF  0F B6 84 2D			movzx eax, byte ptr [bar + i]
	   FFFFFDD8
 000001D7  3C 30			cmp al, '0'
 000001D9  72 0A			jb SkipNote
 000001DB  3C 32			cmp al, '2'
 000001DD  77 06			ja SkipNote
 000001DF  FF 85 FFFFFEE8		inc validNotes
 000001E5			SkipNote:
 000001E5  FF 85 FFFFFEE4		inc i
 000001EB  EB DA			jmp CountValidNotes

 000001ED			ComputeNoteTiming:
					; check if there are notes in the bar
 000001ED  8B 85 FFFFFEE8		mov eax, validNotes
 000001F3  83 F8 00			cmp eax, 0
 000001F6  0F 84 0000009A		je ProcessNextBar

					; calculate note time
 000001FC  D9 05 0000015A R		fld dword ptr [msInfo.bpm]
 00000202  D9 E8			fld1
 00000204  DE F9			fdiv
 00000206  D8 0D 00013EEC R		fmul dword ptr [real_60]
 0000020C  D9 9D FFFFFED8		fstp beatTime	; beatTime = 60 / bpm
 00000212  D8 0D 00013EF0 R		fmul dword ptr [real_4]
 00000218  D9 9D FFFFFED4		fstp barTime	; barTime = 4 * beatTime
 0000021E  D9 85 FFFFFED4		fld barTIme
 00000224  D8 B5 FFFFFEE8		fdiv validNotes
 0000022A  D9 9D FFFFFED0		fstp noteInterval  ; noteInterval = barTime / validNotes

 00000230  8B 85 FFFFFEE4		mov eax, i
 00000236  33 C0			xor eax, eax
 00000238  89 85 FFFFFEE4		mov i, eax

 0000023E			NoteLoop:
 0000023E  8B 85 FFFFFEE4		mov eax, i
 00000244  3B 85 FFFFFEEC	    cmp eax, barlength
 0000024A  7D 4A			jge ProcessNextBar
 0000024C  0F B6 84 2D			movzx eax, byte ptr [bar + i]
	   FFFFFDD8
 00000254  3C 30			cmp al, '0'
 00000256  76 22			jbe SkipToNextNote
 00000258  3C 32			cmp al, '2'
 0000025A  77 1E			ja SkipToNextNote

					; store note and timing
 0000025C  A1 0000A272 R		mov eax, totalNotes
 00000261  89 80 00000632 R		mov notes[eax], eax
 00000267  D9 85 FFFFFEDC		fld currentTIme
 0000026D  D9 1C 85			fstp noteTimings[eax*4]
	   0000A27A R
 00000274  FF 05 0000A272 R		inc totalNotes

 0000027A			SkipToNextNote:
 0000027A  D9 85 FFFFFEDC	    fld currentTime
 00000280  D9 85 FFFFFED0		fld noteInterval
 00000286  DE C1			fadd
 00000288  D9 9D FFFFFEDC		fstp currentTime
 0000028E  FF 85 FFFFFEE4		inc i
 00000294  EB A8			jmp NoteLoop

 00000296			ProcessNextBar:
 00000296  FF B5 FFFFFEF0	    push context
 0000029C  FF 35 00013ED9 R		push dword ptr [comma]
 000002A2  6A 00			push 0
 000002A4  E8 00000000 E		call strtok_s
 000002A9  83 C4 0C			add esp, 12

 000002AC  85 C0			test eax, eax
 000002AE  0F 85 FFFFFEE1		jnz ProcessBar
 000002B4  89 85 FFFFFEF4		mov bar, eax

 000002BA  E9 FFFFFDC3			jmp ParseLineLoop

 000002BF			EndParse:
 000002BF  FF 75 FC			push filePtr
 000002C2  E8 00000000 E		call fclose
 000002C7  83 C4 04			add esp, 4

 000002CA  D9 05 0000015A R		fld dword ptr [msInfo.bpm]
 000002D0  D8 0D 00013EF0 R		fmul dword ptr [real_4]
 000002D6  D9 E8			fld1
 000002D8  DE F9			fdiv
 000002DA  D8 0D 00013EF4 R		fmul dword ptr [real_60000]
 000002E0  D9 1D 0000A276 R		fstp noteSpawnInterval

 000002E6  B8 00000500			mov eax, SCREEN_WIDTH
 000002EB  2D 000001C2			sub eax, HIT_POSITION_X

 000002F0  50				push eax
 000002F1  DB 04 24			fild dword ptr [esp]
 000002F4  83 C4 04			add esp, 4

 000002F7  D9 85 FFFFFED4		fld dword ptr [barTime]
 000002FD  DE F9			fdiv
 000002FF  D9 1D 00013EBA R		fstp dword ptr [drumStep]

					ret

 00000307			FileOpenError:
					ret
 00000309			ParseNoteChart ENDP
main_game_page.asm(394) : warning A6004:procedure argument or local not referenced : note

				; 載入紅鼓紋理
 00000309			@load_red_texture PROC
 00000309  6A 00		    push 0
 0000030B  68 00000020 R	    push offset red_drum_path
 00000310  E8 00000000 E	    call sfTexture_createFromFile
 00000315  83 C4 08		    add esp, 8
 00000318  A3 0000062A R	    mov redDrumTexture, eax
 0000031D  C3			    ret
 0000031E			@load_red_texture ENDP

				; 載入藍鼓紋理
 0000031E			@load_blue_texture PROC
 0000031E  6A 00		    push 0
 00000320  68 00000039 R	    push offset blue_drum_path
 00000325  E8 00000000 E	    call sfTexture_createFromFile
 0000032A  83 C4 08		    add esp, 8
 0000032D  A3 0000062E R	    mov blueDrumTexture, eax
 00000332  C3			    ret
 00000333			@load_blue_texture ENDP

				;full會return 1
 00000333			isQueueFull PROC
 00000333  A1 00000626 R	    mov eax, _size
 00000338  83 F8 64		    cmp eax, MAX_DRUMS
 0000033B  74 05		    je queue_full
 0000033D  B8 00000000		    mov eax, 0

 00000342			queue_full:
 00000342  B8 00000001		    mov eax, 1
 00000347  C3			    ret
 00000348			isQueueFull ENDP

				;empty會return 1
 00000348			isQueueEmpty PROC
 00000348  A1 00000626 R	    mov eax, _size
 0000034D  83 F8 00		    cmp eax, 0
 00000350  74 05		    je queue_empty
 00000352  B8 00000000		    mov eax, 0

 00000357			queue_empty:
 00000357  B8 00000001		    mov eax, 1
 0000035C  C3			    ret
 0000035D			isQueueEmpty ENDP

 0000035D			enqueue PROC
 0000035D  E8 FFFFFFD1		    call isQueueFull
 00000362  83 F8 01		    cmp eax, 1
 00000365  74 44		    je end_enqueue
				    
 00000367  8D 3D 0000016E R	    lea edi, [drumQueue]

				    ; 計算擺放位置
 0000036D  A1 00000622 R	    mov eax, rear      
 00000372  BA 00000008		    mov edx, Drum_struct_size
 00000377  F7 E2		    mul edx                  
 00000379  03 F8		    add edi, eax 

 0000037B  A1 000000FE R	    mov eax, current_drum.sprite      ; sprite
 00000380  8B 1D 00000102 R	    mov ebx, current_drum._type       ; dtype

				    ; 儲存drum資料
 00000386  89 07		    mov [edi], eax           ; sprite
 00000388  89 5F 04		    mov [edi + 4], ebx       ; dtype

				    ; 更新rear、size
 0000038B  FF 05 00000622 R	    inc rear
 00000391  A1 00000622 R	    mov eax, rear
 00000396  33 D2		    xor edx, edx
 00000398  B9 00000064		    mov ecx, MAX_DRUMS
 0000039D  F7 F1		    div ecx
 0000039F  89 15 00000622 R	    mov rear, edx
 000003A5  FF 05 00000626 R	    inc _size

 000003AB			end_enqueue:
 000003AB  C3			    ret
 000003AC			enqueue ENDP

 000003AC			dequeue PROC
 000003AC  E8 FFFFFF97		    call isQueueEmpty
 000003B1  83 F8 01		    cmp eax, 1
 000003B4  74 42		    je end_dequeue

				    ; 計算移除位置
 000003B6  8D 3D 0000016E R	    lea edi, drumQueue
 000003BC  A1 0000061E R	    mov eax, front
 000003C1  BA 00000008		    mov edx, Drum_struct_size
 000003C6  F7 E2		    mul edx
 000003C8  03 F8		    add edi, eax

				    ; 讀取 drum
 000003CA  8B 07		    mov eax, [edi]           ;sprite
 000003CC  8B 5F 04		    mov ebx, [edi + 4]       ;dtype

				    ;釋放資源
 000003CF  50			    push eax
 000003D0  E8 00000000 E	    call sfSprite_destroy
 000003D5  83 C4 04		    add esp, 4

				    ; 更新front、size
 000003D8  FF 05 0000061E R	    inc front
 000003DE  A1 0000061E R	    mov eax, front
 000003E3  33 D2		    xor edx, edx
 000003E5  B9 00000064		    mov ecx, MAX_DRUMS
 000003EA  F7 F1		    div ecx
 000003EC  89 15 0000061E R	    mov front, edx
 000003F2  FF 0D 00000626 R	    dec _size

 000003F8			end_dequeue:
 000003F8  C3			    ret
 000003F9			dequeue ENDP

 000003F9			spawnDrum PROC             ;call前type要先load到eax
 000003F9  E8 FFFFFF35		    call isQueueFull
 000003FE  83 F8 01		    cmp eax, 1
 00000401  74 3A		    je end_spawn

 00000403  A3 00000102 R	    mov current_drum._type, eax
 00000408  E8 00000000 E	    call sfSprite_create
 0000040D  A3 000000FE R	    mov DWORD PTR [current_drum.sprite], eax

 00000412  83 3D 00000102 R	    cmp current_drum._type, 1
	   01
 00000419  74 05		    je spawnRed
 0000041B  E8 FFFFFEFE		    call @load_blue_texture

 00000420			spawnRed:
 00000420  E8 FFFFFEE4		    call @load_red_texture

				    ;設定位置
 00000425  68 000000C8		    push 200 ; Y 座標
 0000042A  68 00000500		    push SCREEN_WIDTH   ; X 座標
 0000042F  50			    push eax
 00000430  E8 00000000 E	    call sfSprite_setPosition
 00000435  83 C4 0C		    add esp, 12

 00000438  E8 FFFFFF20		    call enqueue

 0000043D			end_spawn:
 0000043D  C3			    ret
 0000043E			spawnDrum ENDP

 0000043E			updateDrums PROC
 0000043E  83 3D 00000626 R	    cmp _size, 0
	   00
 00000445  0F 86 0000008D	    jbe end_update
				    
 0000044B  8D 3D 0000016E R	    lea edi, [drumQueue]
 00000451  A1 0000061E R	    mov eax, front
 00000456  BA 00000008		    mov edx, Drum_struct_size
 0000045B  F7 E2		    mul edx
 0000045D  03 F8		    add edi, eax

 0000045F  FF 37		    push [edi]
 00000461  E8 00000000 E	    call sfSprite_getPosition
 00000466  83 C4 08		    add esp, 8

 00000469  F3/ 0F 11 05		    movss spritePosX, xmm0
	   000000BE R
 00000471  83 05 000000BE R	    add spritePosX, 50
	   32
 00000478  83 3D 000000BE R	    cmp spritePosX, 50
	   32
 0000047F  73 57		    jae end_update

 00000481  E8 FFFFFF26		    call dequeue

 00000486  8B 0D 00000626 R	    mov ecx, _size
 0000048C  8B 1D 0000061E R	    mov ebx, front
 00000492			update_queue:
				    ; 讀取 drum
 00000492  8B 07		    mov eax, [edi]           ;sprite

 00000494  FF 30		    push [eax]
 00000496  E8 00000000 E	    call sfSprite_getPosition
 0000049B  83 C4 08		    add esp, 8
				    
 0000049E  F3/ 0F 10 0D		    movss xmm1, DRUM_SPEED
	   000000AA R
 000004A6  F3/ 0F 5C C1		    subss xmm0, xmm1
 000004AA  F3/ 0F 11 05		    movss spritePosX, xmm0
	   000000BE R

 000004B2  FF 35 000000C2 R	    push dword ptr [spritePosY] ; Y 座標
 000004B8  FF 35 000000BE R	    push dword ptr [spritePosX]   ; X 座標
 000004BE  FF 30		    push [eax]
 000004C0  E8 00000000 E	    call sfSprite_setPosition
 000004C5  83 C4 0C		    add esp, 12

 000004C8  43			    inc ebx
 000004C9  8B C3		    mov eax, ebx
 000004CB  33 D2		    xor edx, edx
 000004CD  B9 00000064		    mov ecx, MAX_DRUMS
 000004D2  F7 F1		    div ecx
 000004D4  8B DA		    mov ebx, edx
 000004D6  E2 BA		loop update_queue

 000004D8			end_update:
 000004D8  C3			    ret
 000004D9			updateDrums ENDP

 000004D9			main_game_page PROC window:DWORD, musicPath:dword, noteChart:dword
				    
 000004DC  FF 75 10		    push dword ptr [noteChart]
 000004DF  E8 FFFFFB6E			call ParseNoteChart
 000004E4  83 C4 04			add esp, 4

				    ; 載入背景
 000004E7  E8 FFFFFB30		    call @load_bg
 000004EC  85 C0		    test eax, eax
 000004EE  0F 84 00000187	    jz @exit_program

				    ; 載入紅鼓紋理
 000004F4  E8 FFFFFE10		    call @load_red_texture
 000004F9  85 C0		    test eax, eax
 000004FB  0F 84 0000017A	    jz @exit_program

				    ; 載入藍鼓紋理
 00000501  E8 FFFFFE18		    call @load_blue_texture
 00000506  85 C0		    test eax, eax
 00000508  0F 84 0000016D	    jz @exit_program

				    ;載入音樂
 0000050E  E8 FFFFFAED		    call game_play_music
 00000513  85 C0		    test eax, eax
 00000515  0F 84 00000160	    jz @exit_program

				    ;載入譜面
 0000051B  E8 FFFFFB32		    call parseNoteChart
 00000520  85 C0		    test eax, eax
 00000522  0F 84 00000153	    jz @exit_program

				    ; 載入tja檔
				    ;push offset selected_beatmap_path
				    ;call parseNoteChart
				    ;test eax, eax
				    ;jz @exit_program

				    ; 初始化計時器
 00000528  E8 00000000 E	    call sfClock_create
 0000052D  85 C0		    test eax, eax
 0000052F  0F 84 00000146	    jz @exit_program
 00000535  A3 0000010E R	    mov dword ptr [clock], eax

 0000053A			@main_loop:

				    ; 檢查音樂是否停止
 0000053A  FF 35 000000EA R	    push bgMusic
 00000540  E8 00000000 E	    call sfMusic_getStatus
 00000545  83 C4 04		    add esp, 4
 00000548  83 F8 00		    cmp eax, 0
 0000054B  0F 84 000000FB	    je to_end_page

				    ;檢查譜面是否跑完
				    ;mov eax, currentNoteIndex
				    ;cmp eax, totalNotes
				    ;jb check_window
				    ;call isQueueEmpty
				    ;cmp eax, 1
				    ;je to_end_page

 00000551			check_window:
				    ; 檢查視窗是否開啟
 00000551  8B 45 08		    mov eax, DWORD PTR [window]
 00000554  50			    push eax
 00000555  E8 00000000 E	    call sfRenderWindow_isOpen
 0000055A  83 C4 04		    add esp, 4
 0000055D  85 C0		    test eax, eax
 0000055F  0F 84 00000116	    je @exit_program

				    ; 更新計時器
 00000565  FF 35 0000010E R	    push dword ptr [clock]
 0000056B  E8 00000000 E	    call sfClock_getElapsedTime
 00000570  83 C4 04		    add esp, 4
 00000573  85 C0		    test eax, eax
 00000575  0F 84 00000100	    jz @exit_program 

 0000057B  F3/ 0F 2A C0		    cvtsi2ss xmm0, eax
 0000057F  F3/ 0F 10 0D		    movss xmm1, [const_1000] 
	   000000CA R
 00000587  F3/ 0F 5E C1		    divss xmm0, xmm1
 0000058B  F3/ 0F 10 0D		    movss xmm1, noteSpawnInterval
	   0000A276 R
 00000593  0F 2E C1		    ucomiss xmm0, xmm1
 00000596  72 2C		    jb update

 00000598  A1 0000011A R	    mov eax, currentNoteIndex
 0000059D  3B 05 0000A272 R	    cmp eax, totalNotes
 000005A3  73 1A		    jae restart
 000005A5  8D 3D 00000632 R	    lea edi, [notes]
 000005AB  03 F8		    add edi, eax
 000005AD  FF 05 0000011A R	    inc currentNoteIndex

 000005B3  8B 07		    mov eax, [edi]
 000005B5  83 F8 00		    cmp eax, 0
 000005B8  74 05		    je restart
 000005BA  E8 FFFFFE3A		    call spawnDrum

 000005BF			restart:
 000005BF  E8 00000000 E	    call sfClock_restart

 000005C4			update:
 000005C4  E8 FFFFFE75		    call updateDrums

				    ; 清除視窗
 000005C9  FF 35 0000013E R	    push blackColor
 000005CF  FF 75 08		    push window
 000005D2  E8 00000000 E	    call sfRenderWindow_clear
 000005D7  83 C4 08		    add esp, 8

				    ; 繪製背景
 000005DA  6A 00		    push 0
 000005DC  A1 000000E6 R	    mov eax, DWORD PTR [bgSprite]
 000005E1  50			    push eax
 000005E2  8B 4D 08		    mov ecx, DWORD PTR [window]
 000005E5  51			    push ecx
 000005E6  E8 00000000 E	    call sfRenderWindow_drawSprite
 000005EB  83 C4 0C		    add esp, 12

 000005EE  8B 0D 00000626 R	    mov ecx, _size
 000005F4  8B 15 0000061E R	    mov edx, front
 000005FA  89 15 0000010A R	    mov index, edx
 00000600			draw_loop:
				    ; 繪製鼓
 00000600  8D 3D 0000016E R	    lea edi, [drumQueue]
 00000606  A1 0000010A R	    mov eax, index
 0000060B  BA 00000008		    mov edx, Drum_struct_size
 00000610  F7 E2		    mul edx
 00000612  03 F8		    add edi, eax

 00000614  6A 00		    push 0
 00000616  57			    push edi
 00000617  FF 75 08		    push DWORD PTR [window]
 0000061A  E8 00000000 E	    call sfRenderWindow_drawSprite
 0000061F  83 C4 0C		    add esp, 12                    ;error here

				    ;inc index
 00000622  A1 0000010A R	    mov eax, index
 00000627  33 D2		    xor edx, edx
 00000629  BB 00000064		    mov ebx, MAX_DRUMS
 0000062E  F7 F3		    div ebx
 00000630  89 15 0000010A R	    mov index, edx
 00000636  83 F9 00		    cmp ecx, 0
 00000639  74 00		    je display_window

 0000063B			display_window:
				    ; 顯示視窗
 0000063B  8B 45 08		    mov eax, window
 0000063E  50			    push eax
 0000063F  E8 00000000 E	    call sfRenderWindow_display
 00000644  83 C4 04		    add esp, 4

 00000647  E9 FFFFFEEE		    jmp @main_loop

				; 跳轉結算畫面
 0000064C			to_end_page:
				    ;遊戲結束要切換到結尾畫面
 0000064C  FF 35 000000DE R	    push score    
 00000652  FF 35 000000DA R	    push miss_count    
 00000658  FF 35 000000D6 R	    push good_count   
 0000065E  FF 35 000000D2 R	    push great_count    
 00000664  FF 75 08		    push window        
 00000667  E8 00000000 E	    call end_game_page
 0000066C  83 C4 14		    add esp, 20
 0000066F  C7 05 00000000 E	    mov DWORD PTR [currentPage], 2
	   00000002
 00000679  EB 00		    jmp @exit_program

 0000067B			@exit_program:

 0000067B  FF 35 000000E6 R	    push bgSprite
 00000681  E8 00000000 E	    call sfSprite_destroy
 00000686  83 C4 04		    add esp, 4

 00000689  FF 35 000000E2 R	    push bgTexture
 0000068F  E8 00000000 E	    call sfTexture_destroy
 00000694  83 C4 04		    add esp, 4

 00000697  FF 35 0000062A R	    push redDrumTexture
 0000069D  E8 00000000 E	    call sfTexture_destroy
 000006A2  83 C4 04		    add esp, 4

 000006A5  FF 35 0000062E R	    push blueDrumTexture
 000006AB  E8 00000000 E	    call sfTexture_destroy
 000006B0  83 C4 04		    add esp, 4

 000006B3  FF 35 0000010E R	    push dword ptr [clock]
 000006B9  E8 00000000 E	    call sfClock_destroy
 000006BE  83 C4 04		    add esp, 4

 000006C1  FF 35 000000EA R	    push bgMusic
 000006C7  E8 00000000 E	    call sfMusic_destroy
 000006CC  83 C4 04		    add esp, 4
				    
				    ret
 000006D1			main_game_page ENDP
main_game_page.asm(780) : warning A6004:procedure argument or local not referenced : musicPath

				END main_game_page
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 18:25:11
main_game_page.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Drum . . . . . . . . . . . . . .	 0000000C
  sprite . . . . . . . . . . . .	 00000000	 DWord
  _type  . . . . . . . . . . . .	 00000004	 DWord
  targetTime . . . . . . . . . .	 00000008	 DWord
GameStats  . . . . . . . . . . .	 00000018
  great_count  . . . . . . . . .	 00000000	 DWord
  good_count . . . . . . . . . .	 00000004	 DWord
  miss_count . . . . . . . . . .	 00000008	 DWord
  current_combo  . . . . . . . .	 0000000C	 DWord
  max_combo  . . . . . . . . . .	 00000010	 DWord
  total_score  . . . . . . . . .	 00000014	 DWord
MusicInfo  . . . . . . . . . . .	 00000014
  bpm  . . . . . . . . . . . . .	 00000000	 DWord
  _offset  . . . . . . . . . . .	 00000004	 DWord
  spawnTime  . . . . . . . . . .	 00000008	 DWord
  currentBar . . . . . . . . . .	 0000000C	 DWord
  notesInBar . . . . . . . . . .	 00000010	 DWord
key  . . . . . . . . . . . . . .	 00000014
  code . . . . . . . . . . . . .	 00000000	 DWord
  alt  . . . . . . . . . . . . .	 00000004	 DWord
  control  . . . . . . . . . . .	 00000008	 DWord
  shift  . . . . . . . . . . . .	 0000000C	 DWord
  system . . . . . . . . . . . .	 00000010	 DWord
mouseButton  . . . . . . . . . .	 0000000C
  button . . . . . . . . . . . .	 00000000	 DWord
  x  . . . . . . . . . . . . . .	 00000004	 DWord
  y  . . . . . . . . . . . . . .	 00000008	 DWord
sfColor  . . . . . . . . . . . .	 00000004
  r  . . . . . . . . . . . . . .	 00000000	 Byte
  g  . . . . . . . . . . . . . .	 00000001	 Byte
  b  . . . . . . . . . . . . . .	 00000002	 Byte
  a  . . . . . . . . . . . . . .	 00000003	 Byte
sfEvent  . . . . . . . . . . . .	 00000030
  _type  . . . . . . . . . . . .	 00000000	 DWord
  _size  . . . . . . . . . . . .	 00000004	 DWord
  mouse  . . . . . . . . . . . .	 00000008	 
  _key . . . . . . . . . . . . .	 00000014	 
  mouseMove  . . . . . . . . . .	 00000028	 QWord
sfFloatRect  . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  _width . . . . . . . . . . . .	 00000008	 DWord
  height . . . . . . . . . . . .	 0000000C	 DWord
sfTime . . . . . . . . . . . . .	 00000004
  microseconds . . . . . . . . .	 00000000	 DWord
sfVector2f . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVector2i . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVideoMode  . . . . . . . . . .	 0000000C
  _width . . . . . . . . . . . .	 00000000	 DWord
  height . . . . . . . . . . . .	 00000004	 DWord
  bpp  . . . . . . . . . . . . .	 00000008	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00013EF8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006D1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@load_bg . . . . . . . . . . . .	P Near	 0000001C _TEXT	Length= 00000036 Public C
@load_blue_texture . . . . . . .	P Near	 0000031E _TEXT	Length= 00000015 Public C
@load_red_texture  . . . . . . .	P Near	 00000309 _TEXT	Length= 00000015 Public C
ParseNoteChart . . . . . . . . .	P Near	 00000052 _TEXT	Length= 000002B7 Public C
  filename . . . . . . . . . . .	DWord	 bp + 00000008
  filePtr  . . . . . . . . . . .	DWord	 bp - 00000004
  line . . . . . . . . . . . . .	Byte	 bp - 00000104
  inNoteSection  . . . . . . . .	DWord	 bp - 00000108
  bar  . . . . . . . . . . . . .	DWord	 bp - 0000010C
  context  . . . . . . . . . . .	DWord	 bp - 00000110
  barlength  . . . . . . . . . .	DWord	 bp - 00000114
  validNotes . . . . . . . . . .	DWord	 bp - 00000118
  i  . . . . . . . . . . . . . .	DWord	 bp - 0000011C
  note . . . . . . . . . . . . .	Byte	 bp - 0000011D
  currentTIme  . . . . . . . . .	DWord	 bp - 00000124
  beatTime . . . . . . . . . . .	DWord	 bp - 00000128
  barTime  . . . . . . . . . . .	DWord	 bp - 0000012C
  noteInterval . . . . . . . . .	DWord	 bp - 00000130
  ParseLineLoop  . . . . . . . .	L Near	 00000082 _TEXT	
  CheckOffset  . . . . . . . . .	L Near	 000000E9 _TEXT	
  CheckStart . . . . . . . . . .	L Near	 0000011B _TEXT	
  CheckEnd . . . . . . . . . . .	L Near	 00000143 _TEXT	
  ProcessBar . . . . . . . . . .	L Near	 00000195 _TEXT	
  CountValidNotes  . . . . . . .	L Near	 000001C7 _TEXT	
  SkipNote . . . . . . . . . . .	L Near	 000001E5 _TEXT	
  ComputeNoteTiming  . . . . . .	L Near	 000001ED _TEXT	
  NoteLoop . . . . . . . . . . .	L Near	 0000023E _TEXT	
  SkipToNextNote . . . . . . . .	L Near	 0000027A _TEXT	
  ProcessNextBar . . . . . . . .	L Near	 00000296 _TEXT	
  EndParse . . . . . . . . . . .	L Near	 000002BF _TEXT	
  FileOpenError  . . . . . . . .	L Near	 00000307 _TEXT	
dequeue  . . . . . . . . . . . .	P Near	 000003AC _TEXT	Length= 0000004D Public C
  end_dequeue  . . . . . . . . .	L Near	 000003F8 _TEXT	
enqueue  . . . . . . . . . . . .	P Near	 0000035D _TEXT	Length= 0000004F Public C
  end_enqueue  . . . . . . . . .	L Near	 000003AB _TEXT	
game_play_music  . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001C Public C
isQueueEmpty . . . . . . . . . .	P Near	 00000348 _TEXT	Length= 00000015 Public C
  queue_empty  . . . . . . . . .	L Near	 00000357 _TEXT	
isQueueFull  . . . . . . . . . .	P Near	 00000333 _TEXT	Length= 00000015 Public C
  queue_full . . . . . . . . . .	L Near	 00000342 _TEXT	
main_game_page . . . . . . . . .	P Near	 000004D9 _TEXT	Length= 000001F8 Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
  musicPath  . . . . . . . . . .	DWord	 bp + 0000000C
  noteChart  . . . . . . . . . .	DWord	 bp + 00000010
  @main_loop . . . . . . . . . .	L Near	 0000053A _TEXT	
  check_window . . . . . . . . .	L Near	 00000551 _TEXT	
  restart  . . . . . . . . . . .	L Near	 000005BF _TEXT	
  update . . . . . . . . . . . .	L Near	 000005C4 _TEXT	
  draw_loop  . . . . . . . . . .	L Near	 00000600 _TEXT	
  display_window . . . . . . . .	L Near	 0000063B _TEXT	
  to_end_page  . . . . . . . . .	L Near	 0000064C _TEXT	
  @exit_program  . . . . . . . .	L Near	 0000067B _TEXT	
spawnDrum  . . . . . . . . . . .	P Near	 000003F9 _TEXT	Length= 00000045 Public C
  spawnRed . . . . . . . . . . .	L Near	 00000420 _TEXT	
  end_spawn  . . . . . . . . . .	L Near	 0000043D _TEXT	
updateDrums  . . . . . . . . . .	P Near	 0000043E _TEXT	Length= 0000009B Public C
  update_queue . . . . . . . . .	L Near	 00000492 _TEXT	
  end_update . . . . . . . . . .	L Near	 000004D8 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CloseHandle@4  . . . . . . . . .	L Near	 00000000 FLAT	External C
CreateFileA@28 . . . . . . . . .	L Near	 00000000 FLAT	External C
DRUM_SPEED . . . . . . . . . . .	DWord	 000000AA _DATA	
Drum_struct_size . . . . . . . .	Number	 00000008h   
ExitProcess@4  . . . . . . . . .	L Near	 00000000 FLAT	External C
FILE_ATTRIBUTE_NORMAL  . . . . .	Text   	 0x00000080
FILE_SHARE_READ  . . . . . . . .	Text   	 0x00000001
GENERIC_READ . . . . . . . . . .	Text   	 0x80000000
GOOD_THRESHOLD . . . . . . . . .	Number	 0000001Eh   
GREAT_THRESHOLD  . . . . . . . .	Number	 00000004h   
GetLastError@0 . . . . . . . . .	L Near	 00000000 FLAT	External C
GetStdHandle@4 . . . . . . . . .	L Near	 00000000 FLAT	External C
HIT_POSITION_X . . . . . . . . .	Number	 000001C2h   
INITIAL_DELAY  . . . . . . . . .	Number	 00000003h   
MAX_DRUMS  . . . . . . . . . . .	Number	 00000064h   
MAX_LINE_LENGTH  . . . . . . . .	Number	 000003E8h   
MAX_NOTES  . . . . . . . . . . .	Number	 00002710h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
ReadFile@20  . . . . . . . . . .	L Near	 00000000 FLAT	External C
SCREEN_HEIGHT  . . . . . . . . .	Number	 000002D0h   
SCREEN_WIDTH . . . . . . . . . .	Number	 00000500h   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
WriteConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External C
WriteFile@20 . . . . . . . . . .	L Near	 00000000 FLAT	External C
_size  . . . . . . . . . . . . .	DWord	 00000626 _DATA	
bgSprite . . . . . . . . . . . .	DWord	 000000E6 _DATA	
bgTexture  . . . . . . . . . . .	DWord	 000000E2 _DATA	
bg_path  . . . . . . . . . . . .	Byte	 00000000 _DATA	
bgmusic  . . . . . . . . . . . .	DWord	 000000EA _DATA	
blackColor . . . . . . . . . . .	sfColor	 0000013E _DATA	
blueDrumTexture  . . . . . . . .	DWord	 0000062E _DATA	
blue_drum_path . . . . . . . . .	Byte	 00000039 _DATA	
bpm  . . . . . . . . . . . . . .	DWord	 00000116 _DATA	
clock  . . . . . . . . . . . . .	DWord	 0000010E _DATA	
comma  . . . . . . . . . . . . .	Byte	 00013ED9 _DATA	
const_1000 . . . . . . . . . . .	DWord	 000000CA _DATA	
const_60000  . . . . . . . . . .	DWord	 000000C6 _DATA	
currentNoteIndex . . . . . . . .	DWord	 0000011A _DATA	
currentPage  . . . . . . . . . .	DWord	 00000000 FLAT	External C
current_drum . . . . . . . . . .	Drum	 000000FE _DATA	
drumQueue  . . . . . . . . . . .	Drum	 0000016E _DATA	
drumStep . . . . . . . . . . . .	DWord	 00013EBA _DATA	
end_game_page  . . . . . . . . .	L Near	 00000000 FLAT	External C
fclose . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fgets  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fopen  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
four . . . . . . . . . . . . . .	DWord	 000000CE _DATA	
front  . . . . . . . . . . . . .	DWord	 0000061E _DATA	
getBmp . . . . . . . . . . . . .	Byte	 00013EDB _DATA	
getOffset  . . . . . . . . . . .	Byte	 00013EE2 _DATA	
good_count . . . . . . . . . . .	DWord	 000000D6 _DATA	
great_count  . . . . . . . . . .	DWord	 000000D2 _DATA	
index  . . . . . . . . . . . . .	DWord	 0000010A _DATA	
miss_count . . . . . . . . . . .	DWord	 000000DA _DATA	
msInfo . . . . . . . . . . . . .	MusicInfo  0000015A _DATA	
noteSpawnInterval  . . . . . . .	DWord	 0000A276 _DATA	
noteTimings  . . . . . . . . . .	DWord	 0000A27A _DATA	
note_timer . . . . . . . . . . .	DWord	 00000112 _DATA	
notes  . . . . . . . . . . . . .	DWord	 00000632 _DATA	
readA  . . . . . . . . . . . . .	Byte	 00013EBE _DATA	
real_4 . . . . . . . . . . . . .	DWord	 00013EF0 _DATA	
real_60000 . . . . . . . . . . .	DWord	 00013EF4 _DATA	
real_60  . . . . . . . . . . . .	DWord	 00013EEC _DATA	
rear . . . . . . . . . . . . . .	DWord	 00000622 _DATA	
redDrumTexture . . . . . . . . .	DWord	 0000062A _DATA	
red_drum_path  . . . . . . . . .	Byte	 00000020 _DATA	
score  . . . . . . . . . . . . .	DWord	 000000DE _DATA	
selected_beatmap_path  . . . . .	Byte	 0000008B _DATA	
selected_music_path  . . . . . .	Byte	 00000053 _DATA	
sfClock_create . . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_getElapsedTime . . . . .	L Near	 00000000 FLAT	External C
sfClock_restart  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClose  . . . . . . . . . . . .	Number	 00000004h   
sfColor_fromRGBA . . . . . . . .	L Near	 00000000 FLAT	External C
sfColor_fromRGB  . . . . . . . .	L Near	 00000000 FLAT	External C
sfEvtClosed  . . . . . . . . . .	Number	 00000000h   
sfEvtGainedFocus . . . . . . . .	Number	 00000003h   
sfEvtKeyPressed  . . . . . . . .	Number	 00000005h   
sfEvtKeyReleased . . . . . . . .	Number	 00000006h   
sfEvtLostFocus . . . . . . . . .	Number	 00000002h   
sfEvtMouseButtonPressed  . . . .	Number	 00000009h   
sfEvtMouseButtonReleased . . . .	Number	 0000000Ah   
sfEvtMouseEntered  . . . . . . .	Number	 0000000Ch   
sfEvtMouseLeft . . . . . . . . .	Number	 0000000Dh   
sfEvtMouseMoved  . . . . . . . .	Number	 0000000Bh   
sfEvtMouseWheelMoved . . . . . .	Number	 00000007h   
sfEvtMouseWheelScrolled  . . . .	Number	 00000008h   
sfEvtResized . . . . . . . . . .	Number	 00000001h   
sfEvtTextEntered . . . . . . . .	Number	 00000004h   
sfFalse  . . . . . . . . . . . .	Number	 00000000h   
sfFont_createFromFile  . . . . .	L Near	 00000000 FLAT	External C
sfFont_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfFullscreen . . . . . . . . . .	Number	 00000008h   
sfKeyA . . . . . . . . . . . . .	Number	 00000000h   
sfKeyD . . . . . . . . . . . . .	Number	 00000003h   
sfKeyEnter . . . . . . . . . . .	Number	 0000003Ah   
sfKeyEscape  . . . . . . . . . .	Number	 00000024h   
sfKeyS . . . . . . . . . . . . .	Number	 00000012h   
sfMouseLeft  . . . . . . . . . .	Number	 00000000h   
sfMouseMiddle  . . . . . . . . .	Number	 00000002h   
sfMouseRight . . . . . . . . . .	Number	 00000001h   
sfMusic_createFromFile . . . . .	L Near	 00000000 FLAT	External C
sfMusic_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_getStatus  . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_play . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_setLoop  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_stop . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfNone . . . . . . . . . . . . .	Number	 00000000h   
sfRectangleShape_create  . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_destroy . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setFillColor  .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineColor .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineThickness .	L Near	 00000000 FLAT	External C
sfRectangleShape_setPosition . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setSize . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_clear . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_close . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_create  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_destroy . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_display . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawRectangleShape 	L Near	 00000000 FLAT	External C
sfRenderWindow_drawSprite  . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawText  . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_isOpen  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_pollEvent . . . .	L Near	 00000000 FLAT	External C
sfResize . . . . . . . . . . . .	Number	 00000002h   
sfSleep  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_create  . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_destroy . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_getPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_move  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setOrigin . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setTexture  . . . . . .	L Near	 00000000 FLAT	External C
sfText_create  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_getGlobalBounds . . . . .	L Near	 00000000 FLAT	External C
sfText_getLocalBounds  . . . . .	L Near	 00000000 FLAT	External C
sfText_setCharacterSize  . . . .	L Near	 00000000 FLAT	External C
sfText_setFillColor  . . . . . .	L Near	 00000000 FLAT	External C
sfText_setFont . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineColor . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineThickness . . .	L Near	 00000000 FLAT	External C
sfText_setPosition . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setString . . . . . . . .	L Near	 00000000 FLAT	External C
sfTexture_createFromFile . . . .	L Near	 00000000 FLAT	External C
sfTexture_destroy  . . . . . . .	L Near	 00000000 FLAT	External C
sfTitlebar . . . . . . . . . . .	Number	 00000001h   
sfTrue . . . . . . . . . . . . .	Number	 00000001h   
spritePosX . . . . . . . . . . .	DWord	 000000BE _DATA	
spritePosY . . . . . . . . . . .	DWord	 000000C2 _DATA	
stats  . . . . . . . . . . . . .	GameStats  00000142 _DATA	
str_bpm  . . . . . . . . . . . .	Byte	 00013EC0 _DATA	
str_end  . . . . . . . . . . . .	Byte	 00013ED4 _DATA	
str_offset . . . . . . . . . . .	Byte	 00013EC5 _DATA	
str_start  . . . . . . . . . . .	Byte	 00013ECD _DATA	
strcspn  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strlen . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strncmp  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strtok_s . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
totalNotes . . . . . . . . . . .	DWord	 0000A272 _DATA	
trackBounds  . . . . . . . . . .	sfFloatRect  000000EE _DATA	
track_height . . . . . . . . . .	DWord	 000000AE _DATA	
track_width  . . . . . . . . . .	DWord	 000000B2 _DATA	
track_x  . . . . . . . . . . . .	DWord	 000000B6 _DATA	
track_y  . . . . . . . . . . . .	DWord	 000000BA _DATA	
whiteColor . . . . . . . . . . .	sfColor	 0000013A _DATA	
windowTitle  . . . . . . . . . .	Byte	 0000012A _DATA	
window_videoMode . . . . . . . .	sfVideoMode  0000011E _DATA	

	   2 Warnings
	   0 Errors
