Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/22/24 06:23:42
main_game_page.asm					     Page 1 - 1


				.model flat, c
				include csfml.inc
			      C ; CSFML.INC - SFML Definitions for x86 Assembly
			      C ; 使用 MASM 語法
			      C 
			      C includelib csfml-audio.lib
			      C includelib csfml-graphics.lib
			      C includelib csfml-system.lib
			      C includelib csfml-window.lib
			      C 
			      C ; sfBool 定義
 = 00000000		      C sfFalse     equ 0
 = 00000001		      C sfTrue      equ 1
			      C 
			      C ; sfEventType 定義
 = 00000000		      C sfEvtClosed               equ 0
 = 00000001		      C sfEvtResized              equ 1
 = 00000002		      C sfEvtLostFocus            equ 2
 = 00000003		      C sfEvtGainedFocus          equ 3
 = 00000004		      C sfEvtTextEntered          equ 4
 = 00000005		      C sfEvtKeyPressed           equ 5
 = 00000006		      C sfEvtKeyReleased          equ 6
 = 00000007		      C sfEvtMouseWheelMoved      equ 7
 = 00000008		      C sfEvtMouseWheelScrolled   equ 8
 = 00000009		      C sfEvtMouseButtonPressed   equ 9
 = 0000000A		      C sfEvtMouseButtonReleased  equ 10
 = 0000000B		      C sfEvtMouseMoved           equ 11
 = 0000000C		      C sfEvtMouseEntered         equ 12
 = 0000000D		      C sfEvtMouseLeft            equ 13
			      C 
			      C ; sfMouseButton 定義
 = 00000000		      C sfMouseLeft   equ 0
 = 00000001		      C sfMouseRight  equ 1
 = 00000002		      C sfMouseMiddle equ 2
			      C 
			      C ; sfKey 定義
 = 0000003A		      C sfKeyEnter    equ 58
 = 00000000		      C sfKeyA        equ 0
 = 00000012		      C sfKeyS        equ 18
 = 00000003		      C sfKeyD        equ 3
 = 00000024		      C sfKeyEscape   equ 36
			      C 
			      C ; 視窗風格定義
 = 00000000		      C sfNone       equ 0
 = 00000001		      C sfTitlebar   equ 1
 = 00000002		      C sfResize     equ 2
 = 00000004		      C sfClose      equ 4
 = 00000008		      C sfFullscreen equ 8
			      C 
			      C ; 結構體定義
 00000008		      C sfVector2f STRUCT
 00000000  00000000	      C     x REAL4 ?
 00000004  00000000	      C     y REAL4 ?
			      C sfVector2f ENDS
			      C 
 00000008		      C sfVector2i STRUCT
 00000000  00000000	      C     x SDWORD ?
 00000004  00000000	      C     y SDWORD ?
			      C sfVector2i ENDS
			      C 
 0000000C		      C sfVideoMode STRUCT
 00000000  00000000	      C     _width  DWORD ?
 00000004  00000000	      C     height DWORD ?
 00000008  00000000	      C     bpp    DWORD ?
			      C sfVideoMode ENDS
			      C 
 00000004		      C sfColor STRUCT
 00000000  00		      C     r BYTE ?
 00000001  00		      C     g BYTE ?
 00000002  00		      C     b BYTE ?
 00000003  00		      C     a BYTE ?
			      C sfColor ENDS
			      C 
 00000010		      C sfFloatRect STRUCT
 00000000  00000000	      C     left   REAL4 ?
 00000004  00000000	      C     top    REAL4 ?
 00000008  00000000	      C     _width  REAL4 ?
 0000000C  00000000	      C     height REAL4 ?
			      C sfFloatRect ENDS
			      C 
 0000000C		      C mouseButton STRUCT
 00000000  00000000	      C     button DWORD ?
 00000004  00000000	      C     x DWORD ?
 00000008  00000000	      C     y DWORD ?
			      C mouseButton ENDS
			      C 
 00000014		      C key STRUCT
 00000000  00000000	      C     code DWORD ?
 00000004  00000000	      C     alt DWORD ?
 00000008  00000000	      C     control DWORD ?
 0000000C  00000000	      C     shift DWORD ?
 00000010  00000000	      C     system DWORD ?
			      C key ENDS
			      C 
 00000030		      C sfEvent STRUCT
 00000000  00000000	      C     _type DWORD ?                
 00000004  00000000	      C     _size DWORD ?                
 00000008  00000000	      C     mouse mouseButton <>       
	   00000000
	   00000000
 00000014  00000000	      C     _key key <>                 
	   00000000
	   00000000
	   00000000
	   00000000
 00000028  00000000	      C     mouseMove sfVector2i <>     
	   00000000
			      C sfEvent ENDS
			      C 
 00000004		      C sfTime STRUCT
 00000000  00000000	      C     microseconds DWORD ?    
			      C sfTime ENDS
			      C 
			      C ; 函數原型 - 視窗相關
			      C EXTERN sfRenderWindow_create:PROC
			      C EXTERN sfRenderWindow_destroy:PROC
			      C EXTERN sfRenderWindow_close:PROC
			      C EXTERN sfRenderWindow_isOpen:PROC
			      C EXTERN sfRenderWindow_clear:PROC
			      C EXTERN sfRenderWindow_display:PROC
			      C EXTERN sfRenderWindow_pollEvent:PROC
			      C EXTERN sfRenderWindow_drawSprite:PROC
			      C EXTERN sfRenderWindow_drawText:PROC
			      C EXTERN sfWindow_setFramerateLimit:PROC
			      C 
			      C ; 函數原型 - 紋理相關
			      C EXTERN sfTexture_createFromFile:PROC
			      C EXTERN sfTexture_destroy:PROC
			      C 
			      C ; 函數原型 - 精靈相關
			      C EXTERN sfSprite_create:PROC
			      C EXTERN sfSprite_destroy:PROC
			      C EXTERN sfSprite_setTexture:PROC
			      C EXTERN sfSprite_setPosition:PROC
			      C EXTERN sfSprite_setOrigin:PROC
			      C EXTERN sfSprite_move:PROC
			      C EXTERN sfSprite_getPosition:PROC
			      C 
			      C ; 函數原型 - 音樂相關
			      C EXTERN sfMusic_createFromFile:PROC
			      C EXTERN sfMusic_destroy:PROC
			      C EXTERN sfMusic_play:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C EXTERN sfMusic_stop: PROC
			      C EXTERN sfMusic_getStatus:PROC
			      C EXTERN sfMusic_setLoop:PROC
			      C 
			      C ; 函數原型 - 文字相關
			      C EXTERN sfFont_createFromFile:PROC
			      C EXTERN sfFont_destroy:PROC
			      C EXTERN sfText_create:PROC
			      C EXTERN sfText_destroy:PROC
			      C EXTERN sfText_setFont:PROC
			      C EXTERN sfText_setString:PROC
			      C EXTERN sfText_setCharacterSize:PROC
			      C EXTERN sfText_setFillColor:PROC
			      C EXTERN sfText_setOutlineColor:PROC
			      C EXTERN sfText_setOutlineThickness:PROC
			      C EXTERN sfText_getLocalBounds:PROC
			      C EXTERN sfText_getGlobalBounds:PROC
			      C EXTERN sfText_setPosition:PROC
			      C 
			      C ; 函數原型 - 顏色相關
			      C EXTERN sfColor_fromRGB:PROC
			      C EXTERN sfColor_fromRGBA:PROC
			      C 
			      C ; 函數原型 - 矩形相關
			      C EXTERN sfRectangleShape_create: PROC
			      C EXTERN sfRectangleShape_setPosition: PROC
			      C EXTERN sfRectangleShape_setSize: PROC
			      C EXTERN sfRectangleShape_setFillColor: PROC
			      C EXTERN sfRectangleShape_setOutlineThickness: PROC
			      C EXTERN sfRenderWindow_drawRectangleShape: PROC
			      C EXTERN sfRectangleShape_destroy: PROC
			      C EXTERN sfRectangleShape_setOutlineColor: PROC
			      C 
			      C ; 函數原型 - 時間相關
			      C EXTERN sfSleep: PROC
			      C EXTERN sfClock_create:PROC
			      C EXTERN sfClock_getElapsedTime:PROC
			      C EXTERN sfClock_restart:PROC
			      C EXTERN sfClock_destroy:PROC
			      C 
			      C ; 函數原型 - 圓形相關
			      C EXTERN sfCircleShape_create:PROC
			      C EXTERN sfCircleShape_setRadius:PROC
			      C EXTERN sfCircleShape_setPosition:PROC
			      C EXTERN sfCircleShape_setFillColor:PROC
			      C EXTERN sfCircleShape_setOutlineThickness:PROC
			      C EXTERN sfCircleShape_setOutlineColor:PROC
			      C EXTERN sfRenderWindow_drawCircleShape:PROC
			      C 
				include windows.inc
			      C ; windows.inc - 包含 Windows API 函數的定義
			      C 
			      C includelib kernel32.lib
			      C 
			      C extern GetStdHandle@4:PROC
			      C extern CreateFileA@28:PROC
			      C extern WriteFile@20:PROC
			      C extern ReadFile@20:PROC
			      C extern ExitProcess@4:PROC
			      C extern CloseHandle@4:PROC
			      C extern WriteConsoleA@20:PROC
			      C extern GetLastError@0:PROC
			      C 
			      C ; 定義常量
 = 0x80000000		      C GENERIC_READ         EQU 0x80000000
 = 0x00000001		      C FILE_SHARE_READ      EQU 0x00000001
 =-0000000B		      C STD_OUTPUT_HANDLE equ -11
 = 00000003		      C OPEN_EXISTING        EQU 3
 = 0x00000080		      C FILE_ATTRIBUTE_NORMAL EQU 0x00000080
			      C 
			      C 
			      C 
				include file.inc
			      C includelib ucrt.lib
			      C includelib kernel32.lib
			      C 
			      C 
 0000000C		      C Drum struct
 00000000  00000000	      C 	sprite dword ?
 00000004  00000000	      C 	_type dword ?
 00000008  00000000	      C 	targetTime real4 ?
			      C Drum ends
			      C 
 00000018		      C GameStats struct
 00000000  00000000	      C 	great_count dword ?
 00000004  00000000	      C 	good_count dword ?
 00000008  00000000	      C 	miss_count dword ?
 0000000C  00000000	      C 	current_combo dword ?
 00000010  00000000	      C 	max_combo dword ?
 00000014  00000000	      C 	total_score dword ?
			      C GameStats ends
			      C 
 00000014		      C MusicInfo struct
 00000000  00000000	      C 	bpm real4 ?
 00000004  00000000	      C 	_offset real4 ?
 00000008  00000000	      C 	spawnTime real4 ?
 0000000C  00000000	      C 	currentBar dword ?
 00000010  00000000	      C 	notesInBar dword ?
			      C MusicInfo ends
			      C 
			      C extern fopen:proc
			      C extern fclose:proc
			      C extern fgets:proc
			      C 
			      C 
			      C ; string
			      C 
			      C extern strcspn:proc
			      C extern strncmp:proc
			      C extern __stdio_common_vsscanf:proc
			      C extern __stdio_common_vsprintf_s:proc
			      C extern strtok_s:proc
			      C extern strlen:proc
			      C 

				extern currentPage: DWORD
				EXTERN end_game_page:PROC

				; Constants
 = 00002710			MAX_NOTES = 10000
 = 000003E8			MAX_LINE_LENGTH = 1000
				;SCREEN_WIDTH = 1280
				;SCREEN_HEIGHT = 720
 = 00000064			MAX_DRUMS = 100
 = 000001C2			HIT_POSITION_X = 450
 = 000000E1			HIT_POSITION_Y = 225
 = 00000004			GREAT_THRESHOLD = 4
 = 0000001E			GOOD_THRESHOLD = 30
 = 00000003			INITIAL_DELAY = 3

 00000000			.data
				    ; 檔案路徑
 00000000 61 73 73 65 74	    bg_path db "assets/main/game_background.jpg", 0
	   73 2F 6D 61 69
	   6E 2F 67 61 6D
	   65 5F 62 61 63
	   6B 67 72 6F 75
	   6E 64 2E 6A 70
	   67 00
 00000020 61 73 73 65 74	    red_drum_path db "assets/main/red_note.png", 0
	   73 2F 6D 61 69
	   6E 2F 72 65 64
	   5F 6E 6F 74 65
	   2E 70 6E 67 00
 00000039 61 73 73 65 74	    blue_drum_path db "assets/main/blue_note.png", 0
	   73 2F 6D 61 69
	   6E 2F 62 6C 75
	   65 5F 6E 6F 74
	   65 2E 70 6E 67
	   00
 00000053 61 73 73 65 74	    selected_music_path db "assets/never-gonna-give-you-up-official-music-video.mp3", 0
	   73 2F 6E 65 76
	   65 72 2D 67 6F
	   6E 6E 61 2D 67
	   69 76 65 2D 79
	   6F 75 2D 75 70
	   2D 6F 66 66 69
	   63 69 61 6C 2D
	   6D 75 73 69 63
	   2D 76 69 64 65
	   6F 2E 6D 70 33
	   00
 0000008B 61 73 73 65 74	    selected_beatmap_path db "assets/music/song1_beatmap.tja", 0
	   73 2F 6D 75 73
	   69 63 2F 73 6F
	   6E 67 31 5F 62
	   65 61 74 6D 61
	   70 2E 74 6A 61
	   00
 000000AA 61 73 73 65 74	    font_path db "assets\main\Taiko_No_Tatsujin_Official_Font.ttf", 0
	   73 5C 6D 61 69
	   6E 5C 54 61 69
	   6B 6F 5F 4E 6F
	   5F 54 61 74 73
	   75 6A 69 6E 5F
	   4F 66 66 69 63
	   69 61 6C 5F 46
	   6F 6E 74 2E 74
	   74 66 00

				    ;常數
 = 0000000C			    Drum_struct_size equ 12     ; Drum 結構大小
 000000DA 00000000		    spritePosX    dd 0.0
 000000DE 00000000		    spritePosY    dd 0.0
 000000E2 476A6000		    const_60000 dd 60000.0
 000000E6 447A0000		    const_1000 dd 1000.0
 000000EA 43610000		    const_225 dd 225.0
 000000EE 40800000		    four dd 4.0
 000000F2 44A00000		    SCREEN_WIDTH real4 1280.0
 000000F6 44340000		    SCREEN_HEIGHT real4 720.0

				    ;用來存great good miss 的次數和最後總分
 000000FA 00000000		    great_count DWORD 0
 000000FE 00000000		    good_count DWORD 0
 00000102 00000000		    miss_count DWORD 0
 00000106 00000000		    score DWORD 0

				    ; CSFML 物件
 0000010A 00000000		    bgTexture dd 0
 0000010E 00000000		    bgSprite dd 0
 00000112 00000000		    bgmusic dd 0
 00000116 00000000		    current_drum Drum <>
	   00000000
	   00000000
 00000122 00000000		    font dd 0
 00000126 00000000		    scoreText dd 0
 0000012A 41200000		    scoreText_x dd 10.0
 0000012E 41200000		    scoreText_y dd 10.0
 00000132 00000000		    judgementCircle dd 0
 00000136 00000000		    countdownText dd 0
 0000013A 00000000		    countdownText_x dd 0.0
 0000013E 00000000		    countdownText_y dd 0.0
 00000142  00000002 [		    countdownStr db 2 dup(?)
	    00
	   ]
 00000144  000000C8 [		    scoreString db 200 dup(?)
	    00
	   ]

				    ;Queue 相關
 0000020C 00000000		    index dd 0

				    ; 時間相關
 00000210 00000000		    spawnClock dd 0
 00000214 00000000		    note_timer REAL4 0.0       ; 音符生成計時器

				    ;譜面相關
				    ;bpm dd 113.65 ; 預設 BPM
				    ;currentNoteIndex dd 0

				    ; 視窗設定
 00000218 00000500		    window_videoMode sfVideoMode <1280, 720, 32>
	   000002D0
	   00000020
 00000224 54 61 69 6B 6F	    windowTitle db "Taiko Simulator", 0
	   20 53 69 6D 75
	   6C 61 74 6F 72
	   00

				    ; 顏色常數
 00000234 FF FF FF FF		    whiteColor sfColor <255, 255, 255, 255> ; 白色
 00000238 00 00 00 FF		    blackColor sfColor <0, 0, 0, 255>       ; 黑色
 0000023C 00 00 00 00		    Transparent sfColor <0, 0, 0, 0>        ; 透明

				    ;initialPosition sfVector2f <HIT_POSITION_X, 225>  ; 音符的 X 和 Y 座標
				    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000240 00000000		    stats GameStats <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000258 00000000			msInfo MusicInfo <>
	   00000000
	   00000000
	   00000000
	   00000000

					; queue for drums
 0000026C  00000064 [			drumQueue Drum MAX_DRUMS dup(<>)
	    00000000
	    00000000
	    00000000
	   ]
 0000071C 00000000			front dword 0
 00000720 00000000			rear dword 0
 00000724 00000000			_size dword 0

					; texture
 00000728 00000000			redDrumTexture dword ?
 0000072C 00000000			blueDrumTexture dword ?

 00000730  00002710 [			notes dword MAX_NOTES dup(?)
	    00000000
	   ]
 0000A370 00000000			totalNotes dword 0
 0000A374 00000000			noteSpawnInterval real4 0.0
 0000A378  00002710 [			noteTimings real4 MAX_NOTES dup(?)
	    00000000
	   ]
 00013FB8 3E800000			drumStep real4 0.25

					; file
 00013FBC 72 00				readA byte "r", 0

					;label
 00013FBE 42 50 4D 3A 00		str_bpm db "BPM:", 0
 00013FC3 4F 46 46 53 45		str_offset db "OFFSET:", 0
	   54 3A 00
 00013FCB 23 53 54 41 52		str_start db "#START", 0
	   54 00
 00013FD2 23 45 4E 44 00		str_end db "#END", 0
 00013FD7 2C 00				comma db ",", 0

 00013FD9 42 4D 50 3A 25		getBmp db "BMP:%f", 0
	   66 00
 00013FE0 4F 46 46 53 45		getOffset db "OFFSET:%f", 0
	   54 3A 25 66 00

 00013FEA 42700000			real_60 real4 60.0
 00013FEE 40800000			real_4 real4 4.0
 00013FF2 476A6000			real_60000 real4 60000.0
 00013FF6 42100000		    real_36 real4 36.0
 00013FFA 49742400		    real_1000000 real4 1000000.0
 00013FFE 3F800000		    real_1 real4 1.0
 00014002 00000000		    real_0 real4 0.0
 00014006 42AA0000		    real_85 real4 85.0


 00000000			.code

				;播放音樂
 00000000			game_play_music PROC musicPath:PTR BYTE
 00000003  8B 45 08		    mov eax, [musicPath]
 00000006  FF 75 08		    push musicPath          
 00000009  E8 00000000 E	    call sfMusic_createFromFile
 0000000E  83 C4 04		    add esp, 4 
 00000011  A3 00000112 R	    mov bgMusic, eax

				    ;push eax
				    ;call sfMusic_play
				    ;add esp, 4
				    ret
 00000018			game_play_music ENDP

				; 載入背景
 00000018			@load_bg PROC

				    ; 創建背景紋理
 00000018  6A 00		    push 0
 0000001A  68 00000000 R	    push offset bg_path
 0000001F  E8 00000000 E	    call sfTexture_createFromFile
 00000024  83 C4 08		    add esp, 8
 00000027  A3 0000010A R	    mov bgTexture, eax

				    ; 創建背景精靈
 0000002C  E8 00000000 E	    call sfSprite_create
 00000031  A3 0000010E R	    mov DWORD PTR [bgSprite], eax

				    ; 設定紋理
 00000036  6A 01		    push 1
 00000038  A1 0000010A R	    mov eax, DWORD PTR [bgTexture]
 0000003D  50			    push eax
 0000003E  8B 0D 0000010E R	    mov ecx, DWORD PTR [bgSprite]
 00000044  51			    push ecx
 00000045  E8 00000000 E	    call sfSprite_setTexture
 0000004A  83 C4 0C		    add esp, 12
 0000004D  C3			    ret
 0000004E			@load_bg ENDP

 0000004E			parseString proc
 0000004E  55			    push ebp
 0000004F  8B EC		    mov ebp, esp
 00000051  83 EC 08		    sub esp, 8                           ; 暫存區

				    ; 初始化參數
 00000054  8B 75 08		    mov esi, dword ptr [ebp+8]           ; esi = inputStr
 00000057  8B 7D 0C		    mov edi, dword ptr [ebp+12]          ; edi = formatStr
 0000005A  B8 00000001		    mov eax, 1                           ; 預設返回值為成功

				    ; 解析格式化字串
 0000005F			next_format:
 0000005F  AC			    lodsb                                ; 加載格式字串中的下一個字符到 al
 00000060  3C 00		    cmp al, 0                            ; 檢查是否到字串結尾
 00000062  0F 84 0000008D	    je parse_done                        ; 如果到字串結尾，解析完成

 00000068  3C 25		    cmp al, '%'                          ; 檢查是否為格式化符號 '%'
 0000006A  75 0F		    jne skip_format                      ; 如果不是 '%', 跳過

 0000006C  AC			    lodsb                                ; 取下一個格式化符號
 0000006D  3C 64		    cmp al, 'd'                          ; 檢查是否為 %d
 0000006F  74 0D		    je parse_int
 00000071  3C 73		    cmp al, 's'                          ; 檢查是否為 %s
 00000073  74 23		    je parse_string
 00000075  3C 66		    cmp al, 'f'                          ; 檢查是否為 %f
 00000077  74 2F		    je parse_float
 00000079  EB 76		    jmp parse_error                      ; 不支持的格式，跳轉到錯誤

 0000007B			skip_format:
 0000007B  AC			    lodsb                                ; 繼續下一個字符
 0000007C  EB E1		    jmp next_format

				; 解析整數 (%d)
 0000007E			parse_int:
 0000007E  8B 5D 10		    mov ebx, dword ptr [ebp+16]          ; ebx = intResult
 00000081  33 C9		    xor ecx, ecx                         ; ecx = 0 (存整數結果)
 00000083			parse_int_loop:
 00000083  AC			    lodsb                                ; 加載下一個字符
 00000084  3C 30		    cmp al, '0'                          ; 檢查是否為數字
 00000086  72 0D		    jb parse_done_int                    ; 如果不是數字，結束
 00000088  3C 39		    cmp al, '9'
 0000008A  77 09		    ja parse_done_int
 0000008C  2C 30		    sub al, '0'                          ; 將字符轉為數字
 0000008E  6B C9 0A		    imul ecx, ecx, 10                    ; ecx = ecx * 10
 00000091  03 C8		    add ecx, eax                         ; ecx = ecx + 數字
 00000093  EB EE		    jmp parse_int_loop
 00000095			parse_done_int:
 00000095  AB			    stosd                                ; 儲存結果到 intResult
 00000096  EB C7		    jmp next_format

				; 解析字串 (%s)
 00000098			parse_string:
 00000098  8B 5D 14		    mov ebx, dword ptr [ebp+20]          ; ebx = strResult
 0000009B			parse_string_loop:
 0000009B  AC			    lodsb                                ; 加載下一個字符
 0000009C  3C 20		    cmp al, ' '                          ; 遇到空格或結束符
 0000009E  74 03		    je parse_done_str
 000000A0  AA			    stosb                                ; 儲存字符到 strResult
 000000A1  EB F8		    jmp parse_string_loop
 000000A3			parse_done_str:
 000000A3  C6 03 00		    mov byte ptr [ebx], 0                ; 添加字串結尾符
 000000A6  EB B7		    jmp next_format

				; 解析浮點數 (%f)
 000000A8			parse_float:
 000000A8  8B 5D 18		    mov ebx, dword ptr [ebp+24]          ; ebx = floatResult
 000000AB  33 D2		    xor edx, edx                         ; edx = 小數部分位數計數器
 000000AD  33 C9		    xor ecx, ecx                         ; ecx = 整數部分
 000000AF  BD 00000000		    mov ebp, 0                           ; ebp = 小數部分

 000000B4			parse_float_loop:
 000000B4  AC			    lodsb                                ; 加載下一個字符
 000000B5  3C 2E		    cmp al, '.'                          ; 檢查是否是小數點
 000000B7  74 11		    je parse_fraction
 000000B9  3C 30		    cmp al, '0'                          ; 檢查是否為數字
 000000BB  72 20		    jb parse_done_float                  ; 如果不是數字，結束
 000000BD  3C 39		    cmp al, '9'
 000000BF  77 1C		    ja parse_done_float
 000000C1  2C 30		    sub al, '0'                          ; 將字符轉為數字
 000000C3  6B C9 0A		    imul ecx, ecx, 10                    ; ecx = ecx * 10
 000000C6  03 C8		    add ecx, eax                         ; ecx = ecx + 數字
 000000C8  EB EA		    jmp parse_float_loop

 000000CA			parse_fraction:
 000000CA  AC			    lodsb                                ; 加載小數部分的第一個字符
 000000CB  3C 30		    cmp al, '0'                          ; 檢查是否為數字
 000000CD  72 0E		    jb parse_done_float
 000000CF  3C 39		    cmp al, '9'
 000000D1  77 0A		    ja parse_done_float
 000000D3  2C 30		    sub al, '0'                          ; 將字符轉為數字
 000000D5  6B ED 0A		    imul ebp, ebp, 10                    ; ebp = ebp * 10
 000000D8  03 E8		    add ebp, eax                         ; ebp = ebp + 數字
 000000DA  42			    inc edx                              ; 小數部分位數 +1
 000000DB  EB ED		    jmp parse_fraction

 000000DD			parse_done_float:
				    ; 計算最終的浮點數
 000000DD  B8 00000001		    mov eax, 1
 000000E2  8A CA		    mov cl, dl
 000000E4  D3 E0		    shl eax, cl                         ; eax = 10^小數部分位數
 000000E6  DB 01		    fild dword ptr [ecx]                 ; 加載整數部分到浮點寄存器
 000000E8  DA 30		    fidiv dword ptr [eax]                ; 整數部分除以 10^小數位數
 000000EA  DB 1B		    fistp dword ptr [ebx]                ; 儲存結果到 floatResult
 000000EC  E9 FFFFFF6E		    jmp next_format

				; 處理錯誤
 000000F1			parse_error:
 000000F1  33 C0		    xor eax, eax                         ; 返回失敗
 000000F3  EB 05		    jmp parse_exit

 000000F5			parse_done:
 000000F5  B8 00000001		    mov eax, 1                           ; 返回成功

 000000FA			parse_exit:
 000000FA  8B E5		    mov esp, ebp
 000000FC  5D			    pop ebp
 000000FD  C3			    ret
 000000FE			parseString endp

 000000FE			ParseNoteChart PROC filename:PTR BYTE
					LOCAL filePtr:PTR FILE
					LOCAL line[256]:BYTE
					LOCAL inNoteSection:DWORD
					LOCAL bar:PTR BYTE
					LOCAL context:ptr byte
					local barlength:DWORD
					local validNotes:DWORD
					local i:DWORD
					local note:byte
					local currentTIme:real4
					local beatTime:real4
					local barTime:real4
					local noteInterval:real4

					; init variables
 00000107  C7 85 FFFFFEF8		mov inNoteSection, 0
	   00000000
 00000111  D9 EE			fldz ; currentTime 0

					; open file
 00000113  68 00013FBC R		push offset readA
 00000118  FF 75 08			push filename
 0000011B  E8 00000000 E		call fopen
 00000120  83 C4 08			add esp, 8

 00000123  85 C0			test eax, eax
 00000125  0F 84 00000292		jz FileOpenError
 0000012B  89 45 FC			mov filePtr, eax

 0000012E			ParseLineLoop:
					; read first line
 0000012E  FF 75 FC			push filePtr
 00000131  68 00000100			push 256
 00000136  FF B5 FFFFFEFC		push dword ptr [line]
 0000013C  E8 00000000 E		call fgets
 00000141  83 C4 0C			add esp, 12

 00000144  85 C0			test eax, eax
 00000146  0F 84 00000229		jz EndParse

					; remove \n
 0000014C  6A 0A			push 10
 0000014E  FF B5 FFFFFEFC		push dword ptr [line]
 00000154  E8 00000000 E		call strcspn
 00000159  83 C4 08			add esp, 8

 0000015C  0F B6 C8			movzx ecx, al
 0000015F  C6 84 0D			mov byte ptr [line + ecx], 0
	   FFFFFEFC
	   00032200

					; check bpm
 00000167  6A 04			push 4
 00000169  68 00013FBE R		push offset str_bpm
 0000016E  FF B5 FFFFFEFC		push dword ptr [line]
 00000174  E8 00000000 E		call strncmp
 00000179  83 C4 0C			add esp, 12

 0000017C  85 C0			test eax, eax
 0000017E  75 1A			jnz CheckOffset
					
 00000180  68 00000258 R		push offset msInfo.bpm
 00000185  68 00013FD9 R		push offset getBmp
 0000018A  FF B5 FFFFFEFC		push dword ptr [line]
 00000190  E8 FFFFFEB9			call parseString
 00000195  83 C4 0C			add esp, 12

 00000198  EB 94			jmp ParseLineLoop

					; check offset
					
 0000019A			CheckOffset:
 0000019A  6A 07			push 7
 0000019C  68 00013FC3 R		push offset str_offset
 000001A1  FF B5 FFFFFEFC		push dword ptr [line]
 000001A7  E8 00000000 E		call strncmp
 000001AC  83 C4 0C			add esp, 12

 000001AF  85 C0			test eax, eax
 000001B1  75 1E			jnz CheckStart
 000001B3  FF 35 0000025C R		push msInfo._offset
 000001B9  68 00013FE0 R		push offset getOffset
 000001BE  FF B5 FFFFFEFC		push dword ptr [line]
 000001C4  E8 FFFFFE85			call parseString
 000001C9  83 C4 0C			add esp, 12

 000001CC  E9 FFFFFF5D			jmp ParseLineLoop

 000001D1			CheckStart:
 000001D1  6A 06			push 6
 000001D3  68 00013FCB R		push offset str_start
 000001D8  FF B5 FFFFFEFC		push dword ptr [line]
 000001DE  E8 00000000 E		call strncmp
 000001E3  83 C4 0C			add esp, 12

 000001E6  85 C0			test eax, eax
 000001E8  75 0F			jnz CheckEnd
 000001EA  C7 85 FFFFFEF8		mov inNoteSection, 1
	   00000001
 000001F4  E9 FFFFFF35			jmp ParseLineLoop

 000001F9			CheckEnd:
 000001F9  6A 04			push 4
 000001FB  68 00013FD2 R		push offset str_end
 00000200  FF B5 FFFFFEFC		push dword ptr [line]
 00000206  E8 00000000 E		call strncmp
 0000020B  83 C4 0C			add esp, 12

 0000020E  85 C0			test eax, eax
 00000210  0F 84 0000015F		jz EndParse
					
 00000216  83 BD FFFFFEF8		cmp inNoteSection, 1
	   01
 0000021D  0F 85 FFFFFF0B		jnz ParseLineLoop

					; allocate notes
 00000223  FF B5 FFFFFEF0		push context
 00000229  FF 35 00013FD7 R		push dword ptr [comma]
 0000022F  FF B5 FFFFFEFC		push dword ptr [line]
 00000235  E8 00000000 E		call strtok_s
 0000023A  83 C4 0C			add esp, 12

 0000023D  85 C0			test eax, eax
 0000023F  0F 84 FFFFFEE9		jz ParseLineLoop

 00000245  89 85 FFFFFEF4		mov bar, eax

 0000024B			ProcessBar:
					; get bar length
 0000024B  FF B5 FFFFFEF4		push bar
 00000251  E8 00000000 E		call strlen
 00000256  83 C4 04			add esp, 4

 00000259  89 85 FFFFFEEC		mov barlength, eax

					; get valid notes
 0000025F  C7 85 FFFFFEE8		mov validNotes, 0
	   00000000
 00000269  8B 8D FFFFFEEC		mov ecx, barlength

 0000026F  8B 85 FFFFFEE4		mov eax, i
 00000275  33 C0			xor eax, eax
 00000277  89 85 FFFFFEE4		mov i, eax
 0000027D			CountValidNotes:
 0000027D  39 8D FFFFFEE4		cmp i, ecx
 00000283  7D 1E			jge ComputeNoteTiming
 00000285  0F B6 84 2D			movzx eax, byte ptr [bar + i]
	   FFFFFDD8
 0000028D  3C 30			cmp al, '0'
 0000028F  72 0A			jb SkipNote
 00000291  3C 32			cmp al, '2'
 00000293  77 06			ja SkipNote
 00000295  FF 85 FFFFFEE8		inc validNotes
 0000029B			SkipNote:
 0000029B  FF 85 FFFFFEE4		inc i
 000002A1  EB DA			jmp CountValidNotes

 000002A3			ComputeNoteTiming:
					; check if there are notes in the bar
 000002A3  8B 85 FFFFFEE8		mov eax, validNotes
 000002A9  83 F8 00			cmp eax, 0
 000002AC  0F 84 0000009A		je ProcessNextBar

					; calculate note time
 000002B2  D9 05 00000258 R		fld dword ptr [msInfo.bpm]
 000002B8  D9 E8			fld1
 000002BA  DE F9			fdiv
 000002BC  D8 0D 00013FEA R		fmul dword ptr [real_60]
 000002C2  D9 9D FFFFFED8		fstp beatTime	; beatTime = 60 / bpm
 000002C8  D8 0D 00013FEE R		fmul dword ptr [real_4]
 000002CE  D9 9D FFFFFED4		fstp barTime	; barTime = 4 * beatTime
 000002D4  D9 85 FFFFFED4		fld barTIme
 000002DA  D8 B5 FFFFFEE8		fdiv validNotes
 000002E0  D9 9D FFFFFED0		fstp noteInterval  ; noteInterval = barTime / validNotes

 000002E6  8B 85 FFFFFEE4		mov eax, i
 000002EC  33 C0			xor eax, eax
 000002EE  89 85 FFFFFEE4		mov i, eax

 000002F4			NoteLoop:
 000002F4  8B 85 FFFFFEE4		mov eax, i
 000002FA  3B 85 FFFFFEEC	    cmp eax, barlength
 00000300  7D 4A			jge ProcessNextBar
 00000302  0F B6 84 2D			movzx eax, byte ptr [bar + i]
	   FFFFFDD8
 0000030A  3C 30			cmp al, '0'
 0000030C  76 22			jbe SkipToNextNote
 0000030E  3C 32			cmp al, '2'
 00000310  77 1E			ja SkipToNextNote

					; store note and timing
 00000312  A1 0000A370 R		mov eax, totalNotes
 00000317  89 80 00000730 R		mov notes[eax], eax
 0000031D  D9 85 FFFFFEDC		fld currentTIme
 00000323  D9 1C 85			fstp noteTimings[eax*4]
	   0000A378 R
 0000032A  FF 05 0000A370 R		inc totalNotes

 00000330			SkipToNextNote:
 00000330  D9 85 FFFFFEDC	    fld currentTime
 00000336  D9 85 FFFFFED0		fld noteInterval
 0000033C  DE C1			fadd
 0000033E  D9 9D FFFFFEDC		fstp currentTime
 00000344  FF 85 FFFFFEE4		inc i
 0000034A  EB A8			jmp NoteLoop

 0000034C			ProcessNextBar:
 0000034C  FF B5 FFFFFEF0	    push context
 00000352  FF 35 00013FD7 R		push dword ptr [comma]
 00000358  6A 00			push 0
 0000035A  E8 00000000 E		call strtok_s
 0000035F  83 C4 0C			add esp, 12

 00000362  85 C0			test eax, eax
 00000364  0F 85 FFFFFEE1		jnz ProcessBar
 0000036A  89 85 FFFFFEF4		mov bar, eax

 00000370  E9 FFFFFDB9			jmp ParseLineLoop

 00000375			EndParse:
 00000375  FF 75 FC			push filePtr
 00000378  E8 00000000 E		call fclose
 0000037D  83 C4 04			add esp, 4

 00000380  D9 05 00000258 R		fld dword ptr [msInfo.bpm]
 00000386  D8 0D 00013FEE R		fmul dword ptr [real_4]
 0000038C  D9 E8			fld1
 0000038E  DE F9			fdiv
 00000390  D8 0D 00013FF2 R		fmul dword ptr [real_60000]
 00000396  D9 1D 0000A374 R		fstp noteSpawnInterval

 0000039C  A1 000000F2 R		mov eax, SCREEN_WIDTH
 000003A1  2D 000001C2			sub eax, HIT_POSITION_X

 000003A6  50				push eax
 000003A7  DB 04 24			fild dword ptr [esp]
 000003AA  83 C4 04			add esp, 4

 000003AD  D9 85 FFFFFED4		fld dword ptr [barTime]
 000003B3  DE F9			fdiv
 000003B5  D9 1D 00013FB8 R		fstp dword ptr [drumStep]

					ret

 000003BD			FileOpenError:
					ret
 000003BF			ParseNoteChart ENDP
main_game_page.asm(525) : warning A6004:procedure argument or local not referenced : note

				; 載入紅鼓紋理
 000003BF			@load_red_texture PROC
 000003BF  6A 00		    push 0
 000003C1  68 00000020 R	    push offset red_drum_path
 000003C6  E8 00000000 E	    call sfTexture_createFromFile
 000003CB  83 C4 08		    add esp, 8
 000003CE  A3 00000728 R	    mov redDrumTexture, eax
 000003D3  C3			    ret
 000003D4			@load_red_texture ENDP

				; 載入藍鼓紋理
 000003D4			@load_blue_texture PROC
 000003D4  6A 00		    push 0
 000003D6  68 00000039 R	    push offset blue_drum_path
 000003DB  E8 00000000 E	    call sfTexture_createFromFile
 000003E0  83 C4 08		    add esp, 8
 000003E3  A3 0000072C R	    mov blueDrumTexture, eax
 000003E8  C3			    ret
 000003E9			@load_blue_texture ENDP

				;full會return 1
 000003E9			isQueueFull PROC
 000003E9  A1 00000724 R	    mov eax, _size
 000003EE  83 F8 64		    cmp eax, MAX_DRUMS
 000003F1  74 05		    je queue_full
 000003F3  B8 00000000		    mov eax, 0

 000003F8			queue_full:
 000003F8  B8 00000001		    mov eax, 1
 000003FD  C3			    ret
 000003FE			isQueueFull ENDP

				;empty會return 1
 000003FE			isQueueEmpty PROC
 000003FE  A1 00000724 R	    mov eax, _size
 00000403  83 F8 00		    cmp eax, 0
 00000406  74 05		    je queue_empty
 00000408  B8 00000000		    mov eax, 0

 0000040D			queue_empty:
 0000040D  B8 00000001		    mov eax, 1
 00000412  C3			    ret
 00000413			isQueueEmpty ENDP

 00000413			enqueue PROC
 00000413  E8 FFFFFFD1		    call isQueueFull
 00000418  83 F8 01		    cmp eax, 1
 0000041B  74 4D		    je end_enqueue
				    
 0000041D  8D 3D 0000026C R	    lea edi, [drumQueue]

				    ; 計算擺放位置
 00000423  A1 00000720 R	    mov eax, rear      
 00000428  BA 0000000C		    mov edx, Drum_struct_size
 0000042D  F7 E2		    mul edx                  
 0000042F  03 F8		    add edi, eax 

 00000431  A1 00000116 R	    mov eax, current_drum.sprite      ; sprite
 00000436  8B 1D 0000011A R	    mov ebx, current_drum._type       ; dtype
 0000043C  8B 0D 0000011E R	    mov ecx, current_drum.targetTime  ; targetTime

				    ; 儲存drum資料
 00000442  89 07		    mov [edi], eax           ; sprite
 00000444  89 5F 04		    mov [edi + 4], ebx       ; dtype
 00000447  89 4F 08		    mov [edi + 8], ecx       ; targetTime
				    
				    ; 更新rear、size
 0000044A  FF 05 00000720 R	    inc rear
 00000450  A1 00000720 R	    mov eax, rear
 00000455  33 D2		    xor edx, edx
 00000457  B9 00000064		    mov ecx, MAX_DRUMS
 0000045C  F7 F1		    div ecx
 0000045E  89 15 00000720 R	    mov rear, edx
 00000464  FF 05 00000724 R	    inc _size

 0000046A			end_enqueue:
 0000046A  C3			    ret
 0000046B			enqueue ENDP

 0000046B			dequeue PROC
 0000046B  E8 FFFFFF8E		    call isQueueEmpty
 00000470  83 F8 01		    cmp eax, 1
 00000473  74 45		    je end_dequeue

				    ; 計算移除位置
 00000475  8D 3D 0000026C R	    lea edi, drumQueue
 0000047B  A1 0000071C R	    mov eax, front
 00000480  BA 0000000C		    mov edx, Drum_struct_size
 00000485  F7 E2		    mul edx
 00000487  03 F8		    add edi, eax

				    ; 讀取 drum
 00000489  8B 07		    mov eax, [edi]           ;sprite
 0000048B  8B 5F 04		    mov ebx, [edi + 4]       ;dtype
 0000048E  8B 4F 08		    mov ecx, [edi + 8]       ;targetTime

				    ;釋放資源
 00000491  50			    push eax
 00000492  E8 00000000 E	    call sfSprite_destroy
 00000497  83 C4 08		    add esp, 8

				    ; 更新front、size
 0000049A  FF 05 0000071C R	    inc front
 000004A0  A1 0000071C R	    mov eax, front
 000004A5  33 D2		    xor edx, edx
 000004A7  B9 00000064		    mov ecx, MAX_DRUMS
 000004AC  F7 F1		    div ecx
 000004AE  89 15 0000071C R	    mov front, edx
 000004B4  FF 0D 00000724 R	    dec _size

 000004BA			end_dequeue:
 000004BA  C3			    ret
 000004BB			dequeue ENDP

 000004BB			spawnDrum PROC             ;call前type要先load到eax，、targetTime要先load到xmm0
 000004BB  E8 FFFFFF29		    call isQueueFull
 000004C0  83 F8 01		    cmp eax, 1
 000004C3  74 43		    je end_spawn

 000004C5  A3 0000011A R	    mov current_drum._type, eax
 000004CA  F3/ 0F 11 05		    movss current_drum.targetTime, xmm0
	   0000011E R
 000004D2  E8 00000000 E	    call sfSprite_create
 000004D7  A3 00000116 R	    mov DWORD PTR [current_drum.sprite], eax

 000004DC  83 3D 0000011A R	    cmp current_drum._type, 1
	   01
 000004E3  74 05		    je spawnRed
 000004E5  E8 FFFFFEEA		    call @load_blue_texture

 000004EA			spawnRed:
 000004EA  E8 FFFFFED0		    call @load_red_texture

				    ;設定位置
 000004EF  68 000000C8		    push 200 ; Y 座標
 000004F4  FF 35 000000F2 R	    push SCREEN_WIDTH   ; X 座標
 000004FA  50			    push eax
 000004FB  E8 00000000 E	    call sfSprite_setPosition
 00000500  83 C4 0C		    add esp, 12

 00000503  E8 FFFFFF0B		    call enqueue

 00000508			end_spawn:
 00000508  C3			    ret
 00000509			spawnDrum ENDP

 00000509			updateDrums PROC
 00000509  83 3D 00000724 R	    cmp _size, 0
	   00
 00000510  0F 86 000000A5	    jbe end_update
				    
 00000516  8D 3D 0000026C R	    lea edi, [drumQueue]
 0000051C  A1 0000071C R	    mov eax, front
 00000521  BA 0000000C		    mov edx, Drum_struct_size
 00000526  F7 E2		    mul edx
 00000528  03 F8		    add edi, eax

 0000052A  FF 37		    push [edi]
 0000052C  E8 00000000 E	    call sfSprite_getPosition
 00000531  83 C4 08		    add esp, 8

 00000534  F3/ 0F 58 05		    addss xmm0, [real_85]
	   00014006 R
 0000053C  B8 000001C2		    mov eax, HIT_POSITION_X
 00000541  F3/ 0F 2A C8		    cvtsi2ss xmm1, eax
 00000545  0F 2F C1		    comiss xmm0, xmm1
 00000548  73 71		    jae end_update

 0000054A  E8 FFFFFF1C		    call dequeue

				    ;mov ecx, _size
				    ;mov ebx, front
 0000054F  8B 0D 00000724 R	    mov ecx, _size
 00000555  8B 15 0000071C R	    mov edx, front
 0000055B  89 15 0000020C R	    mov index, edx
 00000561			update_queue:
				    ; 讀取 drum
 00000561  8B 07		    mov eax, [edi]           ;sprite

 00000563  FF 30		    push [eax]
 00000565  E8 00000000 E	    call sfSprite_getPosition
 0000056A  83 C4 08		    add esp, 8
				    
 0000056D  F3/ 0F 11 0D		    movss spritePosY, xmm1
	   000000DE R
 00000575  F3/ 0F 10 0D		    movss xmm1, drumStep
	   00013FB8 R
 0000057D  F3/ 0F 5C C1		    subss xmm0, xmm1
 00000581  F3/ 0F 11 05		    movss spritePosX, xmm0
	   000000DA R

 00000589  FF 35 000000DE R	    push dword ptr [spritePosY] ; Y 座標
 0000058F  FF 35 000000DA R	    push dword ptr [spritePosX]   ; X 座標
 00000595  FF 30		    push [eax]
 00000597  E8 00000000 E	    call sfSprite_setPosition
 0000059C  83 C4 0C		    add esp, 12

 0000059F  FF 05 0000020C R	    inc index
 000005A5  A1 0000020C R	    mov eax, index
 000005AA  33 D2		    xor edx, edx
 000005AC  BB 00000064		    mov ebx, MAX_DRUMS
 000005B1  F7 F3		    div ebx
 000005B3  89 15 0000020C R	    mov index, edx
 000005B9  E2 A6		loop update_queue

 000005BB			end_update:
 000005BB  C3			    ret
 000005BC			updateDrums ENDP

 000005BC			setup_scoreText PROC
 000005BC  E8 00000000 E	    call sfText_create
 000005C1  A3 00000126 R	    mov DWORD PTR [scoreText], eax
				   
 000005C6  FF 35 00000122 R	    push font
 000005CC  A1 00000126 R	    mov eax, DWORD PTR [scoreText]
 000005D1  50			    push eax
 000005D2  E8 00000000 E	    call sfText_setFont
 000005D7  83 C4 08		    add esp, 8
				   
 000005DA  6A 18		    push 24
 000005DC  A1 00000126 R	    mov eax, DWORD PTR [scoreText]
 000005E1  50			    push eax
 000005E2  E8 00000000 E	    call sfText_setCharacterSize
 000005E7  83 C4 08		    add esp, 8
				   
 000005EA  FF 35 00000238 R	    push blackColor
 000005F0  A1 00000126 R	    mov eax, DWORD PTR [scoreText]
 000005F5  50			    push eax
 000005F6  E8 00000000 E	    call sfText_setFillColor
 000005FB  83 C4 08		    add esp, 8

 000005FE  F3/ 0F 10 05		    movss xmm0, DWORD PTR [scoreText_y]  
	   0000012E R
 00000606  F3/ 0F 10 0D		    movss xmm1, DWORD PTR [scoreText_x]    
	   0000012A R
 0000060E  83 EC 08		    sub esp, 8
 00000611  F3/ 0F 11 0C 24	    movss DWORD PTR [esp], xmm1          
 00000616  F3/ 0F 11 44 24	    movss DWORD PTR [esp+4], xmm0    
	   04
 0000061C  FF 35 00000126 R	    push DWORD PTR [scoreText]      
 00000622  E8 00000000 E	    call sfText_setPosition
 00000627  83 C4 0C		    add esp, 12
 0000062A  C3			    ret
 0000062B			setup_scoreText ENDP

 0000062B			createJudgementCircle PROC
 0000062B  E8 00000000 E	    call sfCircleShape_create
 00000630  A3 00000132 R	    mov dword ptr [judgementCircle], eax

				    ;mov ebx, 30
				    ;push ebx
				    ;push dword ptr 30
 00000635  6A 1E		    push 30
 00000637  FF 35 00000132 R	    push dword ptr [judgementCircle]
 0000063D  E8 00000000 E	    call sfCircleShape_setRadius
 00000642  83 C4 08		    add esp, 8

				    ;push dword ptr [HIT_POSITION_Y] ; Y 座標
				    ;push dword ptr [HIT_POSITION_X]   ; X 座標
				    ;push eax
				    ;call sfCircleShape_setPosition
				    ;add esp, 12

				    ;push Transparent
				    ;push eax
				    ;call sfCircleShape_setFillColor
				    ;add esp, 8

				    ;push 2
				    ;push eax
				    ;call sfCircleShape_setOutlineThickness
				    ;add esp, 8

				    ;push blackColor
				    ;push eax
				    ;call sfCircleShape_setOutlineColor
				    ;add esp, 8
 00000645  C3			    ret
 00000646			createJudgementCircle ENDP

 00000646			setup_countdownText PROC
 00000646  E8 00000000 E	    call sfText_create
 0000064B  A3 00000136 R	    mov DWORD PTR [countdownText], eax
				   
 00000650  FF 35 00000122 R	    push font
 00000656  A1 00000136 R	    mov eax, DWORD PTR [countdownText]
 0000065B  50			    push eax
 0000065C  E8 00000000 E	    call sfText_setFont
 00000661  83 C4 08		    add esp, 8
				   
 00000664  6A 48		    push 72
 00000666  A1 00000136 R	    mov eax, DWORD PTR [countdownText]
 0000066B  50			    push eax
 0000066C  E8 00000000 E	    call sfText_setCharacterSize
 00000671  83 C4 08		    add esp, 8
				   
 00000674  FF 35 00000238 R	    push blackColor
 0000067A  A1 00000136 R	    mov eax, DWORD PTR [countdownText]
 0000067F  50			    push eax
 00000680  E8 00000000 E	    call sfText_setFillColor
 00000685  83 C4 08		    add esp, 8

 00000688  D9 05 000000F2 R	    fld dword ptr [SCREEN_WIDTH]    
 0000068E  D9 E8		    fld1                            
 00000690  DE F9		    fdiv                        
 00000692  D8 25 00013FF6 R	    fsub dword ptr [real_36]  
 00000698  D9 1D 0000013A R	    fstp dword ptr [countdownText_x] 

				    ; 計算 TEXT_POSITION_Y
 0000069E  D9 05 000000F6 R	    fld dword ptr [SCREEN_HEIGHT]    
 000006A4  D9 E8		    fld1                            
 000006A6  DE F9		    fdiv                            
 000006A8  D8 25 00013FF6 R	    fsub dword ptr [real_36]        
 000006AE  D9 1D 0000013E R	    fstp dword ptr [countdownText_y] 

 000006B4  F3/ 0F 10 05		    movss xmm0, DWORD PTR [countdownText_y]  
	   0000013E R
 000006BC  F3/ 0F 10 0D		    movss xmm1, DWORD PTR [countdownText_x]    
	   0000013A R
 000006C4  83 EC 08		    sub esp, 8
 000006C7  F3/ 0F 11 0C 24	    movss DWORD PTR [esp], xmm1          
 000006CC  F3/ 0F 11 44 24	    movss DWORD PTR [esp+4], xmm0    
	   04
 000006D2  FF 35 00000136 R	    push DWORD PTR [countdownText]      
 000006D8  E8 00000000 E	    call sfText_setPosition
 000006DD  83 C4 0C		    add esp, 12

 000006E0  C3			    ret
 000006E1			setup_countdownText ENDP

 000006E1			drawUI PROC window:DWORD
				    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;snprintf
 000006E4  68 00000144 R	    push offset scoreString
 000006E9  A1 00000126 R	    mov eax, DWORD PTR [scoreText]
 000006EE  50			    push eax
 000006EF  E8 00000000 E	    call sfText_setString
 000006F4  83 C4 08		    add esp, 8

				    ;push 0
				    ;mov eax, DWORD PTR [judgementCircle]
				    ;push eax
				    ;mov ecx, DWORD PTR [window]
				    ;push ecx
				    ;call sfRenderWindow_drawCircleShape
				    ;add esp, 12                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;error

 000006F7  6A 00		    push 0
 000006F9  FF 35 00000126 R	    push DWORD PTR [scoreText]
 000006FF  FF 75 08		    push DWORD PTR [window]
 00000702  E8 00000000 E	    call sfRenderWindow_drawText
 00000707  83 C4 0C		    add esp, 12
				    ret
 0000070C			drawUI ENDP

 0000070C			main_game_page PROC window:DWORD, musicPath:dword, noteChart:dword
				    LOCAL currentNoteIndex: DWORD
				    LOCAL gameStartTime: REAL4
				    LOCAL gameStarted: DWORD
				    LOCAL countdown: DWORD
				    LOCAL currentTime: REAL4

 00000712  6A 3C		    push 60
 00000714  FF 75 08		    push dword ptr [window]
 00000717  E8 00000000 E	    call sfWindow_setFramerateLimit
 0000071C  83 C4 08		    add esp, 8

				    ; 載入背景
 0000071F  E8 FFFFF8F4		    call @load_bg
 00000724  85 C0		    test eax, eax
 00000726  0F 84 000002C6	    jz @exit_program

				    ; 載入紅鼓紋理
 0000072C  E8 FFFFFC8E		    call @load_red_texture
 00000731  85 C0		    test eax, eax
 00000733  0F 84 000002B9	    jz @exit_program

				    ; 載入藍鼓紋理
 00000739  E8 FFFFFC96		    call @load_blue_texture
 0000073E  85 C0		    test eax, eax
 00000740  0F 84 000002AC	    jz @exit_program

				    ;載入字體
 00000746  68 000000AA R	    push offset font_path
 0000074B  E8 00000000 E	    call sfFont_createFromFile
 00000750  83 C4 04		    add esp, 4
 00000753  A3 00000122 R	    mov font, eax

				    ;初始化文字
 00000758  E8 FFFFFE5F		    call setup_scoreText
 0000075D  85 C0		    test eax, eax
 0000075F  0F 84 0000028D	    jz @exit_program

				    ;創建判定圓
				    ;call createJudgementCircle
				    ;test eax, eax
				    ;jz @exit_program

				    ;倒數計時文字
 00000765  E8 FFFFFEDC		    call setup_countdownText
 0000076A  85 C0		    test eax, eax
 0000076C  0F 84 00000280	    jz @exit_program

				    ;載入音樂
 00000772  FF 75 0C		    push dword ptr [musicPath]
 00000775  E8 FFFFF886		    call game_play_music
 0000077A  83 C4 04		    add esp, 4
 0000077D  85 C0		    test eax, eax
 0000077F  0F 84 0000026D	    jz @exit_program

 00000785  6A 00		    push 0
 00000787  FF 35 00000112 R	    push bgMusic
 0000078D  E8 00000000 E	    call sfMusic_setLoop
 00000792  83 C4 08		    add esp, 8

				    ;載入譜面
 00000795  FF 75 10		    push dword ptr [noteChart]
 00000798  E8 FFFFF961			call ParseNoteChart
 0000079D  83 C4 04			add esp, 4

				    ; 初始化計時器
 000007A0  E8 00000000 E	    call sfClock_create
 000007A5  85 C0		    test eax, eax
 000007A7  0F 84 00000245	    jz @exit_program
 000007AD  A3 00000210 R	    mov dword ptr [spawnClock], eax

 000007B2  C7 45 FC		    mov currentNoteIndex, 0
	   00000000
 000007B9  B8 00000003		    mov eax, INITIAL_DELAY 
 000007BE  F3/ 0F 2A C0		    cvtsi2ss xmm0, eax
 000007C2  F3/ 0F 11 45		    movss gameStartTime, xmm0
	   F8
 000007C7  C7 45 F4		    mov gameStarted, 0
	   00000000

 000007CE			@main_loop:

				    ; 檢查音樂是否停止
				    ;push bgMusic
				    ;call sfMusic_getStatus
				    ;add esp, 4
				    ;cmp eax, 0
				    ;je to_end_page

				    ;檢查譜面是否跑完
				    ;mov eax, currentNoteIndex
				    ;cmp eax, totalNotes
				    ;jb check_window
				    ;call isQueueEmpty
				    ;cmp eax, 1
				    ;je to_end_page

 000007CE			check_window:
				    ; 檢查視窗是否開啟
 000007CE  8B 45 08		    mov eax, DWORD PTR [window]
 000007D1  50			    push eax
 000007D2  E8 00000000 E	    call sfRenderWindow_isOpen
 000007D7  83 C4 04		    add esp, 4
 000007DA  85 C0		    test eax, eax
 000007DC  0F 84 00000210	    je @exit_program

				    ; 更新計時器
 000007E2  FF 35 00000210 R	    push dword ptr [spawnClock]
 000007E8  E8 00000000 E	    call sfClock_getElapsedTime
 000007ED  83 C4 04		    add esp, 4
				    
 000007F0  F3/ 0F 2A C0		    cvtsi2ss xmm0, eax
 000007F4  F3/ 0F 10 0D		    movss xmm1, [real_1000000] 
	   00013FFA R
 000007FC  F3/ 0F 5E C1		    divss xmm0, xmm1
 00000800  F3/ 0F 10 45		    movss xmm0, currentTime
	   EC

				    ;fld dword ptr [real_1000000]
				    ;fild dword ptr [eax]
				    ;fdiv st(0), st(1)
				    ;fstp dword ptr [currentTime]

				    ;開始前倒數
 00000805  8B 45 F4		    mov eax, gameStarted
 00000808  83 F8 01		    cmp eax, 1
 0000080B  0F 84 0000009C	    je game_start
 00000811  B8 00000003		    mov eax, INITIAL_DELAY 
 00000816  F3/ 0F 2A C0		    cvtsi2ss xmm0, eax
 0000081A  F3/ 0F 10 4D		    movss xmm1, currentTime
	   EC
 0000081F  F3/ 0F 5C C1		    subss xmm0, xmm1
 00000823  F3/ 0F 58 05		    addss xmm0, [real_1]
	   00013FFE R
 0000082B  F3/ 0F 2C C0		    cvttss2si eax, xmm0 
 0000082F  89 45 F0		    mov countdown, eax

				    ;fild dword ptr [INITIAL_DELAY]
				    ;fld dword ptr [currentTime]
				    ;fsub                        
				    ;fld1                           
				    ;fadd                              
				    ;fistp dword ptr [countdown]

 00000832  83 F8 00		    cmp eax, 0
 00000835  76 13		    jbe set_game_start
				    ;;;;;;;;;;;;;;;;;sprintf_s
 00000837  68 00000142 R	    push offset countdownStr
 0000083C  A1 00000136 R	    mov eax, DWORD PTR [countdownText]
 00000841  50			    push eax
 00000842  E8 00000000 E	    call sfText_setString
 00000847  83 C4 08		    add esp, 8
				    
 0000084A			set_game_start:
 0000084A  FF 35 00000112 R	    push bgMusic
 00000850  E8 00000000 E	    call sfMusic_getStatus
 00000855  83 C4 04		    add esp, 4
 00000858  83 F8 01		    cmp eax, 1
 0000085B  74 2D		    je clock_restart
 0000085D  F3/ 0F 10 45		    movss xmm0, currentTime
	   EC
 00000862  F3/ 0F 10 0D		    movss xmm1, msInfo._offset
	   0000025C R
 0000086A  0F 2F C1		    comiss xmm0, xmm1
 0000086D  72 1B		    jb clock_restart
 0000086F  F3/ 0F 10 05		    movss xmm0, [real_0]
	   00014002 R
 00000877  0F 2F C8		    comiss xmm1, xmm0
 0000087A  76 0E		    jbe clock_restart
 0000087C  FF 35 00000112 R	    push bgMusic
 00000882  E8 00000000 E	    call sfMusic_play
 00000887  83 C4 04		    add esp, 4

 0000088A			clock_restart:
 0000088A  FF 35 00000210 R	    push dword ptr [spawnClock]
 00000890  E8 00000000 E	    call sfClock_restart
 00000895  83 C4 04		    add esp, 4
 00000898  D9 05 00014002 R	    fld dword ptr [real_0]
 0000089E  D9 5D F8		    fstp dword ptr [gameStartTime]
 000008A1  F3/ 0F 10 45		    movss xmm0, gameStartTime
	   F8
 000008A6  C7 45 F4		    mov gameStarted, 1
	   00000001
				    
 000008AD			game_start:
 000008AD  FF 35 00000112 R	    push bgMusic
 000008B3  E8 00000000 E	    call sfMusic_getStatus
 000008B8  83 C4 04		    add esp, 4
 000008BB  83 F8 01		    cmp eax, 1
 000008BE  74 28		    je event_loop
 000008C0  F3/ 0F 10 45		    movss xmm0, currentTime
	   EC
 000008C5  F3/ 0F 10 0D		    movss xmm1, msInfo._offset
	   0000025C R
 000008CD  F3/ 0F 5C 0D		    subss xmm1, [real_0]
	   00014002 R
 000008D5  0F 2F C1		    comiss xmm0, xmm1
 000008D8  72 0E		    jb event_loop
 000008DA  FF 35 00000112 R	    push bgMusic
 000008E0  E8 00000000 E	    call sfMusic_play
 000008E5  83 C4 04		    add esp, 4

 000008E8			event_loop:

 000008E8  83 7D F4 01		    cmp gameStarted, 1
 000008EC  75 5C		    jne draw_notes
				    ; 更新計時器
 000008EE  FF 35 00000210 R	    push dword ptr [spawnClock]
 000008F4  E8 00000000 E	    call sfClock_getElapsedTime
 000008F9  83 C4 04		    add esp, 4
				    
 000008FC  F3/ 0F 2A C0		    cvtsi2ss xmm0, eax
 00000900  F3/ 0F 10 0D		    movss xmm1, [real_1000000] 
	   00013FFA R
 00000908  F3/ 0F 5E C1		    divss xmm0, xmm1
 0000090C  F3/ 0F 10 45		    movss xmm0, currentTime
	   EC

 00000911			spawn_loop:
 00000911  8B 45 FC		    mov eax, currentNoteIndex
 00000914  3B 05 0000A370 R	    cmp eax, totalNotes
 0000091A  73 29		    jae update
 0000091C  F3/ 0F 10 45		    movss xmm0, [currentTime]  
	   EC
 00000921  8B 45 FC		    mov eax, currentNoteIndex
 00000924  F3/ 0F 10 0C 85	    movss xmm1, [noteTimings + eax*4] 
	   0000A378 R
 0000092D  0F 2F C1		    comiss xmm0, xmm1 
 00000930  72 13		    jb update
 00000932  83 BD 0000072C R	    cmp notes[currentNoteIndex], 0
	   00
 00000939  74 05		    je increase_index
				    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;spawn
 0000093B  E8 FFFFFB7B		    call spawnDrum
 00000940			increase_index:
 00000940  FF 45 FC		    inc currentNoteIndex
 00000943  EB CC		    jmp spawn_loop
				    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;update
 00000945			update:
 00000945  E8 FFFFFBBF		    call updateDrums

 0000094A			draw_notes:
				    ; 清除視窗
 0000094A  FF 35 00000238 R	    push blackColor
 00000950  FF 75 08		    push window
 00000953  E8 00000000 E	    call sfRenderWindow_clear
 00000958  83 C4 08		    add esp, 8

				    ; 繪製背景
 0000095B  6A 00		    push 0
 0000095D  A1 0000010E R	    mov eax, DWORD PTR [bgSprite]
 00000962  50			    push eax
 00000963  8B 4D 08		    mov ecx, DWORD PTR [window]
 00000966  51			    push ecx
 00000967  E8 00000000 E	    call sfRenderWindow_drawSprite
 0000096C  83 C4 0C		    add esp, 12

 0000096F  8B 0D 00000724 R	    mov ecx, _size
 00000975  8B 15 0000071C R	    mov edx, front
 0000097B  89 15 0000020C R	    mov index, edx

 00000981			draw_loop:
				    ; 繪製鼓

				    ;push 0
				    ;mov eax, index
				    ;push drumQueue[eax].sprite
				    ;push DWORD PTR [window]
				    ;call sfRenderWindow_drawSprite
				    ;add esp, 12                    ;;;;;;;;;;;;;;;;;;;;;;;;;;error here

 00000981  FF 05 0000020C R	    inc index
 00000987  A1 0000020C R	    mov eax, index
 0000098C  33 D2		    xor edx, edx
 0000098E  BB 00000064		    mov ebx, MAX_DRUMS
 00000993  F7 F3		    div ebx
 00000995  89 15 0000020C R	    mov index, edx
 0000099B  49			    dec ecx
 0000099C  83 F9 00		    cmp ecx, 0
 0000099F  74 00		    je draw_countdown


 000009A1			draw_countdown:
 000009A1  83 7D F4 01		    cmp gameStarted, 1
 000009A5  74 00		    je draw_UI

 000009A7			draw_UI:
 000009A7  FF 75 08		    push dword ptr [window]
 000009AA  E8 FFFFFD32		    call drawUI
 000009AF  83 C4 04		    add esp, 4

 000009B2			display_window:
				    ; 顯示視窗
 000009B2  8B 45 08		    mov eax, window
 000009B5  50			    push eax
 000009B6  E8 00000000 E	    call sfRenderWindow_display
 000009BB  83 C4 04		    add esp, 4

 000009BE  E9 FFFFFE0B		jmp @main_loop

				; 跳轉結算畫面
 000009C3			to_end_page:
				    ;遊戲結束要切換到結尾畫面
 000009C3  FF 35 00000106 R	    push score    
 000009C9  FF 35 00000102 R	    push miss_count    
 000009CF  FF 35 000000FE R	    push good_count   
 000009D5  FF 35 000000FA R	    push great_count    
 000009DB  FF 75 08		    push window        
 000009DE  E8 00000000 E	    call end_game_page
 000009E3  83 C4 14		    add esp, 20
 000009E6  C7 05 00000000 E	    mov DWORD PTR [currentPage], 2
	   00000002
 000009F0  EB 00		    jmp @exit_program

				;釋放資源
 000009F2			@exit_program:

 000009F2			dequeue_loop:
 000009F2  E8 FFFFFA07		    call isQueueEmpty
 000009F7  83 F8 01		    cmp eax, 1
 000009FA  74 07		    je release
 000009FC  E8 FFFFFA6A		    call dequeue
 00000A01  EB EF		jmp dequeue_loop

 00000A03			release:
 00000A03  FF 35 0000010E R	    push bgSprite
 00000A09  E8 00000000 E	    call sfSprite_destroy
 00000A0E  83 C4 04		    add esp, 4

 00000A11  FF 35 0000010A R	    push bgTexture
 00000A17  E8 00000000 E	    call sfTexture_destroy
 00000A1C  83 C4 04		    add esp, 4

 00000A1F  FF 35 00000728 R	    push redDrumTexture
 00000A25  E8 00000000 E	    call sfTexture_destroy
 00000A2A  83 C4 04		    add esp, 4

 00000A2D  FF 35 0000072C R	    push blueDrumTexture
 00000A33  E8 00000000 E	    call sfTexture_destroy
 00000A38  83 C4 04		    add esp, 4

 00000A3B  FF 35 00000210 R	    push dword ptr [spawnClock]
 00000A41  E8 00000000 E	    call sfClock_destroy
 00000A46  83 C4 04		    add esp, 4

 00000A49  FF 35 00000112 R	    push bgMusic
 00000A4F  E8 00000000 E	    call sfMusic_destroy
 00000A54  83 C4 04		    add esp, 4
				    
				    ret
 00000A59			main_game_page ENDP

				END main_game_page
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/22/24 06:23:42
main_game_page.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Drum . . . . . . . . . . . . . .	 0000000C
  sprite . . . . . . . . . . . .	 00000000	 DWord
  _type  . . . . . . . . . . . .	 00000004	 DWord
  targetTime . . . . . . . . . .	 00000008	 DWord
GameStats  . . . . . . . . . . .	 00000018
  great_count  . . . . . . . . .	 00000000	 DWord
  good_count . . . . . . . . . .	 00000004	 DWord
  miss_count . . . . . . . . . .	 00000008	 DWord
  current_combo  . . . . . . . .	 0000000C	 DWord
  max_combo  . . . . . . . . . .	 00000010	 DWord
  total_score  . . . . . . . . .	 00000014	 DWord
MusicInfo  . . . . . . . . . . .	 00000014
  bpm  . . . . . . . . . . . . .	 00000000	 DWord
  _offset  . . . . . . . . . . .	 00000004	 DWord
  spawnTime  . . . . . . . . . .	 00000008	 DWord
  currentBar . . . . . . . . . .	 0000000C	 DWord
  notesInBar . . . . . . . . . .	 00000010	 DWord
key  . . . . . . . . . . . . . .	 00000014
  code . . . . . . . . . . . . .	 00000000	 DWord
  alt  . . . . . . . . . . . . .	 00000004	 DWord
  control  . . . . . . . . . . .	 00000008	 DWord
  shift  . . . . . . . . . . . .	 0000000C	 DWord
  system . . . . . . . . . . . .	 00000010	 DWord
mouseButton  . . . . . . . . . .	 0000000C
  button . . . . . . . . . . . .	 00000000	 DWord
  x  . . . . . . . . . . . . . .	 00000004	 DWord
  y  . . . . . . . . . . . . . .	 00000008	 DWord
sfColor  . . . . . . . . . . . .	 00000004
  r  . . . . . . . . . . . . . .	 00000000	 Byte
  g  . . . . . . . . . . . . . .	 00000001	 Byte
  b  . . . . . . . . . . . . . .	 00000002	 Byte
  a  . . . . . . . . . . . . . .	 00000003	 Byte
sfEvent  . . . . . . . . . . . .	 00000030
  _type  . . . . . . . . . . . .	 00000000	 DWord
  _size  . . . . . . . . . . . .	 00000004	 DWord
  mouse  . . . . . . . . . . . .	 00000008	 
  _key . . . . . . . . . . . . .	 00000014	 
  mouseMove  . . . . . . . . . .	 00000028	 QWord
sfFloatRect  . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  _width . . . . . . . . . . . .	 00000008	 DWord
  height . . . . . . . . . . . .	 0000000C	 DWord
sfTime . . . . . . . . . . . . .	 00000004
  microseconds . . . . . . . . .	 00000000	 DWord
sfVector2f . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVector2i . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
sfVideoMode  . . . . . . . . . .	 0000000C
  _width . . . . . . . . . . . .	 00000000	 DWord
  height . . . . . . . . . . . .	 00000004	 DWord
  bpp  . . . . . . . . . . . . .	 00000008	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 0001400A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A59 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@load_bg . . . . . . . . . . . .	P Near	 00000018 _TEXT	Length= 00000036 Public C
@load_blue_texture . . . . . . .	P Near	 000003D4 _TEXT	Length= 00000015 Public C
@load_red_texture  . . . . . . .	P Near	 000003BF _TEXT	Length= 00000015 Public C
ParseNoteChart . . . . . . . . .	P Near	 000000FE _TEXT	Length= 000002C1 Public C
  filename . . . . . . . . . . .	DWord	 bp + 00000008
  filePtr  . . . . . . . . . . .	DWord	 bp - 00000004
  line . . . . . . . . . . . . .	Byte	 bp - 00000104
  inNoteSection  . . . . . . . .	DWord	 bp - 00000108
  bar  . . . . . . . . . . . . .	DWord	 bp - 0000010C
  context  . . . . . . . . . . .	DWord	 bp - 00000110
  barlength  . . . . . . . . . .	DWord	 bp - 00000114
  validNotes . . . . . . . . . .	DWord	 bp - 00000118
  i  . . . . . . . . . . . . . .	DWord	 bp - 0000011C
  note . . . . . . . . . . . . .	Byte	 bp - 0000011D
  currentTIme  . . . . . . . . .	DWord	 bp - 00000124
  beatTime . . . . . . . . . . .	DWord	 bp - 00000128
  barTime  . . . . . . . . . . .	DWord	 bp - 0000012C
  noteInterval . . . . . . . . .	DWord	 bp - 00000130
  ParseLineLoop  . . . . . . . .	L Near	 0000012E _TEXT	
  CheckOffset  . . . . . . . . .	L Near	 0000019A _TEXT	
  CheckStart . . . . . . . . . .	L Near	 000001D1 _TEXT	
  CheckEnd . . . . . . . . . . .	L Near	 000001F9 _TEXT	
  ProcessBar . . . . . . . . . .	L Near	 0000024B _TEXT	
  CountValidNotes  . . . . . . .	L Near	 0000027D _TEXT	
  SkipNote . . . . . . . . . . .	L Near	 0000029B _TEXT	
  ComputeNoteTiming  . . . . . .	L Near	 000002A3 _TEXT	
  NoteLoop . . . . . . . . . . .	L Near	 000002F4 _TEXT	
  SkipToNextNote . . . . . . . .	L Near	 00000330 _TEXT	
  ProcessNextBar . . . . . . . .	L Near	 0000034C _TEXT	
  EndParse . . . . . . . . . . .	L Near	 00000375 _TEXT	
  FileOpenError  . . . . . . . .	L Near	 000003BD _TEXT	
createJudgementCircle  . . . . .	P Near	 0000062B _TEXT	Length= 0000001B Public C
dequeue  . . . . . . . . . . . .	P Near	 0000046B _TEXT	Length= 00000050 Public C
  end_dequeue  . . . . . . . . .	L Near	 000004BA _TEXT	
drawUI . . . . . . . . . . . . .	P Near	 000006E1 _TEXT	Length= 0000002B Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
enqueue  . . . . . . . . . . . .	P Near	 00000413 _TEXT	Length= 00000058 Public C
  end_enqueue  . . . . . . . . .	L Near	 0000046A _TEXT	
game_play_music  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000018 Public C
  musicPath  . . . . . . . . . .	DWord	 bp + 00000008
isQueueEmpty . . . . . . . . . .	P Near	 000003FE _TEXT	Length= 00000015 Public C
  queue_empty  . . . . . . . . .	L Near	 0000040D _TEXT	
isQueueFull  . . . . . . . . . .	P Near	 000003E9 _TEXT	Length= 00000015 Public C
  queue_full . . . . . . . . . .	L Near	 000003F8 _TEXT	
main_game_page . . . . . . . . .	P Near	 0000070C _TEXT	Length= 0000034D Public C
  window . . . . . . . . . . . .	DWord	 bp + 00000008
  musicPath  . . . . . . . . . .	DWord	 bp + 0000000C
  noteChart  . . . . . . . . . .	DWord	 bp + 00000010
  currentNoteIndex . . . . . . .	DWord	 bp - 00000004
  gameStartTime  . . . . . . . .	DWord	 bp - 00000008
  gameStarted  . . . . . . . . .	DWord	 bp - 0000000C
  countdown  . . . . . . . . . .	DWord	 bp - 00000010
  currentTime  . . . . . . . . .	DWord	 bp - 00000014
  @main_loop . . . . . . . . . .	L Near	 000007CE _TEXT	
  check_window . . . . . . . . .	L Near	 000007CE _TEXT	
  set_game_start . . . . . . . .	L Near	 0000084A _TEXT	
  clock_restart  . . . . . . . .	L Near	 0000088A _TEXT	
  game_start . . . . . . . . . .	L Near	 000008AD _TEXT	
  event_loop . . . . . . . . . .	L Near	 000008E8 _TEXT	
  spawn_loop . . . . . . . . . .	L Near	 00000911 _TEXT	
  increase_index . . . . . . . .	L Near	 00000940 _TEXT	
  update . . . . . . . . . . . .	L Near	 00000945 _TEXT	
  draw_notes . . . . . . . . . .	L Near	 0000094A _TEXT	
  draw_loop  . . . . . . . . . .	L Near	 00000981 _TEXT	
  draw_countdown . . . . . . . .	L Near	 000009A1 _TEXT	
  draw_UI  . . . . . . . . . . .	L Near	 000009A7 _TEXT	
  display_window . . . . . . . .	L Near	 000009B2 _TEXT	
  to_end_page  . . . . . . . . .	L Near	 000009C3 _TEXT	
  @exit_program  . . . . . . . .	L Near	 000009F2 _TEXT	
  dequeue_loop . . . . . . . . .	L Near	 000009F2 _TEXT	
  release  . . . . . . . . . . .	L Near	 00000A03 _TEXT	
parseString  . . . . . . . . . .	P Near	 0000004E _TEXT	Length= 000000B0 Public C
  next_format  . . . . . . . . .	L Near	 0000005F _TEXT	
  skip_format  . . . . . . . . .	L Near	 0000007B _TEXT	
  parse_int  . . . . . . . . . .	L Near	 0000007E _TEXT	
  parse_int_loop . . . . . . . .	L Near	 00000083 _TEXT	
  parse_done_int . . . . . . . .	L Near	 00000095 _TEXT	
  parse_string . . . . . . . . .	L Near	 00000098 _TEXT	
  parse_string_loop  . . . . . .	L Near	 0000009B _TEXT	
  parse_done_str . . . . . . . .	L Near	 000000A3 _TEXT	
  parse_float  . . . . . . . . .	L Near	 000000A8 _TEXT	
  parse_float_loop . . . . . . .	L Near	 000000B4 _TEXT	
  parse_fraction . . . . . . . .	L Near	 000000CA _TEXT	
  parse_done_float . . . . . . .	L Near	 000000DD _TEXT	
  parse_error  . . . . . . . . .	L Near	 000000F1 _TEXT	
  parse_done . . . . . . . . . .	L Near	 000000F5 _TEXT	
  parse_exit . . . . . . . . . .	L Near	 000000FA _TEXT	
setup_countdownText  . . . . . .	P Near	 00000646 _TEXT	Length= 0000009B Public C
setup_scoreText  . . . . . . . .	P Near	 000005BC _TEXT	Length= 0000006F Public C
spawnDrum  . . . . . . . . . . .	P Near	 000004BB _TEXT	Length= 0000004E Public C
  spawnRed . . . . . . . . . . .	L Near	 000004EA _TEXT	
  end_spawn  . . . . . . . . . .	L Near	 00000508 _TEXT	
updateDrums  . . . . . . . . . .	P Near	 00000509 _TEXT	Length= 000000B3 Public C
  update_queue . . . . . . . . .	L Near	 00000561 _TEXT	
  end_update . . . . . . . . . .	L Near	 000005BB _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CloseHandle@4  . . . . . . . . .	L Near	 00000000 FLAT	External C
CreateFileA@28 . . . . . . . . .	L Near	 00000000 FLAT	External C
Drum_struct_size . . . . . . . .	Number	 0000000Ch   
ExitProcess@4  . . . . . . . . .	L Near	 00000000 FLAT	External C
FILE_ATTRIBUTE_NORMAL  . . . . .	Text   	 0x00000080
FILE_SHARE_READ  . . . . . . . .	Text   	 0x00000001
GENERIC_READ . . . . . . . . . .	Text   	 0x80000000
GOOD_THRESHOLD . . . . . . . . .	Number	 0000001Eh   
GREAT_THRESHOLD  . . . . . . . .	Number	 00000004h   
GetLastError@0 . . . . . . . . .	L Near	 00000000 FLAT	External C
GetStdHandle@4 . . . . . . . . .	L Near	 00000000 FLAT	External C
HIT_POSITION_X . . . . . . . . .	Number	 000001C2h   
HIT_POSITION_Y . . . . . . . . .	Number	 000000E1h   
INITIAL_DELAY  . . . . . . . . .	Number	 00000003h   
MAX_DRUMS  . . . . . . . . . . .	Number	 00000064h   
MAX_LINE_LENGTH  . . . . . . . .	Number	 000003E8h   
MAX_NOTES  . . . . . . . . . . .	Number	 00002710h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
ReadFile@20  . . . . . . . . . .	L Near	 00000000 FLAT	External C
SCREEN_HEIGHT  . . . . . . . . .	DWord	 000000F6 _DATA	
SCREEN_WIDTH . . . . . . . . . .	DWord	 000000F2 _DATA	
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
Transparent  . . . . . . . . . .	sfColor	 0000023C _DATA	
WriteConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External C
WriteFile@20 . . . . . . . . . .	L Near	 00000000 FLAT	External C
__stdio_common_vsprintf_s  . . .	L Near	 00000000 FLAT	External C
__stdio_common_vsscanf . . . . .	L Near	 00000000 FLAT	External C
_size  . . . . . . . . . . . . .	DWord	 00000724 _DATA	
bgSprite . . . . . . . . . . . .	DWord	 0000010E _DATA	
bgTexture  . . . . . . . . . . .	DWord	 0000010A _DATA	
bg_path  . . . . . . . . . . . .	Byte	 00000000 _DATA	
bgmusic  . . . . . . . . . . . .	DWord	 00000112 _DATA	
blackColor . . . . . . . . . . .	sfColor	 00000238 _DATA	
blueDrumTexture  . . . . . . . .	DWord	 0000072C _DATA	
blue_drum_path . . . . . . . . .	Byte	 00000039 _DATA	
comma  . . . . . . . . . . . . .	Byte	 00013FD7 _DATA	
const_1000 . . . . . . . . . . .	DWord	 000000E6 _DATA	
const_225  . . . . . . . . . . .	DWord	 000000EA _DATA	
const_60000  . . . . . . . . . .	DWord	 000000E2 _DATA	
countdownStr . . . . . . . . . .	Byte	 00000142 _DATA	
countdownText_x  . . . . . . . .	DWord	 0000013A _DATA	
countdownText_y  . . . . . . . .	DWord	 0000013E _DATA	
countdownText  . . . . . . . . .	DWord	 00000136 _DATA	
currentPage  . . . . . . . . . .	DWord	 00000000 FLAT	External C
current_drum . . . . . . . . . .	Drum	 00000116 _DATA	
drumQueue  . . . . . . . . . . .	Drum	 0000026C _DATA	
drumStep . . . . . . . . . . . .	DWord	 00013FB8 _DATA	
end_game_page  . . . . . . . . .	L Near	 00000000 FLAT	External C
fclose . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
fgets  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
font_path  . . . . . . . . . . .	Byte	 000000AA _DATA	
font . . . . . . . . . . . . . .	DWord	 00000122 _DATA	
fopen  . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
four . . . . . . . . . . . . . .	DWord	 000000EE _DATA	
front  . . . . . . . . . . . . .	DWord	 0000071C _DATA	
getBmp . . . . . . . . . . . . .	Byte	 00013FD9 _DATA	
getOffset  . . . . . . . . . . .	Byte	 00013FE0 _DATA	
good_count . . . . . . . . . . .	DWord	 000000FE _DATA	
great_count  . . . . . . . . . .	DWord	 000000FA _DATA	
index  . . . . . . . . . . . . .	DWord	 0000020C _DATA	
judgementCircle  . . . . . . . .	DWord	 00000132 _DATA	
miss_count . . . . . . . . . . .	DWord	 00000102 _DATA	
msInfo . . . . . . . . . . . . .	MusicInfo  00000258 _DATA	
noteSpawnInterval  . . . . . . .	DWord	 0000A374 _DATA	
noteTimings  . . . . . . . . . .	DWord	 0000A378 _DATA	
note_timer . . . . . . . . . . .	DWord	 00000214 _DATA	
notes  . . . . . . . . . . . . .	DWord	 00000730 _DATA	
readA  . . . . . . . . . . . . .	Byte	 00013FBC _DATA	
real_0 . . . . . . . . . . . . .	DWord	 00014002 _DATA	
real_1000000 . . . . . . . . . .	DWord	 00013FFA _DATA	
real_1 . . . . . . . . . . . . .	DWord	 00013FFE _DATA	
real_36  . . . . . . . . . . . .	DWord	 00013FF6 _DATA	
real_4 . . . . . . . . . . . . .	DWord	 00013FEE _DATA	
real_60000 . . . . . . . . . . .	DWord	 00013FF2 _DATA	
real_60  . . . . . . . . . . . .	DWord	 00013FEA _DATA	
real_85  . . . . . . . . . . . .	DWord	 00014006 _DATA	
rear . . . . . . . . . . . . . .	DWord	 00000720 _DATA	
redDrumTexture . . . . . . . . .	DWord	 00000728 _DATA	
red_drum_path  . . . . . . . . .	Byte	 00000020 _DATA	
scoreString  . . . . . . . . . .	Byte	 00000144 _DATA	
scoreText_x  . . . . . . . . . .	DWord	 0000012A _DATA	
scoreText_y  . . . . . . . . . .	DWord	 0000012E _DATA	
scoreText  . . . . . . . . . . .	DWord	 00000126 _DATA	
score  . . . . . . . . . . . . .	DWord	 00000106 _DATA	
selected_beatmap_path  . . . . .	Byte	 0000008B _DATA	
selected_music_path  . . . . . .	Byte	 00000053 _DATA	
sfCircleShape_create . . . . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setFillColor . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineColor  .	L Near	 00000000 FLAT	External C
sfCircleShape_setOutlineThickness 	L Near	 00000000 FLAT	External C
sfCircleShape_setPosition  . . .	L Near	 00000000 FLAT	External C
sfCircleShape_setRadius  . . . .	L Near	 00000000 FLAT	External C
sfClock_create . . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClock_getElapsedTime . . . . .	L Near	 00000000 FLAT	External C
sfClock_restart  . . . . . . . .	L Near	 00000000 FLAT	External C
sfClose  . . . . . . . . . . . .	Number	 00000004h   
sfColor_fromRGBA . . . . . . . .	L Near	 00000000 FLAT	External C
sfColor_fromRGB  . . . . . . . .	L Near	 00000000 FLAT	External C
sfEvtClosed  . . . . . . . . . .	Number	 00000000h   
sfEvtGainedFocus . . . . . . . .	Number	 00000003h   
sfEvtKeyPressed  . . . . . . . .	Number	 00000005h   
sfEvtKeyReleased . . . . . . . .	Number	 00000006h   
sfEvtLostFocus . . . . . . . . .	Number	 00000002h   
sfEvtMouseButtonPressed  . . . .	Number	 00000009h   
sfEvtMouseButtonReleased . . . .	Number	 0000000Ah   
sfEvtMouseEntered  . . . . . . .	Number	 0000000Ch   
sfEvtMouseLeft . . . . . . . . .	Number	 0000000Dh   
sfEvtMouseMoved  . . . . . . . .	Number	 0000000Bh   
sfEvtMouseWheelMoved . . . . . .	Number	 00000007h   
sfEvtMouseWheelScrolled  . . . .	Number	 00000008h   
sfEvtResized . . . . . . . . . .	Number	 00000001h   
sfEvtTextEntered . . . . . . . .	Number	 00000004h   
sfFalse  . . . . . . . . . . . .	Number	 00000000h   
sfFont_createFromFile  . . . . .	L Near	 00000000 FLAT	External C
sfFont_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfFullscreen . . . . . . . . . .	Number	 00000008h   
sfKeyA . . . . . . . . . . . . .	Number	 00000000h   
sfKeyD . . . . . . . . . . . . .	Number	 00000003h   
sfKeyEnter . . . . . . . . . . .	Number	 0000003Ah   
sfKeyEscape  . . . . . . . . . .	Number	 00000024h   
sfKeyS . . . . . . . . . . . . .	Number	 00000012h   
sfMouseLeft  . . . . . . . . . .	Number	 00000000h   
sfMouseMiddle  . . . . . . . . .	Number	 00000002h   
sfMouseRight . . . . . . . . . .	Number	 00000001h   
sfMusic_createFromFile . . . . .	L Near	 00000000 FLAT	External C
sfMusic_destroy  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_getStatus  . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_play . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_setLoop  . . . . . . . .	L Near	 00000000 FLAT	External C
sfMusic_stop . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfNone . . . . . . . . . . . . .	Number	 00000000h   
sfRectangleShape_create  . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_destroy . . . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setFillColor  .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineColor .	L Near	 00000000 FLAT	External C
sfRectangleShape_setOutlineThickness .	L Near	 00000000 FLAT	External C
sfRectangleShape_setPosition . .	L Near	 00000000 FLAT	External C
sfRectangleShape_setSize . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_clear . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_close . . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_create  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_destroy . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_display . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawCircleShape .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawRectangleShape 	L Near	 00000000 FLAT	External C
sfRenderWindow_drawSprite  . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_drawText  . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_isOpen  . . . . .	L Near	 00000000 FLAT	External C
sfRenderWindow_pollEvent . . . .	L Near	 00000000 FLAT	External C
sfResize . . . . . . . . . . . .	Number	 00000002h   
sfSleep  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_create  . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_destroy . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_getPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_move  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setOrigin . . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setPosition . . . . . .	L Near	 00000000 FLAT	External C
sfSprite_setTexture  . . . . . .	L Near	 00000000 FLAT	External C
sfText_create  . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_destroy . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_getGlobalBounds . . . . .	L Near	 00000000 FLAT	External C
sfText_getLocalBounds  . . . . .	L Near	 00000000 FLAT	External C
sfText_setCharacterSize  . . . .	L Near	 00000000 FLAT	External C
sfText_setFillColor  . . . . . .	L Near	 00000000 FLAT	External C
sfText_setFont . . . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineColor . . . . .	L Near	 00000000 FLAT	External C
sfText_setOutlineThickness . . .	L Near	 00000000 FLAT	External C
sfText_setPosition . . . . . . .	L Near	 00000000 FLAT	External C
sfText_setString . . . . . . . .	L Near	 00000000 FLAT	External C
sfTexture_createFromFile . . . .	L Near	 00000000 FLAT	External C
sfTexture_destroy  . . . . . . .	L Near	 00000000 FLAT	External C
sfTitlebar . . . . . . . . . . .	Number	 00000001h   
sfTrue . . . . . . . . . . . . .	Number	 00000001h   
sfWindow_setFramerateLimit . . .	L Near	 00000000 FLAT	External C
spawnClock . . . . . . . . . . .	DWord	 00000210 _DATA	
spritePosX . . . . . . . . . . .	DWord	 000000DA _DATA	
spritePosY . . . . . . . . . . .	DWord	 000000DE _DATA	
stats  . . . . . . . . . . . . .	GameStats  00000240 _DATA	
str_bpm  . . . . . . . . . . . .	Byte	 00013FBE _DATA	
str_end  . . . . . . . . . . . .	Byte	 00013FD2 _DATA	
str_offset . . . . . . . . . . .	Byte	 00013FC3 _DATA	
str_start  . . . . . . . . . . .	Byte	 00013FCB _DATA	
strcspn  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strlen . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strncmp  . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
strtok_s . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
totalNotes . . . . . . . . . . .	DWord	 0000A370 _DATA	
whiteColor . . . . . . . . . . .	sfColor	 00000234 _DATA	
windowTitle  . . . . . . . . . .	Byte	 00000224 _DATA	
window_videoMode . . . . . . . .	sfVideoMode  00000218 _DATA	

	   1 Warnings
	   0 Errors
